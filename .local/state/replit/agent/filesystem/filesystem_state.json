{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nLoveAIHub is a comprehensive AI platform that provides access to multiple AI models for image generation, video creation, chat completion, audio synthesis, and transcription. The application features a modern React frontend with a Node.js/Express backend, utilizing PostgreSQL for data persistence and integrating with A4F.co API for AI services and Razorpay for payment processing.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nDeployment approach: Iterative - start with core features and add credentials/services incrementally as new features are built.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe client-side application is built using modern React with TypeScript, leveraging:\n\n- **UI Framework**: React with TypeScript for type safety and developer experience\n- **Routing**: Wouter for lightweight client-side routing without the complexity of React Router\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Styling**: Tailwind CSS with a custom design system featuring glass morphism effects and dark theme\n- **Component Library**: Radix UI primitives with custom shadcn/ui components for consistent design\n- **Build Tool**: Vite for fast development and optimized production builds\n\nThe frontend follows a component-based architecture with clear separation between UI components, pages, and business logic hooks.\n\n## Backend Architecture\n\nThe server uses a RESTful API architecture built on:\n\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules for modern JavaScript features\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: OpenID Connect integration with Replit Auth for seamless user authentication\n- **Session Management**: Express sessions with PostgreSQL storage for persistent login state\n\nThe backend implements a service-oriented architecture with dedicated modules for AI API integration, payment processing, and data storage operations.\n\n## Data Storage Solutions\n\n- **Primary Database**: PostgreSQL hosted on Neon for scalable cloud database solution\n- **ORM**: Drizzle ORM provides type-safe database queries and migrations\n- **Schema Design**: Normalized relational schema with tables for users, generations, blog posts, and subscriptions\n- **Session Storage**: PostgreSQL-backed session store for authentication persistence\n\nThe database schema supports multi-tenant usage tracking, generation history, and subscription management.\n\n## Authentication and Authorization\n\n- **Authentication Provider**: Supabase Auth for secure user authentication with email/password login\n- **Session Management**: Server-side sessions with secure HTTP-only cookies, integrated with Supabase tokens\n- **Authorization**: Role-based access control with admin privileges for platform management\n- **Security**: CSRF protection and secure session configuration with proper cookie settings\n- **Frontend Auth**: Custom authentication modal with modern design matching MagicPath specifications\n- **Authentication Flow**: Beautiful sign up, sign in, and password reset forms with social login options\n\n## External Dependencies\n\n- **AI Services**: A4F.co API integration providing access to 20+ AI models including FLUX, DALL-E, GPT, Claude, and Gemini for various AI tasks\n- **Payment Processing**: Razorpay integration for subscription management and payment processing\n- **Database Hosting**: PostgreSQL database for scalable cloud database solution\n- **Authentication**: Supabase authentication service for user management and secure authentication\n- **Development Tools**: Replit-specific tooling for development environment integration\n\n## Recent Changes (August 2025)\n\n- **Migration to Supabase Auth**: Replaced Replit OpenID Connect with Supabase authentication\n  - Created custom authentication API endpoints (/api/auth/signup, /api/auth/signin, /api/auth/signout)\n  - Implemented beautiful AuthModal component based on MagicPath design specifications\n  - Updated navigation component with modern dropdown menu and auth modal integration\n  - Integrated Supabase client for frontend and backend authentication\n  - Updated all route handlers to use new authentication middleware\n  - Added social login UI (Google) and improved form styling with proper spacing and typography\n  - Implemented proper error handling and loading states for all authentication actions\n\n- **Vercel Deployment Setup**: Prepared project for Vercel deployment\n  - Created vercel.json configuration for serverless deployment\n  - Added api/index.ts serverless function entry point\n  - Created comprehensive deployment guides for GitHub integration\n  - Added .vercelignore for optimized deployments\n  - Configured project for automatic deployments from GitHub\n\n- **Complete Migration from Replit Agent to Environment (August 3, 2025)**\n  - Successfully installed all Node.js dependencies and packages\n  - Created PostgreSQL database and deployed complete schema with all required tables\n  - Fixed authentication flow by removing old login endpoints and implementing proper AuthModal integration\n  - Configured all required API keys: Supabase (SUPABASE_URL, SUPABASE_ANON_KEY), A4F.co (A4F_API_KEY), Razorpay (RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET)\n  - Added frontend-specific environment variables (VITE_SUPABASE_URL, VITE_SUPABASE_ANON_KEY) for browser access\n  - Application now running successfully on port 5000 with full frontend-backend connectivity\n  - Landing page displays properly with working authentication buttons\n  - Production build completed successfully, ready for Vercel deployment\n\n- **Production Authentication Configuration (Live at https://www.loveaihub.com)**\n  - Successfully deployed to Vercel with fixed vercel.json configuration\n  - Implemented complete Google OAuth integration with Supabase authentication\n  - Added Google sign-in functionality to both sign-in and sign-up forms\n  - Created OAuth callback endpoint for handling Google authentication flow\n  - Fixed authentication API endpoints for production environment\n  - Authentication modal fully functional with loading states and error handling\n  - **RESOLVED**: Fixed Vercel serverless function path resolution issues\n  - **Database**: Using Supabase PostgreSQL database (postgresql://postgres.gfrpidhedgqixkgafumc:[AKraj@$5630]@aws-0-ap-south-1.pooler.supabase.com:6543/postgres)\n\n- **Complete Migration to Standard Replit Environment (August 4, 2025)**\n  - Successfully migrated from Replit Agent to standard Replit environment\n  - Fixed all Node.js dependencies and package installations with npm install\n  - Created and configured PostgreSQL database with complete schema deployment\n  - Configured all required API keys: Supabase (SUPABASE_URL, SUPABASE_ANON_KEY), A4F.co (A4F_API_KEY), Razorpay (RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET)\n  - Added frontend environment variables (VITE_SUPABASE_URL, VITE_SUPABASE_ANON_KEY) for browser access\n  - Added dotenv configuration for proper environment variable loading\n  - Application running successfully on port 5000 with full frontend-backend connectivity\n  - **PRODUCTION FIX**: Completely rewrote Vercel serverless function to eliminate module resolution issues\n  - Removed complex path mappings and @shared/schema dependencies for serverless compatibility\n  - Self-contained authentication API with direct Supabase integration in api/index.ts\n  - Production deployment now fully functional with all authentication endpoints working","size_bytes":7522},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL is required\");\n}\n\nconst sql = neon(process.env.DATABASE_URL);\nexport const db = drizzle(sql, { schema });\n","size_bytes":312},"server/index.ts":{"content":"import 'dotenv/config';\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2090},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  \n  // Use environment variable or fallback to a generated secret for development\n  const sessionSecret = process.env.SESSION_SECRET || \"8788fdfd5215934707e38407bcb2920b2aa6716b60801fec6ab1ff6ed34cf6d7\";\n  \n  return session({\n    secret: sessionSecret,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4448},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./supabaseAuth\";\nimport { a4fApi } from \"./services/a4fApi\";\nimport { razorpayService } from \"./services/razorpay\";\nimport { insertGenerationSchema, insertBlogPostSchema } from \"@shared/schema\";\nimport multer from \"multer\";\n\nconst upload = multer({ storage: multer.memoryStorage() });\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Note: Auth routes are now handled in supabaseAuth.ts\n\n  // Image Generation Routes\n  app.post(\"/api/generate/image\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.currentUser.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Check generation limits\n      const generationsUsed = user.generationsUsed ?? 0;\n      const generationsLimit = user.generationsLimit ?? 50;\n      if (user.subscriptionType === \"free\" && generationsUsed >= generationsLimit) {\n        return res.status(403).json({ message: \"Generation limit exceeded. Please upgrade to premium.\" });\n      }\n\n      const { model, prompt, enhancePrompt = false, ...options } = req.body;\n      \n      // Enhance prompt if requested\n      let finalPrompt = prompt;\n      if (enhancePrompt) {\n        finalPrompt = await a4fApi.enhancePrompt(prompt);\n      }\n\n      // Create generation record\n      const generation = await storage.createGeneration({\n        userId,\n        type: \"image\",\n        model,\n        prompt: finalPrompt,\n        metadata: { originalPrompt: prompt, enhanced: enhancePrompt, options },\n      });\n\n      try {\n        // Generate image using A4F API\n        const result = await a4fApi.generateImage({\n          model,\n          prompt: finalPrompt,\n          ...options,\n        });\n\n        // Update generation with result\n        await storage.updateGeneration(generation.id, {\n          status: \"completed\",\n          result,\n        });\n\n        // Update user's generation count\n        if (user.subscriptionType === \"free\") {\n          await storage.updateUserGenerationsUsed(userId, generationsUsed + 1);\n        }\n\n        res.json({ generation: { ...generation, result, status: \"completed\" } });\n      } catch (error) {\n        await storage.updateGeneration(generation.id, {\n          status: \"failed\",\n          result: { error: error instanceof Error ? error.message : String(error) },\n        });\n        throw error;\n      }\n    } catch (error) {\n      console.error(\"Error generating image:\", error);\n      res.status(500).json({ message: \"Failed to generate image\" });\n    }\n  });\n\n  // Video Generation Routes\n  app.post(\"/api/generate/video\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.currentUser.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const videoGenerationsUsed = user.generationsUsed ?? 0;\n      const videoGenerationsLimit = user.generationsLimit ?? 50;\n      if (user.subscriptionType === \"free\" && videoGenerationsUsed >= videoGenerationsLimit) {\n        return res.status(403).json({ message: \"Generation limit exceeded. Please upgrade to premium.\" });\n      }\n\n      const { model, prompt, ...options } = req.body;\n\n      const generation = await storage.createGeneration({\n        userId,\n        type: \"video\",\n        model,\n        prompt,\n        metadata: options,\n      });\n\n      try {\n        const result = await a4fApi.generateVideo({\n          model,\n          prompt,\n          ...options,\n        });\n\n        await storage.updateGeneration(generation.id, {\n          status: \"completed\",\n          result,\n        });\n\n        if (user.subscriptionType === \"free\") {\n          await storage.updateUserGenerationsUsed(userId, videoGenerationsUsed + 1);\n        }\n\n        res.json({ generation: { ...generation, result, status: \"completed\" } });\n      } catch (error) {\n        await storage.updateGeneration(generation.id, {\n          status: \"failed\",\n          result: { error: error instanceof Error ? error.message : String(error) },\n        });\n        throw error;\n      }\n    } catch (error) {\n      console.error(\"Error generating video:\", error);\n      res.status(500).json({ message: \"Failed to generate video\" });\n    }\n  });\n\n  // Chat Completion Routes\n  app.post(\"/api/chat/completions\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.currentUser.id;\n      const { model, messages, stream = false, ...options } = req.body;\n\n      if (stream) {\n        // Handle streaming response\n        res.setHeader('Content-Type', 'text/event-stream');\n        res.setHeader('Cache-Control', 'no-cache');\n        res.setHeader('Connection', 'keep-alive');\n\n        try {\n          // For now, we'll implement a simple non-streaming response\n          // In a full implementation, you'd handle the streaming from A4F API\n          const result = await a4fApi.chatCompletion({\n            model,\n            messages,\n            stream: false,\n            ...options,\n          });\n\n          res.write(`data: ${JSON.stringify(result)}\\n\\n`);\n          res.write('data: [DONE]\\n\\n');\n          res.end();\n        } catch (error) {\n          res.write(`data: ${JSON.stringify({ error: error instanceof Error ? error.message : String(error) })}\\n\\n`);\n          res.end();\n        }\n      } else {\n        const result = await a4fApi.chatCompletion({\n          model,\n          messages,\n          ...options,\n        });\n\n        // Log the chat completion\n        await storage.createGeneration({\n          userId,\n          type: \"chat\",\n          model,\n          prompt: messages[messages.length - 1]?.content || \"\",\n          metadata: { messages, options },\n        });\n\n        res.json(result);\n      }\n    } catch (error) {\n      console.error(\"Error in chat completion:\", error);\n      res.status(500).json({ message: \"Failed to process chat completion\" });\n    }\n  });\n\n  // Audio Generation Routes\n  app.post(\"/api/generate/audio\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.currentUser.id;\n      const { model, input, ...options } = req.body;\n\n      const generation = await storage.createGeneration({\n        userId,\n        type: \"audio\",\n        model,\n        prompt: input,\n        metadata: options,\n      });\n\n      try {\n        const result = await a4fApi.generateAudio({\n          model,\n          input,\n          ...options,\n        });\n\n        await storage.updateGeneration(generation.id, {\n          status: \"completed\",\n          result,\n        });\n\n        res.json({ generation: { ...generation, result, status: \"completed\" } });\n      } catch (error) {\n        await storage.updateGeneration(generation.id, {\n          status: \"failed\",\n          result: { error: error instanceof Error ? error.message : String(error) },\n        });\n        throw error;\n      }\n    } catch (error) {\n      console.error(\"Error generating audio:\", error);\n      res.status(500).json({ message: \"Failed to generate audio\" });\n    }\n  });\n\n  // Audio Transcription Routes\n  app.post(\"/api/transcribe\", isAuthenticated, upload.single('audio'), async (req: any, res) => {\n    try {\n      const userId = req.currentUser.id;\n      const { model, language, response_format } = req.body;\n      const audioFile = req.file;\n\n      if (!audioFile) {\n        return res.status(400).json({ message: \"Audio file is required\" });\n      }\n\n      const generation = await storage.createGeneration({\n        userId,\n        type: \"transcription\",\n        model,\n        prompt: \"Audio transcription\",\n        metadata: { language, response_format, fileName: audioFile.originalname },\n      });\n\n      try {\n        const result = await a4fApi.transcribeAudio({\n          model,\n          file: audioFile.buffer,\n          language,\n          response_format,\n        });\n\n        await storage.updateGeneration(generation.id, {\n          status: \"completed\",\n          result,\n        });\n\n        res.json({ generation: { ...generation, result, status: \"completed\" } });\n      } catch (error) {\n        await storage.updateGeneration(generation.id, {\n          status: \"failed\",\n          result: { error: error instanceof Error ? error.message : String(error) },\n        });\n        throw error;\n      }\n    } catch (error) {\n      console.error(\"Error transcribing audio:\", error);\n      res.status(500).json({ message: \"Failed to transcribe audio\" });\n    }\n  });\n\n  // Image Editing Routes\n  app.post(\"/api/edit/image\", isAuthenticated, upload.fields([\n    { name: 'image', maxCount: 1 },\n    { name: 'mask', maxCount: 1 }\n  ]), async (req: any, res) => {\n    try {\n      const userId = req.currentUser.id;\n      const { model, prompt } = req.body;\n      const files = req.files as { [fieldname: string]: Express.Multer.File[] };\n\n      if (!files.image || !files.image[0]) {\n        return res.status(400).json({ message: \"Image file is required\" });\n      }\n\n      const imageFile = files.image[0];\n      const maskFile = files.mask ? files.mask[0] : null;\n\n      const generation = await storage.createGeneration({\n        userId,\n        type: \"image_edit\",\n        model,\n        prompt,\n        metadata: { \n          imageFileName: imageFile.originalname,\n          maskFileName: maskFile?.originalname,\n        },\n      });\n\n      try {\n        const result = await a4fApi.editImage(\n          imageFile.buffer,\n          maskFile?.buffer || null,\n          prompt,\n          model\n        );\n\n        await storage.updateGeneration(generation.id, {\n          status: \"completed\",\n          result,\n        });\n\n        res.json({ generation: { ...generation, result, status: \"completed\" } });\n      } catch (error) {\n        await storage.updateGeneration(generation.id, {\n          status: \"failed\",\n          result: { error: error instanceof Error ? error.message : String(error) },\n        });\n        throw error;\n      }\n    } catch (error) {\n      console.error(\"Error editing image:\", error);\n      res.status(500).json({ message: \"Failed to edit image\" });\n    }\n  });\n\n  // Generation History\n  app.get(\"/api/generations\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.currentUser.id;\n      const generations = await storage.getGenerationsByUser(userId);\n      res.json(generations);\n    } catch (error) {\n      console.error(\"Error fetching generations:\", error);\n      res.status(500).json({ message: \"Failed to fetch generations\" });\n    }\n  });\n\n  // Blog Routes\n  app.get(\"/api/blog\", async (req, res) => {\n    try {\n      const posts = await storage.getPublishedBlogPosts();\n      res.json(posts);\n    } catch (error) {\n      console.error(\"Error fetching blog posts:\", error);\n      res.status(500).json({ message: \"Failed to fetch blog posts\" });\n    }\n  });\n\n  app.get(\"/api/blog/:slug\", async (req, res) => {\n    try {\n      const { slug } = req.params;\n      const post = await storage.getBlogPostBySlug(slug);\n      \n      if (!post) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n\n      res.json(post);\n    } catch (error) {\n      console.error(\"Error fetching blog post:\", error);\n      res.status(500).json({ message: \"Failed to fetch blog post\" });\n    }\n  });\n\n  // Admin Routes\n  app.get(\"/api/admin/users\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.currentUser.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get(\"/api/admin/stats\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.currentUser.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const stats = await storage.getUsageStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  app.post(\"/api/admin/blog\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.currentUser.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const blogData = insertBlogPostSchema.parse(req.body);\n      const post = await storage.createBlogPost({\n        ...blogData,\n        authorId: userId,\n      });\n\n      res.json(post);\n    } catch (error) {\n      console.error(\"Error creating blog post:\", error);\n      res.status(500).json({ message: \"Failed to create blog post\" });\n    }\n  });\n\n  // Subscription Routes\n  app.post(\"/api/subscribe\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.currentUser.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Create Razorpay customer if needed\n      const customer = await razorpayService.createCustomer(\n        user.email || \"\",\n        `${user.firstName} ${user.lastName}`.trim()\n      );\n\n      // Create subscription\n      const subscription = await razorpayService.createSubscription(\"premium_monthly\", customer.id);\n\n      // Store subscription in database\n      await storage.createSubscription({\n        userId,\n        razorpaySubscriptionId: subscription.id,\n        planId: \"premium_monthly\",\n        status: subscription.status,\n      });\n\n      res.json({ subscription });\n    } catch (error) {\n      console.error(\"Error creating subscription:\", error);\n      res.status(500).json({ message: \"Failed to create subscription\" });\n    }\n  });\n\n  // WebSocket for real-time updates\n  const httpServer = createServer(app);\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  wss.on('connection', (ws: WebSocket) => {\n    console.log('WebSocket client connected');\n\n    ws.on('message', (message: Buffer) => {\n      try {\n        const data = JSON.parse(message.toString());\n        \n        // Handle different types of real-time requests\n        switch (data.type) {\n          case 'generation_status':\n            // In a real implementation, you'd track generation status\n            // and send updates to the client\n            break;\n          default:\n            ws.send(JSON.stringify({ error: 'Unknown message type' }));\n        }\n      } catch (error) {\n        ws.send(JSON.stringify({ error: 'Invalid message format' }));\n      }\n    });\n\n    ws.on('close', () => {\n      console.log('WebSocket client disconnected');\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":15312},"server/storage.ts":{"content":"import {\n  users,\n  generations,\n  blogPosts,\n  subscriptions,\n  type User,\n  type UpsertUser,\n  type Generation,\n  type InsertGeneration,\n  type BlogPost,\n  type InsertBlogPost,\n  type Subscription,\n  type InsertSubscription,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser & { id?: string }): Promise<User>;\n  updateUserGenerationsUsed(userId: string, used: number): Promise<void>;\n  \n  // Generation operations\n  createGeneration(generation: InsertGeneration & { userId: string }): Promise<Generation>;\n  getGenerationsByUser(userId: string): Promise<Generation[]>;\n  updateGeneration(id: string, updates: Partial<Generation>): Promise<Generation | undefined>;\n  \n  // Blog operations\n  createBlogPost(post: InsertBlogPost & { authorId: string }): Promise<BlogPost>;\n  getAllBlogPosts(): Promise<BlogPost[]>;\n  getPublishedBlogPosts(): Promise<BlogPost[]>;\n  getBlogPostBySlug(slug: string): Promise<BlogPost | undefined>;\n  updateBlogPost(id: string, updates: Partial<BlogPost>): Promise<BlogPost | undefined>;\n  deleteBlogPost(id: string): Promise<void>;\n  \n  // Subscription operations\n  createSubscription(subscription: InsertSubscription): Promise<Subscription>;\n  getSubscriptionByUserId(userId: string): Promise<Subscription | undefined>;\n  updateSubscription(id: string, updates: Partial<Subscription>): Promise<Subscription | undefined>;\n  \n  // Admin operations\n  getAllUsers(): Promise<User[]>;\n  updateUserGenerationsLimit(userId: string, limit: number): Promise<void>;\n  getUsageStats(): Promise<any>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser & { id?: string }): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.email,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserGenerationsUsed(userId: string, used: number): Promise<void> {\n    await db\n      .update(users)\n      .set({ generationsUsed: used, updatedAt: new Date() })\n      .where(eq(users.id, userId));\n  }\n\n  // Generation operations\n  async createGeneration(generation: InsertGeneration & { userId: string }): Promise<Generation> {\n    const [newGeneration] = await db\n      .insert(generations)\n      .values(generation)\n      .returning();\n    return newGeneration;\n  }\n\n  async getGenerationsByUser(userId: string): Promise<Generation[]> {\n    return await db\n      .select()\n      .from(generations)\n      .where(eq(generations.userId, userId))\n      .orderBy(desc(generations.createdAt));\n  }\n\n  async updateGeneration(id: string, updates: Partial<Generation>): Promise<Generation | undefined> {\n    const [updated] = await db\n      .update(generations)\n      .set(updates)\n      .where(eq(generations.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Blog operations\n  async createBlogPost(post: InsertBlogPost & { authorId: string }): Promise<BlogPost> {\n    const [newPost] = await db\n      .insert(blogPosts)\n      .values(post)\n      .returning();\n    return newPost;\n  }\n\n  async getAllBlogPosts(): Promise<BlogPost[]> {\n    return await db\n      .select()\n      .from(blogPosts)\n      .orderBy(desc(blogPosts.createdAt));\n  }\n\n  async getPublishedBlogPosts(): Promise<BlogPost[]> {\n    return await db\n      .select()\n      .from(blogPosts)\n      .where(eq(blogPosts.published, true))\n      .orderBy(desc(blogPosts.createdAt));\n  }\n\n  async getBlogPostBySlug(slug: string): Promise<BlogPost | undefined> {\n    const [post] = await db\n      .select()\n      .from(blogPosts)\n      .where(eq(blogPosts.slug, slug));\n    \n    if (post) {\n      // Increment view count\n      await db\n        .update(blogPosts)\n        .set({ viewCount: sql`${blogPosts.viewCount} + 1` })\n        .where(eq(blogPosts.id, post.id));\n    }\n    \n    return post;\n  }\n\n  async updateBlogPost(id: string, updates: Partial<BlogPost>): Promise<BlogPost | undefined> {\n    const [updated] = await db\n      .update(blogPosts)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(blogPosts.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteBlogPost(id: string): Promise<void> {\n    await db.delete(blogPosts).where(eq(blogPosts.id, id));\n  }\n\n  // Subscription operations\n  async createSubscription(subscription: InsertSubscription): Promise<Subscription> {\n    const [newSubscription] = await db\n      .insert(subscriptions)\n      .values(subscription)\n      .returning();\n    return newSubscription;\n  }\n\n  async getSubscriptionByUserId(userId: string): Promise<Subscription | undefined> {\n    const [subscription] = await db\n      .select()\n      .from(subscriptions)\n      .where(eq(subscriptions.userId, userId));\n    return subscription;\n  }\n\n  async updateSubscription(id: string, updates: Partial<Subscription>): Promise<Subscription | undefined> {\n    const [updated] = await db\n      .update(subscriptions)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(subscriptions.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Admin operations\n  async getAllUsers(): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .orderBy(desc(users.createdAt));\n  }\n\n  async updateUserGenerationsLimit(userId: string, limit: number): Promise<void> {\n    await db\n      .update(users)\n      .set({ generationsLimit: limit })\n      .where(eq(users.id, userId));\n  }\n\n  async getUsageStats(): Promise<any> {\n    const totalUsers = await db.select({ count: sql`count(*)` }).from(users);\n    const totalGenerations = await db.select({ count: sql`count(*)` }).from(generations);\n    const activeSubscriptions = await db\n      .select({ count: sql`count(*)` })\n      .from(subscriptions)\n      .where(eq(subscriptions.status, \"active\"));\n\n    return {\n      totalUsers: totalUsers[0].count,\n      totalGenerations: totalGenerations[0].count,\n      activeSubscriptions: activeSubscriptions[0].count,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":6425},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  subscriptionType: varchar(\"subscription_type\").default(\"free\"), // 'free' or 'premium'\n  subscriptionId: varchar(\"subscription_id\"),\n  generationsUsed: integer(\"generations_used\").default(0),\n  generationsLimit: integer(\"generations_limit\").default(50),\n  isAdmin: boolean(\"is_admin\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// AI Generations history\nexport const generations = pgTable(\"generations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  type: varchar(\"type\").notNull(), // 'image', 'video', 'chat', 'audio', 'transcription'\n  model: varchar(\"model\").notNull(),\n  prompt: text(\"prompt\"),\n  result: jsonb(\"result\"), // Store generation results\n  status: varchar(\"status\").default(\"pending\"), // 'pending', 'completed', 'failed'\n  metadata: jsonb(\"metadata\"), // Store additional data like settings, file urls, etc.\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Blog posts\nexport const blogPosts = pgTable(\"blog_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  slug: varchar(\"slug\").unique().notNull(),\n  content: text(\"content\").notNull(),\n  excerpt: text(\"excerpt\"),\n  featuredImage: varchar(\"featured_image\"),\n  category: varchar(\"category\"),\n  tags: text(\"tags\").array(),\n  published: boolean(\"published\").default(false),\n  authorId: varchar(\"author_id\").references(() => users.id),\n  viewCount: integer(\"view_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Subscriptions\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  razorpaySubscriptionId: varchar(\"razorpay_subscription_id\").unique(),\n  planId: varchar(\"plan_id\").notNull(),\n  status: varchar(\"status\").notNull(), // 'active', 'cancelled', 'paused'\n  currentPeriodStart: timestamp(\"current_period_start\"),\n  currentPeriodEnd: timestamp(\"current_period_end\"),\n  cancelAtPeriodEnd: boolean(\"cancel_at_period_end\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Usage analytics\nexport const usageAnalytics = pgTable(\"usage_analytics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  endpoint: varchar(\"endpoint\").notNull(),\n  model: varchar(\"model\"),\n  tokensUsed: integer(\"tokens_used\"),\n  cost: decimal(\"cost\", { precision: 10, scale: 4 }),\n  responseTime: integer(\"response_time_ms\"),\n  date: timestamp(\"date\").defaultNow(),\n});\n\n// Schemas for validation\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n});\n\nexport const insertGenerationSchema = createInsertSchema(generations).pick({\n  type: true,\n  model: true,\n  prompt: true,\n  metadata: true,\n});\n\nexport const insertBlogPostSchema = createInsertSchema(blogPosts).pick({\n  title: true,\n  slug: true,\n  content: true,\n  excerpt: true,\n  featuredImage: true,\n  category: true,\n  tags: true,\n  published: true,\n});\n\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions).pick({\n  userId: true,\n  razorpaySubscriptionId: true,\n  planId: true,\n  status: true,\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertGeneration = z.infer<typeof insertGenerationSchema>;\nexport type Generation = typeof generations.$inferSelect;\nexport type InsertBlogPost = z.infer<typeof insertBlogPostSchema>;\nexport type BlogPost = typeof blogPosts.$inferSelect;\nexport type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;\nexport type Subscription = typeof subscriptions.$inferSelect;\nexport type UsageAnalytic = typeof usageAnalytics.$inferSelect;\n","size_bytes":4971},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport ImageGeneration from \"@/pages/image-generation\";\nimport VideoGeneration from \"@/pages/video-generation\";\nimport AiChat from \"@/pages/ai-chat\";\nimport AudioSpeech from \"@/pages/audio-speech\";\nimport ImageEditing from \"@/pages/image-editing\";\nimport ApiDocs from \"@/pages/api-docs\";\nimport Blog from \"@/pages/blog\";\nimport Admin from \"@/pages/admin\";\nimport Pricing from \"@/pages/pricing\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/image-generation\" component={ImageGeneration} />\n          <Route path=\"/video-generation\" component={VideoGeneration} />\n          <Route path=\"/ai-chat\" component={AiChat} />\n          <Route path=\"/audio-speech\" component={AudioSpeech} />\n          <Route path=\"/image-editing\" component={ImageEditing} />\n          <Route path=\"/api-docs\" component={ApiDocs} />\n          <Route path=\"/admin\" component={Admin} />\n        </>\n      )}\n      <Route path=\"/blog\" component={Blog} />\n      <Route path=\"/pricing\" component={Pricing} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1905},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(222, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 33%, 17%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --popover: hsl(222, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 33%, 17%);\n  --input: hsl(217, 33%, 17%);\n  --primary: hsl(224, 71.4%, 56.1%);\n  --primary-foreground: hsl(210, 20%, 98%);\n  --secondary: hsl(217, 33%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(217, 33%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(224, 71.4%, 56.1%);\n  --radius: 0.75rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', system-ui, sans-serif;\n  }\n}\n\n@layer components {\n  .glass-effect {\n    background: rgba(15, 23, 42, 0.95);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .glass-card {\n    background: rgba(15, 23, 42, 0.4);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.08);\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n    transition: all 0.3s ease;\n  }\n\n  .glass-card:hover {\n    background: rgba(15, 23, 42, 0.6);\n    border: 1px solid rgba(255, 255, 255, 0.12);\n    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4);\n  }\n\n  .gradient-text {\n    background: linear-gradient(135deg, hsl(224, 71.4%, 56.1%), hsl(262, 83%, 70%), hsl(189, 94%, 57%));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .card-hover {\n    transition: all 0.3s ease;\n  }\n\n  .card-hover:hover {\n    transform: translateY(-8px);\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\n  }\n\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .animate-glow {\n    animation: glow 2s ease-in-out infinite alternate;\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.5s ease-out;\n  }\n\n  .animate-fade-in {\n    animation: fadeIn 0.8s ease-out;\n  }\n\n  .animate-bounce-in {\n    animation: bounceIn 0.6s ease-out;\n  }\n\n  .animate-scale-in {\n    animation: scaleIn 0.3s ease-out;\n  }\n}\n\n@keyframes float {\n  0%, 100% { \n    transform: translateY(0px); \n  }\n  50% { \n    transform: translateY(-20px); \n  }\n}\n\n@keyframes glow {\n  from { \n    box-shadow: 0 0 20px rgba(99, 102, 241, 0.3); \n  }\n  to { \n    box-shadow: 0 0 30px rgba(99, 102, 241, 0.6); \n  }\n}\n\n@keyframes slideUp {\n  from { \n    opacity: 0; \n    transform: translateY(50px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n@keyframes fadeIn {\n  from { \n    opacity: 0; \n  }\n  to { \n    opacity: 1; \n  }\n}\n\n@keyframes bounceIn {\n  0% { \n    opacity: 0; \n    transform: scale(0.3); \n  }\n  50% { \n    opacity: 1; \n    transform: scale(1.05); \n  }\n  70% { \n    transform: scale(0.9); \n  }\n  100% { \n    opacity: 1; \n    transform: scale(1); \n  }\n}\n\n@keyframes scaleIn {\n  from { \n    opacity: 0; \n    transform: scale(0.8); \n  }\n  to { \n    opacity: 1; \n    transform: scale(1); \n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(217, 33%, 17%);\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(224, 71.4%, 56.1%);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(224, 71.4%, 46.1%);\n}\n\n/* Loading animations */\n.loading-shimmer {\n  background: linear-gradient(\n    90deg,\n    rgba(255, 255, 255, 0.1) 0%,\n    rgba(255, 255, 255, 0.2) 50%,\n    rgba(255, 255, 255, 0.1) 100%\n  );\n  background-size: 200% 100%;\n  animation: shimmer 2s infinite;\n}\n\n@keyframes shimmer {\n  0% {\n    background-position: -200% 0;\n  }\n  100% {\n    background-position: 200% 0;\n  }\n}\n\n/* 3D transforms */\n.transform-3d {\n  transform-style: preserve-3d;\n}\n\n.rotate-y-12 {\n  transform: rotateY(12deg);\n}\n\n.rotate-x-12 {\n  transform: rotateX(12deg);\n}\n\n/* Custom button animations */\n.btn-primary {\n  @apply bg-gradient-to-r from-primary to-purple-500 text-primary-foreground px-6 py-3 rounded-lg font-semibold transition-all duration-300 hover:shadow-xl hover:scale-105;\n}\n\n.btn-secondary {\n  @apply glass-effect text-foreground px-6 py-3 rounded-lg font-semibold transition-all duration-300 hover:bg-slate-700/50;\n}\n\n/* Monaco Editor theme adjustments */\n.monaco-editor {\n  background: hsl(222, 84%, 4.9%) !important;\n}\n\n/* AdSense optimized layouts */\n.ad-container {\n  @apply min-h-[250px] flex items-center justify-center bg-gray-100/20 dark:bg-gray-800/20 rounded-lg border border-border;\n}\n\n.ad-container::before {\n  content: \"Advertisement\";\n  @apply text-muted-foreground text-sm;\n}\n","size_bytes":4793},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/a4f.ts":{"content":"export interface A4FImageGenerationRequest {\n  model: string;\n  prompt: string;\n  n?: number;\n  size?: string;\n  quality?: string;\n  style?: string;\n}\n\nexport interface A4FVideoGenerationRequest {\n  model: string;\n  prompt: string;\n}\n\nexport interface A4FChatRequest {\n  model: string;\n  messages: Array<{\n    role: string;\n    content: string;\n  }>;\n  temperature?: number;\n  max_tokens?: number;\n}\n\nexport interface A4FAudioRequest {\n  model: string;\n  input: string;\n  voice?: string;\n}\n\nexport interface A4FTranscriptionRequest {\n  model: string;\n  file: Buffer;\n  language?: string;\n}\n\nexport class A4FService {\n  private apiKey: string;\n  private baseUrl: string;\n\n  constructor() {\n    this.apiKey = process.env.A4F_API_KEY || process.env.A4F_API_KEY_ENV_VAR || \"ddc-a4f-cd950b4d41874c21acc4792bb0a392d7\";\n    this.baseUrl = \"https://api.a4f.co/v1\";\n  }\n\n  private async makeRequest(endpoint: string, data: any, method = 'POST') {\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      method,\n      headers: {\n        'Authorization': `Bearer ${this.apiKey}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(`A4F API Error: ${response.status} - ${error}`);\n    }\n\n    return response.json();\n  }\n\n  async generateImage(request: A4FImageGenerationRequest) {\n    return this.makeRequest('/images/generations', request);\n  }\n\n  async generateVideo(request: A4FVideoGenerationRequest) {\n    return this.makeRequest('/video/generations', request);\n  }\n\n  async chatCompletion(request: A4FChatRequest) {\n    return this.makeRequest('/chat/completions', request);\n  }\n\n  async generateAudio(request: A4FAudioRequest) {\n    return this.makeRequest('/audio/speech', request);\n  }\n\n  async transcribeAudio(request: A4FTranscriptionRequest) {\n    const formData = new FormData();\n    formData.append('file', new Blob([request.file]));\n    formData.append('model', request.model);\n    if (request.language) {\n      formData.append('language', request.language);\n    }\n\n    const response = await fetch(`${this.baseUrl}/audio/transcriptions`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${this.apiKey}`,\n      },\n      body: formData,\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(`A4F API Error: ${response.status} - ${error}`);\n    }\n\n    return response.json();\n  }\n\n  async editImage(request: any) {\n    return this.makeRequest('/images/edits', request);\n  }\n\n  async getEmbeddings(request: any) {\n    return this.makeRequest('/embeddings', request);\n  }\n\n  // Enhanced prompt for image generation\n  async enhancePrompt(prompt: string) {\n    const enhanceRequest: A4FChatRequest = {\n      model: \"provider-3/gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert at enhancing image generation prompts. Take the user's basic prompt and enhance it with artistic details, lighting, composition, and style elements while keeping the core concept intact. Return only the enhanced prompt.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      max_tokens: 200,\n      temperature: 0.7\n    };\n\n    const response = await this.chatCompletion(enhanceRequest);\n    return response.choices[0].message.content;\n  }\n}\n\nexport const a4fService = new A4FService();\n","size_bytes":3471},"server/services/a4fApi.ts":{"content":"import { Generation } from \"@shared/schema\";\n\ninterface A4FImageRequest {\n  model: string;\n  prompt: string;\n  n?: number;\n  size?: string;\n  quality?: string;\n  style?: string;\n  response_format?: string;\n}\n\ninterface A4FVideoRequest {\n  model: string;\n  prompt: string;\n  duration?: number;\n  aspect_ratio?: string;\n}\n\ninterface A4FChatRequest {\n  model: string;\n  messages: Array<{ role: string; content: string }>;\n  temperature?: number;\n  max_tokens?: number;\n  stream?: boolean;\n}\n\ninterface A4FAudioRequest {\n  model: string;\n  input: string;\n  voice?: string;\n  response_format?: string;\n  speed?: number;\n}\n\ninterface A4FTranscriptionRequest {\n  model: string;\n  file: Buffer;\n  language?: string;\n  response_format?: string;\n}\n\nexport class A4FApiService {\n  private apiKey: string;\n  private baseUrl: string;\n\n  constructor() {\n    this.apiKey = process.env.A4F_API_KEY || process.env.A4F_API_KEY_ENV_VAR || \"ddc-a4f-cd950b4d41874c21acc4792bb0a392d7\";\n    this.baseUrl = \"https://api.a4f.co/v1\";\n  }\n\n  private async makeRequest(endpoint: string, data: any, method: string = \"POST\") {\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      method,\n      headers: {\n        \"Authorization\": `Bearer ${this.apiKey}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`A4F API error: ${response.status} - ${errorText}`);\n    }\n\n    return await response.json();\n  }\n\n  async enhancePrompt(prompt: string): Promise<string> {\n    try {\n      const response = await this.makeRequest(\"/chat/completions\", {\n        model: \"provider-3/gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a professional AI prompt engineer. Enhance the given prompt to be more detailed, specific, and optimized for image generation. Keep the core idea but add artistic details, style specifications, and technical parameters that will result in better AI-generated images.\"\n          },\n          {\n            role: \"user\",\n            content: `Enhance this prompt for image generation: \"${prompt}\"`\n          }\n        ],\n        temperature: 0.7,\n        max_tokens: 200\n      });\n\n      return response.choices[0].message.content;\n    } catch (error) {\n      console.error(\"Error enhancing prompt:\", error);\n      return prompt; // Return original prompt if enhancement fails\n    }\n  }\n\n  async generateImage(request: A4FImageRequest): Promise<any> {\n    return await this.makeRequest(\"/images/generations\", request);\n  }\n\n  async generateVideo(request: A4FVideoRequest): Promise<any> {\n    return await this.makeRequest(\"/video/generations\", request);\n  }\n\n  async chatCompletion(request: A4FChatRequest): Promise<any> {\n    return await this.makeRequest(\"/chat/completions\", request);\n  }\n\n  async generateAudio(request: A4FAudioRequest): Promise<any> {\n    return await this.makeRequest(\"/audio/speech\", request);\n  }\n\n  async transcribeAudio(request: A4FTranscriptionRequest): Promise<any> {\n    const formData = new FormData();\n    formData.append(\"model\", request.model);\n    formData.append(\"file\", new Blob([request.file]));\n    if (request.language) formData.append(\"language\", request.language);\n    if (request.response_format) formData.append(\"response_format\", request.response_format);\n\n    const response = await fetch(`${this.baseUrl}/audio/transcriptions`, {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${this.apiKey}`,\n      },\n      body: formData,\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`A4F API error: ${response.status} - ${errorText}`);\n    }\n\n    return await response.json();\n  }\n\n  async editImage(imageFile: Buffer, maskFile: Buffer | null, prompt: string, model: string): Promise<any> {\n    const formData = new FormData();\n    formData.append(\"model\", model);\n    formData.append(\"image\", new Blob([imageFile]));\n    if (maskFile) formData.append(\"mask\", new Blob([maskFile]));\n    formData.append(\"prompt\", prompt);\n\n    const response = await fetch(`${this.baseUrl}/images/edits`, {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${this.apiKey}`,\n      },\n      body: formData,\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`A4F API error: ${response.status} - ${errorText}`);\n    }\n\n    return await response.json();\n  }\n\n  async generateEmbeddings(input: string[], model: string): Promise<any> {\n    return await this.makeRequest(\"/embeddings\", {\n      model,\n      input,\n    });\n  }\n\n  // Get available models\n  async getModels(): Promise<any> {\n    return await this.makeRequest(\"/models\", {}, \"GET\");\n  }\n}\n\nexport const a4fApi = new A4FApiService();\n","size_bytes":4852},"server/services/razorpay.ts":{"content":"import Razorpay from \"razorpay\";\n\nexport class RazorpayService {\n  private razorpay: Razorpay;\n\n  constructor() {\n    this.razorpay = new Razorpay({\n      key_id: process.env.RAZORPAY_KEY_ID || \"rzp_live_2kYJDdAef2pyQP\",\n      key_secret: process.env.RAZORPAY_KEY_SECRET || \"0KIYQ2tCGiWRwyRgXT1SxJla\",\n    });\n  }\n\n  async createSubscription(planId: string, customerId?: string) {\n    try {\n      const subscription = await this.razorpay.subscriptions.create({\n        plan_id: planId,\n        quantity: 1,\n        total_count: 12, // 12 months\n        addons: [],\n        notes: {\n          service: \"LoveAIHub Premium\",\n        },\n      } as any);\n\n      return subscription;\n    } catch (error) {\n      console.error(\"Error creating subscription:\", error);\n      throw new Error(\"Failed to create subscription\");\n    }\n  }\n\n  async createCustomer(email: string, name: string) {\n    try {\n      const customer = await this.razorpay.customers.create({\n        name,\n        email,\n        contact: \"\",\n        notes: {\n          service: \"LoveAIHub\",\n        },\n      });\n\n      return customer;\n    } catch (error) {\n      console.error(\"Error creating customer:\", error);\n      throw new Error(\"Failed to create customer\");\n    }\n  }\n\n  async createPlan() {\n    try {\n      const plan = await this.razorpay.plans.create({\n        period: \"monthly\",\n        interval: 1,\n        item: {\n          name: \"LoveAIHub Premium\",\n          amount: 500, // $5 in cents\n          currency: \"USD\",\n          description: \"Unlimited access to all AI models\",\n        },\n      });\n\n      return plan;\n    } catch (error) {\n      console.error(\"Error creating plan:\", error);\n      throw new Error(\"Failed to create plan\");\n    }\n  }\n\n  async cancelSubscription(subscriptionId: string) {\n    try {\n      const subscription = await this.razorpay.subscriptions.cancel(subscriptionId, true);\n      return subscription;\n    } catch (error) {\n      console.error(\"Error cancelling subscription:\", error);\n      throw new Error(\"Failed to cancel subscription\");\n    }\n  }\n\n  async getSubscription(subscriptionId: string) {\n    try {\n      return await this.razorpay.subscriptions.fetch(subscriptionId);\n    } catch (error) {\n      console.error(\"Error fetching subscription:\", error);\n      throw new Error(\"Failed to fetch subscription\");\n    }\n  }\n\n  async verifyWebhookSignature(payload: string, signature: string, secret: string): Promise<boolean> {\n    try {\n      const crypto = require(\"crypto\");\n      const expectedSignature = crypto\n        .createHmac(\"sha256\", secret)\n        .update(payload)\n        .digest(\"hex\");\n\n      return expectedSignature === signature;\n    } catch (error) {\n      console.error(\"Error verifying webhook signature:\", error);\n      return false;\n    }\n  }\n}\n\nexport const razorpayService = new RazorpayService();\n","size_bytes":2836},"client/src/components/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Sparkles, Twitter, Github, Linkedin } from \"lucide-react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-slate-900 border-t border-slate-800\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div className=\"col-span-1 md:col-span-2\">\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"w-10 h-10 rounded-xl bg-gradient-to-r from-primary to-purple-500 flex items-center justify-center\">\n                <Sparkles className=\"w-6 h-6 text-white\" />\n              </div>\n              <span className=\"text-xl font-bold gradient-text\">LoveAIHub</span>\n            </div>\n            <p className=\"text-muted-foreground mb-6 max-w-md\">\n              Professional AI platform providing access to 20+ state-of-the-art AI models for image generation, video creation, chat completion, and more.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a\n                href=\"#\"\n                className=\"w-10 h-10 glass-effect rounded-lg flex items-center justify-center hover:bg-slate-700/50 transition-all\"\n              >\n                <Twitter className=\"w-5 h-5\" />\n              </a>\n              <a\n                href=\"#\"\n                className=\"w-10 h-10 glass-effect rounded-lg flex items-center justify-center hover:bg-slate-700/50 transition-all\"\n              >\n                <Github className=\"w-5 h-5\" />\n              </a>\n              <a\n                href=\"#\"\n                className=\"w-10 h-10 glass-effect rounded-lg flex items-center justify-center hover:bg-slate-700/50 transition-all\"\n              >\n                <Linkedin className=\"w-5 h-5\" />\n              </a>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-6\">AI Services</h3>\n            <ul className=\"space-y-3 text-muted-foreground\">\n              <li>\n                <Link href=\"/image-generation\" className=\"hover:text-white transition-colors\">\n                  Image Generation\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/video-generation\" className=\"hover:text-white transition-colors\">\n                  Video Creation\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/ai-chat\" className=\"hover:text-white transition-colors\">\n                  AI Chat\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/audio-speech\" className=\"hover:text-white transition-colors\">\n                  Audio & Speech\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/image-editing\" className=\"hover:text-white transition-colors\">\n                  Image Editing\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/api-docs\" className=\"hover:text-white transition-colors\">\n                  API Access\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-6\">Resources</h3>\n            <ul className=\"space-y-3 text-muted-foreground\">\n              <li>\n                <Link href=\"/api-docs\" className=\"hover:text-white transition-colors\">\n                  Documentation\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/api-docs\" className=\"hover:text-white transition-colors\">\n                  API Reference\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/blog\" className=\"hover:text-white transition-colors\">\n                  Blog\n                </Link>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-white transition-colors\">\n                  Tutorials\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-white transition-colors\">\n                  Community\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-white transition-colors\">\n                  Support\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-slate-800 mt-12 pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-muted-foreground text-sm\">\n            © 2024 LoveAIHub. All rights reserved.\n          </p>\n          <div className=\"flex space-x-6 text-sm text-muted-foreground mt-4 md:mt-0\">\n            <a href=\"#\" className=\"hover:text-white transition-colors\">\n              Privacy Policy\n            </a>\n            <a href=\"#\" className=\"hover:text-white transition-colors\">\n              Terms of Service\n            </a>\n            <a href=\"#\" className=\"hover:text-white transition-colors\">\n              Cookie Policy\n            </a>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5109},"client/src/components/generation-history.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  History, \n  Download, \n  Search, \n  Filter, \n  Image, \n  Video, \n  MessageSquare, \n  Mic, \n  Edit,\n  Copy,\n  ExternalLink,\n  Calendar,\n  Clock,\n  Eye,\n  Trash2\n} from \"lucide-react\";\n\nconst typeIcons = {\n  image: Image,\n  video: Video,\n  chat: MessageSquare,\n  audio: Mic,\n  transcription: Mic,\n  image_edit: Edit,\n};\n\nconst typeColors = {\n  image: \"bg-primary/20 text-primary\",\n  video: \"bg-cyan-500/20 text-cyan-400\",\n  chat: \"bg-purple-500/20 text-purple-400\",\n  audio: \"bg-emerald-500/20 text-emerald-400\",\n  transcription: \"bg-orange-500/20 text-orange-400\",\n  image_edit: \"bg-pink-500/20 text-pink-400\",\n};\n\nexport default function GenerationHistory() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedType, setSelectedType] = useState(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState(\"all\");\n\n  const { data: generations, isLoading } = useQuery({\n    queryKey: [\"/api/generations\"],\n    retry: false,\n  });\n\n  const filteredGenerations = generations?.filter((generation: any) => {\n    const matchesSearch = generation.prompt?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         generation.model?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesType = selectedType === \"all\" || generation.type === selectedType;\n    const matchesStatus = selectedStatus === \"all\" || generation.status === selectedStatus;\n    \n    return matchesSearch && matchesType && matchesStatus;\n  }) || [];\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n  };\n\n  const downloadResult = (generation: any) => {\n    if (generation.result?.data?.[0]?.url) {\n      window.open(generation.result.data[0].url, '_blank');\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      completed: { variant: \"secondary\" as const, color: \"text-green-400\", text: \"Completed\" },\n      pending: { variant: \"outline\" as const, color: \"text-yellow-400\", text: \"Pending\" },\n      failed: { variant: \"destructive\" as const, color: \"text-red-400\", text: \"Failed\" }\n    };\n    \n    return statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;\n  };\n\n  const groupedGenerations = filteredGenerations.reduce((acc: any, generation: any) => {\n    const date = new Date(generation.createdAt).toDateString();\n    if (!acc[date]) {\n      acc[date] = [];\n    }\n    acc[date].push(generation);\n    return acc;\n  }, {});\n\n  return (\n    <Card className=\"glass-effect border-border\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <History className=\"w-6 h-6\" />\n          <span>Generation History</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {/* Filters */}\n        <div className=\"space-y-4 mb-6\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search generations...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 bg-slate-800/50 border-slate-700\"\n              />\n            </div>\n            \n            <Select value={selectedType} onValueChange={setSelectedType}>\n              <SelectTrigger className=\"w-full sm:w-[160px] bg-slate-800/50 border-slate-700\">\n                <SelectValue placeholder=\"Type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"image\">Images</SelectItem>\n                <SelectItem value=\"video\">Videos</SelectItem>\n                <SelectItem value=\"chat\">Chat</SelectItem>\n                <SelectItem value=\"audio\">Audio</SelectItem>\n                <SelectItem value=\"transcription\">Transcription</SelectItem>\n                <SelectItem value=\"image_edit\">Image Edits</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger className=\"w-full sm:w-[160px] bg-slate-800/50 border-slate-700\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"failed\">Failed</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Generation List */}\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"loading-shimmer h-24 rounded-lg\"></div>\n            ))}\n          </div>\n        ) : filteredGenerations.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <History className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No generations found</h3>\n            <p className=\"text-muted-foreground\">\n              {generations?.length === 0 \n                ? \"Start creating with our AI tools to see your history here\" \n                : \"Try adjusting your search criteria\"}\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-6 max-h-[600px] overflow-y-auto\">\n            {Object.entries(groupedGenerations).map(([date, dayGenerations]: [string, any]) => (\n              <div key={date}>\n                <div className=\"flex items-center space-x-2 mb-4\">\n                  <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                  <h4 className=\"font-medium text-muted-foreground\">\n                    {new Date(date).toLocaleDateString('en-US', { \n                      weekday: 'long', \n                      month: 'long', \n                      day: 'numeric' \n                    })}\n                  </h4>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  {dayGenerations.map((generation: any) => {\n                    const TypeIcon = typeIcons[generation.type as keyof typeof typeIcons] || Image;\n                    const statusBadge = getStatusBadge(generation.status);\n                    \n                    return (\n                      <div key={generation.id} className=\"glass-effect rounded-lg p-4 hover:bg-slate-800/30 transition-colors\">\n                        <div className=\"flex items-start space-x-4\">\n                          {/* Type Icon */}\n                          <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${\n                            typeColors[generation.type as keyof typeof typeColors] || \"bg-slate-700\"\n                          }`}>\n                            <TypeIcon className=\"w-6 h-6\" />\n                          </div>\n\n                          {/* Content */}\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              <h4 className=\"font-medium truncate\">\n                                {generation.model?.split('/')[1] || generation.model}\n                              </h4>\n                              <Badge variant={statusBadge.variant} className=\"text-xs\">\n                                {statusBadge.text}\n                              </Badge>\n                            </div>\n                            \n                            <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">\n                              {generation.prompt || \"No prompt provided\"}\n                            </p>\n\n                            <div className=\"flex items-center space-x-4 text-xs text-muted-foreground mb-3\">\n                              <div className=\"flex items-center space-x-1\">\n                                <Clock className=\"w-3 h-3\" />\n                                <span>{formatDate(generation.createdAt)}</span>\n                              </div>\n                              {generation.metadata?.options && (\n                                <div className=\"flex items-center space-x-1\">\n                                  <Eye className=\"w-3 h-3\" />\n                                  <span>{generation.metadata.options.size || \"Standard\"}</span>\n                                </div>\n                              )}\n                            </div>\n\n                            {/* Actions */}\n                            <div className=\"flex items-center space-x-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={() => copyToClipboard(generation.prompt || \"\")}\n                                className=\"h-8 px-2\"\n                              >\n                                <Copy className=\"w-3 h-3 mr-1\" />\n                                Copy\n                              </Button>\n                              \n                              {generation.result?.data?.[0]?.url && (\n                                <>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                    onClick={() => window.open(generation.result.data[0].url, '_blank')}\n                                    className=\"h-8 px-2\"\n                                  >\n                                    <ExternalLink className=\"w-3 h-3 mr-1\" />\n                                    View\n                                  </Button>\n                                  \n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                    onClick={() => downloadResult(generation)}\n                                    className=\"h-8 px-2\"\n                                  >\n                                    <Download className=\"w-3 h-3 mr-1\" />\n                                    Download\n                                  </Button>\n                                </>\n                              )}\n\n                              {generation.result?.text && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={() => copyToClipboard(generation.result.text)}\n                                  className=\"h-8 px-2\"\n                                >\n                                  <Copy className=\"w-3 h-3 mr-1\" />\n                                  Copy Text\n                                </Button>\n                              )}\n\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                className=\"h-8 px-2 text-red-400 hover:text-red-300\"\n                              >\n                                <Trash2 className=\"w-3 h-3\" />\n                              </Button>\n                            </div>\n                          </div>\n\n                          {/* Preview */}\n                          {generation.result?.data?.[0]?.url && (\n                            <div className=\"w-16 h-16 bg-slate-700 rounded-lg overflow-hidden flex-shrink-0\">\n                              {generation.type === \"image\" || generation.type === \"image_edit\" ? (\n                                <img\n                                  src={generation.result.data[0].url}\n                                  alt=\"Generated\"\n                                  className=\"w-full h-full object-cover\"\n                                />\n                              ) : generation.type === \"video\" ? (\n                                <video\n                                  className=\"w-full h-full object-cover\"\n                                  poster=\"/placeholder-video.jpg\"\n                                >\n                                  <source src={generation.result.data[0].url} type=\"video/mp4\" />\n                                </video>\n                              ) : (\n                                <div className=\"w-full h-full flex items-center justify-center\">\n                                  <TypeIcon className=\"w-8 h-8 text-muted-foreground\" />\n                                </div>\n                              )}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":13737},"client/src/components/navigation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth, useSignOut } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Menu, Sparkles, LogOut, User } from \"lucide-react\";\nimport { AuthModal } from \"@/components/auth/AuthModal\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport default function Navigation() {\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [showAuthModal, setShowAuthModal] = useState(false);\n  const [authModalTab, setAuthModalTab] = useState<\"signin\" | \"signup\">(\"signin\");\n  const { isAuthenticated, user } = useAuth();\n  const signOut = useSignOut();\n  const [location] = useLocation();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 50);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const navItems = isAuthenticated\n    ? [\n        { name: \"Dashboard\", path: \"/\" },\n        { name: \"Image Studio\", path: \"/image-generation\" },\n        { name: \"Video Lab\", path: \"/video-generation\" },\n        { name: \"AI Chat\", path: \"/ai-chat\" },\n        { name: \"Audio Tools\", path: \"/audio-speech\" },\n        { name: \"Image Editor\", path: \"/image-editing\" },\n        { name: \"API Docs\", path: \"/api-docs\" },\n        { name: \"Blog\", path: \"/blog\" },\n      ]\n    : [\n        { name: \"Features\", path: \"#features\" },\n        { name: \"AI Models\", path: \"#models\" },\n        { name: \"Pricing\", path: \"/pricing\" },\n        { name: \"Blog\", path: \"/blog\" },\n        { name: \"Docs\", path: \"/api-docs\" },\n      ];\n\n  return (\n    <nav\n      className={`fixed top-0 w-full z-50 transition-all duration-300 ${\n        isScrolled ? \"glass-effect backdrop-blur-xl\" : \"bg-transparent\"\n      }`}\n    >\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\" className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 rounded-xl bg-gradient-to-r from-primary to-purple-500 flex items-center justify-center\">\n              <Sparkles className=\"w-6 h-6 text-white\" />\n            </div>\n            <span className=\"text-xl font-bold gradient-text\">LoveAIHub</span>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            {navItems.map((item) => (\n              <Link\n                key={item.name}\n                href={item.path}\n                className={`transition-colors ${\n                  location === item.path\n                    ? \"text-primary\"\n                    : \"hover:text-primary text-muted-foreground\"\n                }`}\n              >\n                {item.name}\n              </Link>\n            ))}\n          </div>\n\n          {/* Auth Buttons */}\n          <div className=\"hidden md:flex items-center space-x-4\">\n            {isAuthenticated ? (\n              <>\n                {user?.isAdmin && (\n                  <Link href=\"/admin\">\n                    <Button variant=\"ghost\" size=\"sm\">\n                      Admin\n                    </Button>\n                  </Link>\n                )}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" size=\"sm\" className=\"flex items-center space-x-2\">\n                      <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-primary to-purple-500 flex items-center justify-center\">\n                        <span className=\"text-sm font-medium text-white\">\n                          {user?.firstName?.charAt(0) || user?.email?.charAt(0) || \"U\"}\n                        </span>\n                      </div>\n                      <span className=\"text-sm\">\n                        {user?.firstName || \"User\"}\n                      </span>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem onClick={() => signOut.mutate()}>\n                      <LogOut className=\"w-4 h-4 mr-2\" />\n                      Sign Out\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </>\n            ) : (\n              <>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setAuthModalTab(\"signin\");\n                    setShowAuthModal(true);\n                  }}\n                >\n                  Sign In\n                </Button>\n                <Button\n                  className=\"btn-primary\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setAuthModalTab(\"signup\");\n                    setShowAuthModal(true);\n                  }}\n                >\n                  Start Free\n                </Button>\n              </>\n            )}\n          </div>\n\n          {/* Mobile Menu */}\n          <div className=\"md:hidden\">\n            <Sheet>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Menu className=\"w-5 h-5\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-80 glass-effect\">\n                <div className=\"flex flex-col space-y-4 mt-8\">\n                  {navItems.map((item) => (\n                    <Link\n                      key={item.name}\n                      href={item.path}\n                      className={`px-4 py-2 rounded-lg transition-colors ${\n                        location === item.path\n                          ? \"bg-primary text-primary-foreground\"\n                          : \"hover:bg-muted\"\n                      }`}\n                    >\n                      {item.name}\n                    </Link>\n                  ))}\n\n                  <div className=\"pt-4 border-t border-border\">\n                    {isAuthenticated ? (\n                      <>\n                        <div className=\"flex items-center space-x-3 px-4 py-2\">\n                          <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-primary to-purple-500 flex items-center justify-center\">\n                            <span className=\"text-sm font-medium text-white\">\n                              {user?.firstName?.charAt(0) || user?.email?.charAt(0) || \"U\"}\n                            </span>\n                          </div>\n                          <span className=\"text-sm\">\n                            {user?.firstName || \"User\"}\n                          </span>\n                        </div>\n                        {user?.isAdmin && (\n                          <Link href=\"/admin\">\n                            <Button variant=\"ghost\" className=\"w-full justify-start\">\n                              Admin Panel\n                            </Button>\n                          </Link>\n                        )}\n                        <Button\n                          variant=\"ghost\"\n                          className=\"w-full justify-start\"\n                          onClick={() => signOut.mutate()}\n                        >\n                          <LogOut className=\"w-4 h-4 mr-2\" />\n                          Sign Out\n                        </Button>\n                      </>\n                    ) : (\n                      <>\n                        <Button\n                          variant=\"ghost\"\n                          className=\"w-full justify-start\"\n                          onClick={() => {\n                            setAuthModalTab(\"signin\");\n                            setShowAuthModal(true);\n                          }}\n                        >\n                          Sign In\n                        </Button>\n                        <Button\n                          className=\"btn-primary w-full\"\n                          onClick={() => {\n                            setAuthModalTab(\"signup\");\n                            setShowAuthModal(true);\n                          }}\n                        >\n                          Start Free\n                        </Button>\n                      </>\n                    )}\n                  </div>\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n      \n      <AuthModal\n        isOpen={showAuthModal}\n        onClose={() => setShowAuthModal(false)}\n        defaultTab={authModalTab}\n      />\n    </nav>\n  );\n}\n","size_bytes":8763},"client/src/components/subscription-manager.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Crown, \n  Zap, \n  Calendar, \n  CreditCard, \n  TrendingUp,\n  Shield,\n  Star,\n  CheckCircle,\n  AlertCircle,\n  Gift\n} from \"lucide-react\";\n\nexport default function SubscriptionManager() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isUpgrading, setIsUpgrading] = useState(false);\n\n  const subscriptionMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/subscribe\", {});\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Subscription Created\",\n        description: \"Redirecting to payment page...\",\n      });\n      // In a real implementation, redirect to Razorpay payment page\n      console.log(\"Subscription data:\", data);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Subscription Error\",\n        description: error.message || \"Failed to create subscription.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpgrade = () => {\n    setIsUpgrading(true);\n    subscriptionMutation.mutate();\n  };\n\n  const isPremium = user?.subscriptionType === \"premium\";\n  const usagePercentage = user?.subscriptionType === \"free\" \n    ? (user.generationsUsed / user.generationsLimit) * 100 \n    : 0;\n\n  const features = {\n    free: [\n      \"50 generations per month\",\n      \"Standard quality\",\n      \"Community support\",\n      \"Basic API access\"\n    ],\n    premium: [\n      \"Unlimited generations\",\n      \"HD quality & priority processing\",\n      \"Advanced AI chat with tools\",\n      \"Full API access\",\n      \"Priority support\",\n      \"Advanced analytics\"\n    ]\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Current Plan Status */}\n      <Card className=\"glass-effect border-border\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            {isPremium ? (\n              <Crown className=\"w-6 h-6 text-yellow-400\" />\n            ) : (\n              <Zap className=\"w-6 h-6 text-primary\" />\n            )}\n            <span>Current Plan</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-2xl font-bold capitalize\">{user?.subscriptionType || \"Free\"}</h3>\n              <p className=\"text-muted-foreground\">\n                {isPremium ? \"Unlimited AI access\" : \"Limited monthly usage\"}\n              </p>\n            </div>\n            <Badge \n              variant={isPremium ? \"default\" : \"outline\"}\n              className={isPremium ? \"bg-gradient-to-r from-yellow-500 to-orange-500\" : \"\"}\n            >\n              {isPremium ? \"Premium\" : \"Free\"}\n            </Badge>\n          </div>\n\n          {!isPremium && (\n            <div>\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm text-muted-foreground\">Monthly Usage</span>\n                <span className=\"text-sm font-medium\">\n                  {user?.generationsUsed || 0} / {user?.generationsLimit || 50}\n                </span>\n              </div>\n              <Progress value={usagePercentage} className=\"h-2\" />\n              {usagePercentage > 80 && (\n                <div className=\"flex items-center space-x-2 mt-2 text-sm text-orange-400\">\n                  <AlertCircle className=\"w-4 h-4\" />\n                  <span>Running low on generations</span>\n                </div>\n              )}\n            </div>\n          )}\n\n          {isPremium && (\n            <div className=\"flex items-center space-x-2 text-sm text-green-400\">\n              <CheckCircle className=\"w-4 h-4\" />\n              <span>Unlimited generations this month</span>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Plan Features */}\n      <Card className=\"glass-effect border-border\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Star className=\"w-5 h-5\" />\n            <span>Plan Features</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {features[user?.subscriptionType as keyof typeof features || \"free\"].map((feature, index) => (\n              <div key={index} className=\"flex items-center space-x-3\">\n                <CheckCircle className=\"w-4 h-4 text-green-400 flex-shrink-0\" />\n                <span className=\"text-sm\">{feature}</span>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Upgrade Section */}\n      {!isPremium && (\n        <Card className=\"glass-effect border-border border-primary/50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Crown className=\"w-6 h-6 text-yellow-400\" />\n              <span>Upgrade to Premium</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"text-center py-4\">\n              <div className=\"text-3xl font-bold mb-2\">$5<span className=\"text-lg font-normal text-muted-foreground\">/month</span></div>\n              <p className=\"text-muted-foreground\">Unlimited access to all AI models</p>\n            </div>\n\n            <div className=\"space-y-3\">\n              <h4 className=\"font-semibold text-sm\">Premium includes:</h4>\n              {features.premium.map((feature, index) => (\n                <div key={index} className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-4 h-4 text-green-400 flex-shrink-0\" />\n                  <span className=\"text-sm\">{feature}</span>\n                </div>\n              ))}\n            </div>\n\n            <Separator />\n\n            <Button\n              onClick={handleUpgrade}\n              disabled={subscriptionMutation.isPending || isUpgrading}\n              className=\"w-full btn-primary\"\n              size=\"lg\"\n            >\n              {subscriptionMutation.isPending ? (\n                \"Processing...\"\n              ) : (\n                <>\n                  <Crown className=\"w-5 h-5 mr-2\" />\n                  Upgrade Now\n                </>\n              )}\n            </Button>\n\n            <div className=\"text-center space-y-2\">\n              <div className=\"flex items-center justify-center space-x-4 text-xs text-muted-foreground\">\n                <span className=\"flex items-center space-x-1\">\n                  <Shield className=\"w-3 h-3\" />\n                  <span>Secure payment</span>\n                </span>\n                <span className=\"flex items-center space-x-1\">\n                  <Calendar className=\"w-3 h-3\" />\n                  <span>Cancel anytime</span>\n                </span>\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                30-day money-back guarantee\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Premium Benefits */}\n      {isPremium && (\n        <Card className=\"glass-effect border-border\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Gift className=\"w-5 h-5\" />\n              <span>Premium Benefits</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"text-center p-4 bg-slate-800/50 rounded-lg\">\n                <TrendingUp className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                <div className=\"text-2xl font-bold\">∞</div>\n                <div className=\"text-xs text-muted-foreground\">Generations</div>\n              </div>\n              \n              <div className=\"text-center p-4 bg-slate-800/50 rounded-lg\">\n                <Crown className=\"w-8 h-8 text-yellow-400 mx-auto mb-2\" />\n                <div className=\"text-2xl font-bold\">20+</div>\n                <div className=\"text-xs text-muted-foreground\">AI Models</div>\n              </div>\n            </div>\n\n            <div className=\"text-center\">\n              <p className=\"text-muted-foreground mb-4\">\n                You're getting the most out of LoveAIHub!\n              </p>\n              <Button variant=\"outline\" className=\"btn-secondary\">\n                <CreditCard className=\"w-4 h-4 mr-2\" />\n                Manage Billing\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Usage Statistics */}\n      <Card className=\"glass-effect border-border\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <TrendingUp className=\"w-5 h-5\" />\n            <span>Usage Stats</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-muted-foreground\">This Month</span>\n              <span className=\"font-semibold\">{user?.generationsUsed || 0} generations</span>\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-muted-foreground\">Account Created</span>\n              <span className=\"font-semibold\">\n                {user?.createdAt ? new Date(user.createdAt).toLocaleDateString() : \"Unknown\"}\n              </span>\n            </div>\n\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-muted-foreground\">Plan Status</span>\n              <Badge variant={isPremium ? \"default\" : \"outline\"}>\n                {isPremium ? \"Active\" : \"Free Tier\"}\n              </Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10833},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { User } from \"@shared/schema\";\nimport { authApi } from \"@/lib/supabase\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function useAuth() {\n  const { data: authData, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: () => authApi.getCurrentUser(),\n    retry: false,\n  });\n\n  const user = authData?.user;\n\n  return {\n    user: user || null,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n\nexport function useSignUp() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ email, password, firstName, lastName }: {\n      email: string;\n      password: string;\n      firstName?: string;\n      lastName?: string;\n    }) => authApi.signUp(email, password, firstName, lastName),\n    onSuccess: (data) => {\n      toast({\n        title: \"Success\",\n        description: data.message || \"Account created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Sign Up Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useSignIn() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ email, password }: { email: string; password: string }) =>\n      authApi.signIn(email, password),\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Signed in successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Sign In Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useSignOut() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: () => authApi.signOut(),\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Signed out successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.clear(); // Clear all cache on logout\n    },\n    onError: (error) => {\n      toast({\n        title: \"Sign Out Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useResetPassword() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: (email: string) => authApi.resetPassword(email),\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Password reset email sent\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Password Reset Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useGoogleSignIn() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async () => {\n      try {\n        const result = await authApi.signInWithGoogle();\n        return result;\n      } catch (error: any) {\n        console.error('Google Sign In Error:', error);\n        \n        // Show a more specific error message\n        let errorMessage = 'Google sign in failed';\n        if (error.message) {\n          errorMessage = error.message;\n        }\n        \n        toast({\n          title: \"Google Sign In Failed\",\n          description: errorMessage,\n          variant: \"destructive\",\n        });\n        \n        throw error;\n      }\n    },\n    onError: (error: any) => {\n      console.error('Google OAuth mutation error:', error);\n      // Error is already handled in mutationFn, so we don't need to show another toast\n    },\n  });\n}\n","size_bytes":3821},"client/src/lib/a4fClient.ts":{"content":"interface A4FImageRequest {\n  model: string;\n  prompt: string;\n  n?: number;\n  size?: string;\n  quality?: string;\n  style?: string;\n  response_format?: string;\n}\n\ninterface A4FVideoRequest {\n  model: string;\n  prompt: string;\n  duration?: number;\n  aspect_ratio?: string;\n}\n\ninterface A4FChatRequest {\n  model: string;\n  messages: Array<{ role: string; content: string }>;\n  temperature?: number;\n  max_tokens?: number;\n  stream?: boolean;\n}\n\ninterface A4FAudioRequest {\n  model: string;\n  input: string;\n  voice?: string;\n  response_format?: string;\n  speed?: number;\n}\n\ninterface A4FTranscriptionRequest {\n  model: string;\n  file: File;\n  language?: string;\n  response_format?: string;\n}\n\ninterface A4FEditRequest {\n  model: string;\n  image: File;\n  mask?: File;\n  prompt: string;\n}\n\nexport class A4FClient {\n  private apiKey: string;\n  private baseUrl: string = \"https://api.a4f.co/v1\";\n\n  constructor(apiKey?: string) {\n    this.apiKey = apiKey || process.env.A4F_API_KEY || \"ddc-a4f-cd950b4d41874c21acc4792bb0a392d7\";\n  }\n\n  private async makeRequest(endpoint: string, data: any, method: string = \"POST\") {\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      method,\n      headers: {\n        \"Authorization\": `Bearer ${this.apiKey}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`A4F API error: ${response.status} - ${errorText}`);\n    }\n\n    return await response.json();\n  }\n\n  private async makeFormRequest(endpoint: string, formData: FormData) {\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${this.apiKey}`,\n      },\n      body: formData,\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`A4F API error: ${response.status} - ${errorText}`);\n    }\n\n    return await response.json();\n  }\n\n  async enhancePrompt(prompt: string): Promise<string> {\n    try {\n      const response = await this.chatCompletion({\n        model: \"provider-3/gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a professional AI prompt engineer. Enhance the given prompt to be more detailed, specific, and optimized for image generation. Keep the core idea but add artistic details, style specifications, and technical parameters that will result in better AI-generated images.\"\n          },\n          {\n            role: \"user\",\n            content: `Enhance this prompt for image generation: \"${prompt}\"`\n          }\n        ],\n        temperature: 0.7,\n        max_tokens: 200\n      });\n\n      return response.choices[0].message.content;\n    } catch (error) {\n      console.error(\"Error enhancing prompt:\", error);\n      return prompt; // Return original prompt if enhancement fails\n    }\n  }\n\n  async generateImage(request: A4FImageRequest) {\n    return await this.makeRequest(\"/images/generations\", request);\n  }\n\n  async generateVideo(request: A4FVideoRequest) {\n    return await this.makeRequest(\"/video/generations\", request);\n  }\n\n  async chatCompletion(request: A4FChatRequest) {\n    return await this.makeRequest(\"/chat/completions\", request);\n  }\n\n  async generateAudio(request: A4FAudioRequest) {\n    return await this.makeRequest(\"/audio/speech\", request);\n  }\n\n  async transcribeAudio(request: A4FTranscriptionRequest) {\n    const formData = new FormData();\n    formData.append(\"model\", request.model);\n    formData.append(\"file\", request.file);\n    if (request.language) formData.append(\"language\", request.language);\n    if (request.response_format) formData.append(\"response_format\", request.response_format);\n\n    return await this.makeFormRequest(\"/audio/transcriptions\", formData);\n  }\n\n  async editImage(request: A4FEditRequest) {\n    const formData = new FormData();\n    formData.append(\"model\", request.model);\n    formData.append(\"image\", request.image);\n    if (request.mask) formData.append(\"mask\", request.mask);\n    formData.append(\"prompt\", request.prompt);\n\n    return await this.makeFormRequest(\"/images/edits\", formData);\n  }\n\n  async generateEmbeddings(input: string[], model: string) {\n    return await this.makeRequest(\"/embeddings\", {\n      model,\n      input,\n    });\n  }\n\n  async getModels() {\n    return await this.makeRequest(\"/models\", {}, \"GET\");\n  }\n\n  // Utility methods for common model configurations\n  static getImageModels() {\n    return [\n      { id: \"provider-6/gpt-image-1\", name: \"GPT Image 1\", provider: \"Provider 6\" },\n      { id: \"provider-2/dall-e-3\", name: \"DALL-E 3\", provider: \"Provider 2\" },\n      { id: \"provider-3/dall-e-3\", name: \"DALL-E 3\", provider: \"Provider 3\" },\n      { id: \"provider-4/imagen-3\", name: \"Imagen 3\", provider: \"Provider 4\" },\n      { id: \"provider-4/imagen-4\", name: \"Imagen 4\", provider: \"Provider 4\" },\n      { id: \"provider-6/FLUX-1-pro\", name: \"FLUX-1 Pro\", provider: \"Provider 6\" },\n      { id: \"provider-1/FLUX.1.1-pro\", name: \"FLUX 1.1 Pro\", provider: \"Provider 1\" },\n      { id: \"provider-2/FLUX.1.1-pro\", name: \"FLUX 1.1 Pro\", provider: \"Provider 2\" },\n    ];\n  }\n\n  static getChatModels() {\n    return [\n      { id: \"provider-6/gpt-4.1\", name: \"GPT-4.1\", provider: \"Provider 6\" },\n      { id: \"provider-2/gpt-4.1\", name: \"GPT-4.1\", provider: \"Provider 2\" },\n      { id: \"provider-3/gpt-4.1\", name: \"GPT-4.1\", provider: \"Provider 3\" },\n      { id: \"provider-6/claude-sonnet-4-20250514\", name: \"Claude Sonnet 4\", provider: \"Provider 6\" },\n      { id: \"provider-3/claude-sonnet-4\", name: \"Claude Sonnet 4\", provider: \"Provider 3\" },\n      { id: \"provider-6/gemini-2.5-pro-preview-05-06\", name: \"Gemini 2.5 Pro\", provider: \"Provider 6\" },\n    ];\n  }\n\n  static getVideoModels() {\n    return [\n      { id: \"provider-6/wan-2.1\", name: \"WAN-2.1\", provider: \"Provider 6\", description: \"High-quality video generation\" },\n    ];\n  }\n\n  static getAudioModels() {\n    return [\n      { id: \"provider-2/tts-1\", name: \"TTS-1\", provider: \"Provider 2\" },\n      { id: \"provider-2/tts-1-hd\", name: \"TTS-1 HD\", provider: \"Provider 2\" },\n      { id: \"provider-6/sonic-2\", name: \"Sonic-2\", provider: \"Provider 6\" },\n      { id: \"provider-6/sonic\", name: \"Sonic\", provider: \"Provider 6\" },\n    ];\n  }\n\n  static getTranscriptionModels() {\n    return [\n      { id: \"provider-2/whisper-1\", name: \"Whisper-1\", provider: \"Provider 2\" },\n      { id: \"provider-6/whisper-large-v3\", name: \"Whisper Large V3\", provider: \"Provider 6\" },\n      { id: \"provider-6/whisper-large-v3-turbo\", name: \"Whisper Large V3 Turbo\", provider: \"Provider 6\" },\n    ];\n  }\n\n  static getEditingModels() {\n    return [\n      { id: \"provider-3/flux-kontext-pro\", name: \"FLUX Kontext Pro\", provider: \"Provider 3\" },\n      { id: \"provider-6/black-forest-labs-flux-1-kontext-pro\", name: \"FLUX Kontext Pro\", provider: \"Provider 6\" },\n      { id: \"provider-6/black-forest-labs-flux-1-kontext-max\", name: \"FLUX Kontext Max\", provider: \"Provider 6\" },\n    ];\n  }\n}\n\nexport const a4fClient = new A4FClient();\n","size_bytes":7078},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/razorpayClient.ts":{"content":"interface RazorpayOptions {\n  key: string;\n  amount: number;\n  currency: string;\n  name: string;\n  description: string;\n  order_id?: string;\n  handler: (response: RazorpayResponse) => void;\n  prefill?: {\n    name?: string;\n    email?: string;\n    contact?: string;\n  };\n  notes?: Record<string, string>;\n  theme?: {\n    color?: string;\n  };\n  modal?: {\n    ondismiss?: () => void;\n  };\n}\n\ninterface RazorpayResponse {\n  razorpay_payment_id: string;\n  razorpay_order_id: string;\n  razorpay_signature: string;\n}\n\ndeclare global {\n  interface Window {\n    Razorpay: any;\n  }\n}\n\nexport class RazorpayClient {\n  private static instance: RazorpayClient;\n  private razorpayLoaded: boolean = false;\n\n  private constructor() {}\n\n  public static getInstance(): RazorpayClient {\n    if (!RazorpayClient.instance) {\n      RazorpayClient.instance = new RazorpayClient();\n    }\n    return RazorpayClient.instance;\n  }\n\n  private loadRazorpayScript(): Promise<boolean> {\n    return new Promise((resolve) => {\n      if (this.razorpayLoaded || window.Razorpay) {\n        resolve(true);\n        return;\n      }\n\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.onload = () => {\n        this.razorpayLoaded = true;\n        resolve(true);\n      };\n      script.onerror = () => {\n        resolve(false);\n      };\n      document.body.appendChild(script);\n    });\n  }\n\n  async initiatePayment(options: RazorpayOptions): Promise<void> {\n    const isLoaded = await this.loadRazorpayScript();\n    \n    if (!isLoaded) {\n      throw new Error('Failed to load Razorpay SDK');\n    }\n\n    const razorpayOptions = {\n      key: options.key || process.env.VITE_RAZORPAY_KEY_ID || 'rzp_live_2kYJDdAef2pyQP',\n      amount: options.amount,\n      currency: options.currency || 'USD',\n      name: options.name || 'LoveAIHub',\n      description: options.description,\n      order_id: options.order_id,\n      handler: options.handler,\n      prefill: options.prefill || {},\n      notes: options.notes || {},\n      theme: {\n        color: options.theme?.color || '#6366f1',\n      },\n      modal: {\n        ondismiss: options.modal?.ondismiss,\n      },\n    };\n\n    const rzp = new window.Razorpay(razorpayOptions);\n    rzp.open();\n  }\n\n  async createSubscription(planType: 'premium' | 'enterprise', userDetails: {\n    name: string;\n    email: string;\n    contact?: string;\n  }): Promise<void> {\n    const plans = {\n      premium: {\n        amount: 500, // $5 in cents\n        description: 'LoveAIHub Premium - Unlimited AI Access',\n      },\n      enterprise: {\n        amount: 5000, // $50 in cents  \n        description: 'LoveAIHub Enterprise - Custom Solutions',\n      },\n    };\n\n    const plan = plans[planType];\n\n    return this.initiatePayment({\n      key: process.env.VITE_RAZORPAY_KEY_ID || 'rzp_live_2kYJDdAef2pyQP',\n      amount: plan.amount,\n      currency: 'USD',\n      name: 'LoveAIHub',\n      description: plan.description,\n      prefill: {\n        name: userDetails.name,\n        email: userDetails.email,\n        contact: userDetails.contact,\n      },\n      notes: {\n        plan_type: planType,\n        service: 'LoveAIHub Subscription',\n      },\n      handler: (response: RazorpayResponse) => {\n        console.log('Payment successful:', response);\n        // Handle successful payment\n        this.handlePaymentSuccess(response, planType);\n      },\n      modal: {\n        ondismiss: () => {\n          console.log('Payment cancelled by user');\n        },\n      },\n    });\n  }\n\n  private async handlePaymentSuccess(response: RazorpayResponse, planType: string) {\n    try {\n      // Send payment details to backend for verification\n      const verificationResponse = await fetch('/api/verify-payment', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          razorpay_payment_id: response.razorpay_payment_id,\n          razorpay_order_id: response.razorpay_order_id,\n          razorpay_signature: response.razorpay_signature,\n          plan_type: planType,\n        }),\n      });\n\n      if (verificationResponse.ok) {\n        // Payment verified successfully\n        window.location.href = '/dashboard?payment=success';\n      } else {\n        // Payment verification failed\n        window.location.href = '/dashboard?payment=failed';\n      }\n    } catch (error) {\n      console.error('Payment verification error:', error);\n      window.location.href = '/dashboard?payment=error';\n    }\n  }\n\n  async createOrder(amount: number, currency: string = 'USD'): Promise<string> {\n    try {\n      const response = await fetch('/api/create-order', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          amount,\n          currency,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create order');\n      }\n\n      const data = await response.json();\n      return data.order_id;\n    } catch (error) {\n      console.error('Error creating order:', error);\n      throw error;\n    }\n  }\n\n  // Utility method for one-time payments\n  async makePayment(amount: number, description: string, userDetails: {\n    name: string;\n    email: string;\n    contact?: string;\n  }): Promise<void> {\n    const orderId = await this.createOrder(amount);\n\n    return this.initiatePayment({\n      key: process.env.VITE_RAZORPAY_KEY_ID || 'rzp_live_2kYJDdAef2pyQP',\n      amount: amount,\n      currency: 'USD',\n      name: 'LoveAIHub',\n      description: description,\n      order_id: orderId,\n      prefill: userDetails,\n      handler: (response: RazorpayResponse) => {\n        this.handlePaymentSuccess(response, 'one-time');\n      },\n    });\n  }\n}\n\nexport const razorpayClient = RazorpayClient.getInstance();\n\n// Helper function to format amount for Razorpay (convert dollars to cents)\nexport const formatAmountForRazorpay = (amountInDollars: number): number => {\n  return Math.round(amountInDollars * 100);\n};\n\n// Helper function to validate Razorpay environment\nexport const validateRazorpayConfig = (): boolean => {\n  const keyId = process.env.VITE_RAZORPAY_KEY_ID;\n  return Boolean(keyId);\n};\n\n// Export types for use in components\nexport type { RazorpayOptions, RazorpayResponse };\n","size_bytes":6313},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { \n  Shield, \n  Users, \n  BarChart3, \n  FileText, \n  Settings, \n  Crown,\n  Activity,\n  DollarSign,\n  TrendingUp,\n  Calendar,\n  Eye,\n  Edit,\n  Trash2,\n  Plus,\n  Save,\n  X\n} from \"lucide-react\";\n\nexport default function Admin() {\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [newPostTitle, setNewPostTitle] = useState(\"\");\n  const [newPostContent, setNewPostContent] = useState(\"\");\n  const [newPostExcerpt, setNewPostExcerpt] = useState(\"\");\n  const [newPostCategory, setNewPostCategory] = useState(\"\");\n  const [newPostTags, setNewPostTags] = useState(\"\");\n  const [newPostPublished, setNewPostPublished] = useState(false);\n  const [editingPost, setEditingPost] = useState<any>(null);\n\n  useEffect(() => {\n    if (!authLoading && (!isAuthenticated || !user?.isAdmin)) {\n      toast({\n        title: \"Access Denied\",\n        description: \"Admin access required. Redirecting...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, user, toast]);\n\n  // Fetch admin data\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/admin/stats\"],\n    enabled: isAuthenticated && user?.isAdmin,\n  });\n\n  const { data: users, isLoading: usersLoading } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    enabled: isAuthenticated && user?.isAdmin,\n  });\n\n  const { data: blogPosts, isLoading: postsLoading } = useQuery({\n    queryKey: [\"/api/blog\"],\n    enabled: isAuthenticated && user?.isAdmin,\n  });\n\n  // Create blog post mutation\n  const createPostMutation = useMutation({\n    mutationFn: async (postData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/blog\", postData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Post Created\",\n        description: \"Blog post has been created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/blog\"] });\n      resetForm();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create post.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setNewPostTitle(\"\");\n    setNewPostContent(\"\");\n    setNewPostExcerpt(\"\");\n    setNewPostCategory(\"\");\n    setNewPostTags(\"\");\n    setNewPostPublished(false);\n    setEditingPost(null);\n  };\n\n  const handleCreatePost = () => {\n    if (!newPostTitle.trim() || !newPostContent.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Title and content are required.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const slug = newPostTitle.toLowerCase()\n      .replace(/[^a-z0-9]+/g, '-')\n      .replace(/(^-|-$)/g, '');\n\n    createPostMutation.mutate({\n      title: newPostTitle,\n      slug,\n      content: newPostContent,\n      excerpt: newPostExcerpt,\n      category: newPostCategory,\n      tags: newPostTags.split(',').map(tag => tag.trim()).filter(Boolean),\n      published: newPostPublished,\n    });\n  };\n\n  if (authLoading || !isAuthenticated || !user?.isAdmin) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 flex items-center justify-center\">\n        <div className=\"loading-shimmer w-32 h-32 rounded-xl\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 text-white\">\n      <Navigation />\n      \n      <div className=\"pt-20 pb-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold mb-4 flex items-center space-x-3\">\n              <Shield className=\"w-10 h-10 text-primary\" />\n              <span className=\"gradient-text\">Admin Dashboard</span>\n            </h1>\n            <p className=\"text-muted-foreground text-lg\">\n              Manage users, content, analytics, and platform settings\n            </p>\n          </div>\n\n          {/* Stats Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <Card className=\"glass-effect border-border\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-primary/20 rounded-lg flex items-center justify-center\">\n                    <Users className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold\">{statsLoading ? \"...\" : stats?.totalUsers || 0}</div>\n                    <div className=\"text-sm text-muted-foreground\">Total Users</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass-effect border-border\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-cyan-500/20 rounded-lg flex items-center justify-center\">\n                    <Activity className=\"w-6 h-6 text-cyan-400\" />\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold\">{statsLoading ? \"...\" : stats?.totalGenerations || 0}</div>\n                    <div className=\"text-sm text-muted-foreground\">Generations</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass-effect border-border\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-emerald-500/20 rounded-lg flex items-center justify-center\">\n                    <Crown className=\"w-6 h-6 text-emerald-400\" />\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold\">{statsLoading ? \"...\" : stats?.activeSubscriptions || 0}</div>\n                    <div className=\"text-sm text-muted-foreground\">Premium Users</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass-effect border-border\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-purple-500/20 rounded-lg flex items-center justify-center\">\n                    <DollarSign className=\"w-6 h-6 text-purple-400\" />\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold\">$2,450</div>\n                    <div className=\"text-sm text-muted-foreground\">Monthly Revenue</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Admin Tabs */}\n          <Tabs defaultValue=\"users\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-4 bg-slate-800/50\">\n              <TabsTrigger value=\"users\" className=\"flex items-center space-x-2\">\n                <Users className=\"w-4 h-4\" />\n                <span>Users</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"analytics\" className=\"flex items-center space-x-2\">\n                <BarChart3 className=\"w-4 h-4\" />\n                <span>Analytics</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"blog\" className=\"flex items-center space-x-2\">\n                <FileText className=\"w-4 h-4\" />\n                <span>Blog</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"settings\" className=\"flex items-center space-x-2\">\n                <Settings className=\"w-4 h-4\" />\n                <span>Settings</span>\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Users Management */}\n            <TabsContent value=\"users\">\n              <Card className=\"glass-effect border-border\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Users className=\"w-6 h-6\" />\n                    <span>User Management</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {usersLoading ? (\n                    <div className=\"space-y-4\">\n                      {[...Array(5)].map((_, i) => (\n                        <div key={i} className=\"loading-shimmer h-16 rounded-lg\"></div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"overflow-x-auto\">\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>User</TableHead>\n                            <TableHead>Email</TableHead>\n                            <TableHead>Plan</TableHead>\n                            <TableHead>Generations</TableHead>\n                            <TableHead>Joined</TableHead>\n                            <TableHead>Actions</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {users?.map((user: any) => (\n                            <TableRow key={user.id}>\n                              <TableCell>\n                                <div className=\"flex items-center space-x-3\">\n                                  <div className=\"w-8 h-8 bg-gradient-to-r from-primary to-purple-500 rounded-full flex items-center justify-center\">\n                                    <span className=\"text-sm font-medium\">\n                                      {user.firstName?.charAt(0) || user.email?.charAt(0) || \"U\"}\n                                    </span>\n                                  </div>\n                                  <div>\n                                    <div className=\"font-medium\">\n                                      {user.firstName} {user.lastName}\n                                    </div>\n                                    {user.isAdmin && (\n                                      <Badge variant=\"secondary\" className=\"text-xs\">Admin</Badge>\n                                    )}\n                                  </div>\n                                </div>\n                              </TableCell>\n                              <TableCell>{user.email}</TableCell>\n                              <TableCell>\n                                <Badge variant={user.subscriptionType === \"premium\" ? \"default\" : \"outline\"}>\n                                  {user.subscriptionType === \"premium\" ? \"Premium\" : \"Free\"}\n                                </Badge>\n                              </TableCell>\n                              <TableCell>\n                                {user.generationsUsed} / {user.generationsLimit}\n                              </TableCell>\n                              <TableCell>\n                                {new Date(user.createdAt).toLocaleDateString()}\n                              </TableCell>\n                              <TableCell>\n                                <Button variant=\"ghost\" size=\"sm\">\n                                  <Edit className=\"w-4 h-4\" />\n                                </Button>\n                              </TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Analytics */}\n            <TabsContent value=\"analytics\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Card className=\"glass-effect border-border\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <TrendingUp className=\"w-6 h-6\" />\n                      <span>Usage Trends</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"p-4 bg-slate-800/50 rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm text-muted-foreground\">Image Generations</span>\n                          <span className=\"font-semibold\">65%</span>\n                        </div>\n                        <div className=\"w-full bg-slate-700 rounded-full h-2\">\n                          <div className=\"bg-primary h-2 rounded-full\" style={{ width: \"65%\" }}></div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"p-4 bg-slate-800/50 rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm text-muted-foreground\">Chat Completions</span>\n                          <span className=\"font-semibold\">25%</span>\n                        </div>\n                        <div className=\"w-full bg-slate-700 rounded-full h-2\">\n                          <div className=\"bg-cyan-500 h-2 rounded-full\" style={{ width: \"25%\" }}></div>\n                        </div>\n                      </div>\n\n                      <div className=\"p-4 bg-slate-800/50 rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm text-muted-foreground\">Video Generations</span>\n                          <span className=\"font-semibold\">10%</span>\n                        </div>\n                        <div className=\"w-full bg-slate-700 rounded-full h-2\">\n                          <div className=\"bg-purple-500 h-2 rounded-full\" style={{ width: \"10%\" }}></div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"glass-effect border-border\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Calendar className=\"w-6 h-6\" />\n                      <span>Recent Activity</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center space-x-3 p-3 bg-slate-800/50 rounded-lg\">\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                        <div>\n                          <p className=\"text-sm font-medium\">New user registration</p>\n                          <p className=\"text-xs text-muted-foreground\">2 minutes ago</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-3 p-3 bg-slate-800/50 rounded-lg\">\n                        <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                        <div>\n                          <p className=\"text-sm font-medium\">Premium subscription activated</p>\n                          <p className=\"text-xs text-muted-foreground\">15 minutes ago</p>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center space-x-3 p-3 bg-slate-800/50 rounded-lg\">\n                        <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n                        <div>\n                          <p className=\"text-sm font-medium\">High API usage detected</p>\n                          <p className=\"text-xs text-muted-foreground\">1 hour ago</p>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Blog Management */}\n            <TabsContent value=\"blog\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Create New Post */}\n                <Card className=\"glass-effect border-border\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Plus className=\"w-6 h-6\" />\n                      <span>{editingPost ? \"Edit Post\" : \"Create New Post\"}</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"title\">Title</Label>\n                      <Input\n                        id=\"title\"\n                        value={newPostTitle}\n                        onChange={(e) => setNewPostTitle(e.target.value)}\n                        placeholder=\"Enter post title\"\n                        className=\"bg-slate-800/50 border-slate-700\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"excerpt\">Excerpt</Label>\n                      <Textarea\n                        id=\"excerpt\"\n                        value={newPostExcerpt}\n                        onChange={(e) => setNewPostExcerpt(e.target.value)}\n                        placeholder=\"Brief description of the post\"\n                        className=\"bg-slate-800/50 border-slate-700\"\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"category\">Category</Label>\n                        <Input\n                          id=\"category\"\n                          value={newPostCategory}\n                          onChange={(e) => setNewPostCategory(e.target.value)}\n                          placeholder=\"AI Tutorial\"\n                          className=\"bg-slate-800/50 border-slate-700\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"tags\">Tags (comma-separated)</Label>\n                        <Input\n                          id=\"tags\"\n                          value={newPostTags}\n                          onChange={(e) => setNewPostTags(e.target.value)}\n                          placeholder=\"AI, Tutorial, Tips\"\n                          className=\"bg-slate-800/50 border-slate-700\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"content\">Content</Label>\n                      <Textarea\n                        id=\"content\"\n                        value={newPostContent}\n                        onChange={(e) => setNewPostContent(e.target.value)}\n                        placeholder=\"Write your post content here...\"\n                        className=\"min-h-[200px] bg-slate-800/50 border-slate-700\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"published\"\n                        checked={newPostPublished}\n                        onCheckedChange={setNewPostPublished}\n                      />\n                      <Label htmlFor=\"published\">Publish immediately</Label>\n                    </div>\n\n                    <Separator />\n\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        onClick={handleCreatePost}\n                        disabled={createPostMutation.isPending}\n                        className=\"btn-primary flex-1\"\n                      >\n                        <Save className=\"w-4 h-4 mr-2\" />\n                        {editingPost ? \"Update Post\" : \"Create Post\"}\n                      </Button>\n                      {editingPost && (\n                        <Button\n                          onClick={resetForm}\n                          variant=\"outline\"\n                          className=\"btn-secondary\"\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Existing Posts */}\n                <Card className=\"glass-effect border-border\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <FileText className=\"w-6 h-6\" />\n                      <span>Existing Posts</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {postsLoading ? (\n                      <div className=\"space-y-4\">\n                        {[...Array(3)].map((_, i) => (\n                          <div key={i} className=\"loading-shimmer h-20 rounded-lg\"></div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4 max-h-[500px] overflow-y-auto\">\n                        {blogPosts?.map((post: any) => (\n                          <div key={post.id} className=\"p-4 glass-effect rounded-lg\">\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex-1\">\n                                <h4 className=\"font-medium mb-2\">{post.title}</h4>\n                                <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                                  <div className=\"flex items-center space-x-1\">\n                                    <Eye className=\"w-3 h-3\" />\n                                    <span>{post.viewCount || 0}</span>\n                                  </div>\n                                  <Badge variant={post.published ? \"secondary\" : \"outline\"} className=\"text-xs\">\n                                    {post.published ? \"Published\" : \"Draft\"}\n                                  </Badge>\n                                </div>\n                              </div>\n                              <div className=\"flex items-center space-x-2\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={() => setEditingPost(post)}\n                                >\n                                  <Edit className=\"w-3 h-3\" />\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  className=\"text-red-400 hover:text-red-300\"\n                                >\n                                  <Trash2 className=\"w-3 h-3\" />\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Settings */}\n            <TabsContent value=\"settings\">\n              <Card className=\"glass-effect border-border\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Settings className=\"w-6 h-6\" />\n                    <span>Platform Settings</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold mb-4\">API Configuration</h3>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between p-4 bg-slate-800/50 rounded-lg\">\n                        <div>\n                          <h4 className=\"font-medium\">Rate Limiting</h4>\n                          <p className=\"text-sm text-muted-foreground\">Control API request limits</p>\n                        </div>\n                        <Switch defaultChecked />\n                      </div>\n\n                      <div className=\"flex items-center justify-between p-4 bg-slate-800/50 rounded-lg\">\n                        <div>\n                          <h4 className=\"font-medium\">Auto Scaling</h4>\n                          <p className=\"text-sm text-muted-foreground\">Automatically scale resources</p>\n                        </div>\n                        <Switch defaultChecked />\n                      </div>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div>\n                    <h3 className=\"text-lg font-semibold mb-4\">User Management</h3>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between p-4 bg-slate-800/50 rounded-lg\">\n                        <div>\n                          <h4 className=\"font-medium\">User Registration</h4>\n                          <p className=\"text-sm text-muted-foreground\">Allow new user sign-ups</p>\n                        </div>\n                        <Switch defaultChecked />\n                      </div>\n\n                      <div className=\"flex items-center justify-between p-4 bg-slate-800/50 rounded-lg\">\n                        <div>\n                          <h4 className=\"font-medium\">Email Verification</h4>\n                          <p className=\"text-sm text-muted-foreground\">Require email verification</p>\n                        </div>\n                        <Switch />\n                      </div>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div>\n                    <h3 className=\"text-lg font-semibold mb-4\">Platform Maintenance</h3>\n                    <div className=\"space-y-4\">\n                      <Button variant=\"outline\" className=\"w-full\">\n                        Clear System Cache\n                      </Button>\n                      <Button variant=\"outline\" className=\"w-full\">\n                        Export User Data\n                      </Button>\n                      <Button variant=\"destructive\" className=\"w-full\">\n                        Maintenance Mode\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":28132},"client/src/pages/ai-chat.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { \n  MessageSquare, \n  Send, \n  Bot, \n  User, \n  Loader2,\n  Copy,\n  Trash2,\n  Settings,\n  Search,\n  Brain,\n  Sparkles\n} from \"lucide-react\";\n\nconst chatModels = [\n  { id: \"provider-6/gpt-4.1-mini\", name: \"GPT-4.1 Mini\", provider: \"Provider 6\" },\n  { id: \"provider-3/gpt-4.1-mini\", name: \"GPT-4.1 Mini\", provider: \"Provider 3\" },\n  { id: \"provider-6/gpt-4.1-nano\", name: \"GPT-4.1 Nano\", provider: \"Provider 6\" },\n  { id: \"provider-6/gpt-4o-search-preview\", name: \"GPT-4o Search Preview\", provider: \"Provider 6\" },\n  { id: \"provider-3/gpt-4o-search-preview\", name: \"GPT-4o Search Preview\", provider: \"Provider 3\" },\n  { id: \"provider-6/gpt-4.1\", name: \"GPT-4.1\", provider: \"Provider 6\" },\n  { id: \"provider-2/gpt-4.1\", name: \"GPT-4.1\", provider: \"Provider 2\" },\n  { id: \"provider-3/gpt-4.1\", name: \"GPT-4.1\", provider: \"Provider 3\" },\n  { id: \"provider-6/claude-sonnet-4-20250514\", name: \"Claude Sonnet 4\", provider: \"Provider 6\" },\n  { id: \"provider-3/claude-sonnet-4\", name: \"Claude Sonnet 4\", provider: \"Provider 3\" },\n  { id: \"provider-6/gemini-2.5-pro-preview-05-06\", name: \"Gemini 2.5 Pro\", provider: \"Provider 6\" },\n  { id: \"provider-1/gemini-2.5-pro\", name: \"Gemini 2.5 Pro\", provider: \"Provider 1\" },\n  { id: \"provider-2/deepseek-r1-0528\", name: \"DeepSeek R1\", provider: \"Provider 2\" },\n  { id: \"provider-3/deepseek-r1-0528\", name: \"DeepSeek R1\", provider: \"Provider 3\" },\n];\n\ninterface Message {\n  id: string;\n  role: \"user\" | \"assistant\";\n  content: string;\n  timestamp: Date;\n  model?: string;\n}\n\nexport default function AiChat() {\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const { toast } = useToast();\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  \n  const [messages, setMessages] = useState<Message[]>([]);\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [selectedModel, setSelectedModel] = useState(chatModels[0].id);\n  const [temperature, setTemperature] = useState(0.7);\n  const [maxTokens, setMaxTokens] = useState(2000);\n  const [showSettings, setShowSettings] = useState(false);\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const chatMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/chat/completions\", data);\n      return await response.json();\n    },\n    onSuccess: (data, variables) => {\n      const assistantMessage: Message = {\n        id: Date.now().toString() + \"-assistant\",\n        role: \"assistant\",\n        content: data.choices[0].message.content,\n        timestamp: new Date(),\n        model: variables.model,\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Chat Error\",\n        description: error.message || \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (scrollAreaRef.current) {\n      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (!currentMessage.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString() + \"-user\",\n      role: \"user\",\n      content: currentMessage,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n\n    const chatMessages = [...messages, userMessage].map(msg => ({\n      role: msg.role,\n      content: msg.content,\n    }));\n\n    chatMutation.mutate({\n      model: selectedModel,\n      messages: chatMessages,\n      temperature,\n      max_tokens: maxTokens,\n    });\n\n    setCurrentMessage(\"\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const copyMessage = (content: string) => {\n    navigator.clipboard.writeText(content);\n    toast({\n      title: \"Copied\",\n      description: \"Message copied to clipboard.\",\n    });\n  };\n\n  const clearMessages = () => {\n    setMessages([]);\n    toast({\n      title: \"Chat Cleared\",\n      description: \"All messages have been cleared.\",\n    });\n  };\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 flex items-center justify-center\">\n        <div className=\"loading-shimmer w-32 h-32 rounded-xl\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 text-white\">\n      <Navigation />\n      \n      <div className=\"pt-20 pb-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold mb-4\">\n              <span className=\"gradient-text\">Advanced AI Chat</span>\n            </h1>\n            <p className=\"text-muted-foreground text-lg\">\n              Chat with the most advanced AI models with web search and analysis capabilities\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n            {/* Settings Sidebar */}\n            <div className=\"lg:col-span-1\">\n              <Card className=\"glass-effect border-border\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Settings className=\"w-5 h-5\" />\n                    <span>Settings</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Model Selection */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"model\">AI Model</Label>\n                    <Select value={selectedModel} onValueChange={setSelectedModel}>\n                      <SelectTrigger className=\"bg-slate-800/50 border-slate-700\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {chatModels.map((model) => (\n                          <SelectItem key={model.id} value={model.id}>\n                            <div className=\"flex flex-col\">\n                              <span>{model.name}</span>\n                              <span className=\"text-xs text-muted-foreground\">{model.provider}</span>\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Temperature */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"temperature\">Temperature: {temperature}</Label>\n                    <Input\n                      id=\"temperature\"\n                      type=\"range\"\n                      min=\"0\"\n                      max=\"2\"\n                      step=\"0.1\"\n                      value={temperature}\n                      onChange={(e) => setTemperature(parseFloat(e.target.value))}\n                      className=\"bg-slate-800/50 border-slate-700\"\n                    />\n                    <p className=\"text-xs text-muted-foreground\">\n                      Higher values make output more random\n                    </p>\n                  </div>\n\n                  {/* Max Tokens */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"maxTokens\">Max Tokens</Label>\n                    <Input\n                      id=\"maxTokens\"\n                      type=\"number\"\n                      min=\"100\"\n                      max=\"4000\"\n                      value={maxTokens}\n                      onChange={(e) => setMaxTokens(parseInt(e.target.value) || 2000)}\n                      className=\"bg-slate-800/50 border-slate-700\"\n                    />\n                  </div>\n\n                  <Separator />\n\n                  {/* Model Features */}\n                  <div className=\"space-y-2\">\n                    <Label>Model Features</Label>\n                    <div className=\"space-y-1\">\n                      {selectedModel.includes(\"search\") && (\n                        <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n                          <Search className=\"w-3 h-3\" />\n                          <span>Web Search</span>\n                        </Badge>\n                      )}\n                      <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n                        <Brain className=\"w-3 h-3\" />\n                        <span>Advanced Reasoning</span>\n                      </Badge>\n                      <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n                        <Sparkles className=\"w-3 h-3\" />\n                        <span>Creative Writing</span>\n                      </Badge>\n                    </div>\n                  </div>\n\n                  <Button\n                    onClick={clearMessages}\n                    variant=\"outline\"\n                    className=\"w-full\"\n                  >\n                    <Trash2 className=\"w-4 h-4 mr-2\" />\n                    Clear Chat\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Chat Interface */}\n            <div className=\"lg:col-span-3\">\n              <Card className=\"glass-effect border-border h-[600px] flex flex-col\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <MessageSquare className=\"w-5 h-5\" />\n                    <span>Chat with AI</span>\n                    <Badge variant=\"outline\" className=\"ml-auto\">\n                      {selectedModel.split('/')[1] || selectedModel}\n                    </Badge>\n                  </CardTitle>\n                </CardHeader>\n                \n                {/* Messages */}\n                <CardContent className=\"flex-1 flex flex-col\">\n                  <ScrollArea className=\"flex-1 pr-4\" ref={scrollAreaRef}>\n                    {messages.length === 0 ? (\n                      <div className=\"text-center py-12\">\n                        <MessageSquare className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-muted-foreground mb-2\">Start a conversation</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Ask me anything! I can help with research, analysis, creative writing, and more.\n                        </p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {messages.map((message) => (\n                          <div\n                            key={message.id}\n                            className={`flex items-start space-x-3 ${\n                              message.role === \"user\" ? \"justify-end\" : \"\"\n                            }`}\n                          >\n                            {message.role === \"assistant\" && (\n                              <div className=\"w-8 h-8 bg-gradient-to-r from-primary to-purple-500 rounded-full flex items-center justify-center\">\n                                <Bot className=\"w-4 h-4\" />\n                              </div>\n                            )}\n                            \n                            <div\n                              className={`max-w-[80%] rounded-lg p-4 ${\n                                message.role === \"user\"\n                                  ? \"bg-primary text-primary-foreground\"\n                                  : \"glass-effect\"\n                              }`}\n                            >\n                              <div className=\"whitespace-pre-wrap\">{message.content}</div>\n                              <div className=\"flex items-center justify-between mt-2\">\n                                <span className=\"text-xs opacity-70\">\n                                  {message.timestamp.toLocaleTimeString()}\n                                </span>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={() => copyMessage(message.content)}\n                                  className=\"h-6 px-2 opacity-70 hover:opacity-100\"\n                                >\n                                  <Copy className=\"w-3 h-3\" />\n                                </Button>\n                              </div>\n                            </div>\n\n                            {message.role === \"user\" && (\n                              <div className=\"w-8 h-8 bg-slate-700 rounded-full flex items-center justify-center\">\n                                <User className=\"w-4 h-4\" />\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                        \n                        {chatMutation.isPending && (\n                          <div className=\"flex items-start space-x-3\">\n                            <div className=\"w-8 h-8 bg-gradient-to-r from-primary to-purple-500 rounded-full flex items-center justify-center\">\n                              <Bot className=\"w-4 h-4\" />\n                            </div>\n                            <div className=\"glass-effect rounded-lg p-4\">\n                              <div className=\"flex items-center space-x-2\">\n                                <Loader2 className=\"w-4 h-4 animate-spin\" />\n                                <span>AI is thinking...</span>\n                              </div>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </ScrollArea>\n\n                  {/* Message Input */}\n                  <div className=\"mt-4 flex items-end space-x-2\">\n                    <Textarea\n                      placeholder=\"Type your message... (Shift+Enter for new line)\"\n                      value={currentMessage}\n                      onChange={(e) => setCurrentMessage(e.target.value)}\n                      onKeyPress={handleKeyPress}\n                      disabled={chatMutation.isPending}\n                      className=\"flex-1 min-h-[60px] max-h-[120px] bg-slate-800/50 border-slate-700 resize-none\"\n                    />\n                    <Button\n                      onClick={handleSendMessage}\n                      disabled={chatMutation.isPending || !currentMessage.trim()}\n                      className=\"btn-primary\"\n                      size=\"lg\"\n                    >\n                      {chatMutation.isPending ? (\n                        <Loader2 className=\"w-5 h-5 animate-spin\" />\n                      ) : (\n                        <Send className=\"w-5 h-5\" />\n                      )}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":16547},"client/src/pages/api-docs.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { \n  Code, \n  Copy, \n  Play, \n  Book, \n  Image, \n  Video, \n  MessageSquare, \n  Mic, \n  Edit,\n  Key,\n  Globe,\n  Zap,\n  Shield\n} from \"lucide-react\";\n\nconst codeExamples = {\n  javascript: `import { A4FClient } from '@/lib/a4fClient';\n\nconst client = new A4FClient('your-api-key');\n\n// Generate an image\nconst imageResult = await client.generateImage({\n  model: 'provider-6/FLUX-1-pro',\n  prompt: 'A beautiful sunset over mountains',\n  size: '1024x1024',\n  quality: 'hd'\n});\n\n// Chat completion\nconst chatResult = await client.chatCompletion({\n  model: 'provider-6/gpt-4.1',\n  messages: [\n    { role: 'user', content: 'Hello, how are you?' }\n  ]\n});`,\n\n  python: `import requests\n\n# Image Generation\nresponse = requests.post(\n    'https://api.a4f.co/v1/images/generations',\n    headers={\n        'Authorization': 'Bearer your-api-key',\n        'Content-Type': 'application/json'\n    },\n    json={\n        'model': 'provider-6/FLUX-1-pro',\n        'prompt': 'A beautiful sunset over mountains',\n        'size': '1024x1024',\n        'quality': 'hd'\n    }\n)\n\nresult = response.json()`,\n\n  curl: `curl -X POST https://api.a4f.co/v1/images/generations \\\\\n  -H \"Authorization: Bearer your-api-key\" \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -d '{\n    \"model\": \"provider-6/FLUX-1-pro\",\n    \"prompt\": \"A beautiful sunset over mountains\",\n    \"size\": \"1024x1024\",\n    \"quality\": \"hd\"\n  }'`\n};\n\nconst apiEndpoints = [\n  {\n    method: \"POST\",\n    endpoint: \"/v1/images/generations\",\n    description: \"Generate images from text prompts\",\n    category: \"Image Generation\",\n    icon: Image,\n    models: [\"FLUX-1-Pro\", \"DALL-E 3\", \"Imagen 4\", \"Stable Diffusion\"]\n  },\n  {\n    method: \"POST\",\n    endpoint: \"/v1/video/generations\",\n    description: \"Generate videos from text descriptions\",\n    category: \"Video Generation\",\n    icon: Video,\n    models: [\"WAN-2.1\"]\n  },\n  {\n    method: \"POST\",\n    endpoint: \"/v1/chat/completions\",\n    description: \"AI chat completions with advanced models\",\n    category: \"Chat Completion\",\n    icon: MessageSquare,\n    models: [\"GPT-4.1\", \"Claude 4\", \"Gemini 2.5 Pro\"]\n  },\n  {\n    method: \"POST\",\n    endpoint: \"/v1/audio/speech\",\n    description: \"Generate speech from text\",\n    category: \"Audio Generation\",\n    icon: Mic,\n    models: [\"TTS-1-HD\", \"Sonic-2\", \"Gemini TTS\"]\n  },\n  {\n    method: \"POST\",\n    endpoint: \"/v1/audio/transcriptions\",\n    description: \"Transcribe audio to text\",\n    category: \"Audio Transcription\",\n    icon: Mic,\n    models: [\"Whisper V3\", \"GPT-4o Transcribe\"]\n  },\n  {\n    method: \"POST\",\n    endpoint: \"/v1/images/edits\",\n    description: \"Edit images with AI\",\n    category: \"Image Editing\",\n    icon: Edit,\n    models: [\"FLUX Kontext Pro\", \"FLUX Kontext Max\"]\n  }\n];\n\nconst features = [\n  {\n    icon: Zap,\n    title: \"20+ AI Models\",\n    description: \"Access the latest AI models from multiple providers through one unified API\"\n  },\n  {\n    icon: Shield,\n    title: \"Secure & Reliable\",\n    description: \"Enterprise-grade security with 99.9% uptime guarantee\"\n  },\n  {\n    icon: Globe,\n    title: \"Global CDN\",\n    description: \"Fast response times worldwide with our global infrastructure\"\n  },\n  {\n    icon: Code,\n    title: \"Developer Friendly\",\n    description: \"Comprehensive SDKs and detailed documentation for quick integration\"\n  }\n];\n\nexport default function ApiDocs() {\n  const [selectedEndpoint, setSelectedEndpoint] = useState(apiEndpoints[0]);\n  const [selectedLanguage, setSelectedLanguage] = useState(\"javascript\");\n  const [apiKey, setApiKey] = useState(\"\");\n  const [testPrompt, setTestPrompt] = useState(\"A beautiful sunset over mountains\");\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 text-white\">\n      <Navigation />\n      \n      <div className=\"pt-20 pb-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl font-bold mb-4\">\n              <span className=\"gradient-text\">API Documentation</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Comprehensive documentation for integrating LoveAIHub's powerful AI APIs into your applications\n            </p>\n          </div>\n\n          {/* Features Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"glass-effect border-border card-hover\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-purple-500 rounded-lg mb-4 flex items-center justify-center mx-auto\">\n                    <feature.icon className=\"w-6 h-6\" />\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">{feature.title}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n            {/* Sidebar - API Endpoints */}\n            <div className=\"lg:col-span-1\">\n              <Card className=\"glass-effect border-border\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Book className=\"w-5 h-5\" />\n                    <span>API Endpoints</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {apiEndpoints.map((endpoint, index) => (\n                      <button\n                        key={index}\n                        onClick={() => setSelectedEndpoint(endpoint)}\n                        className={`w-full text-left p-3 rounded-lg transition-all ${\n                          selectedEndpoint.endpoint === endpoint.endpoint\n                            ? \"bg-primary/20 border border-primary/50\"\n                            : \"hover:bg-slate-800/50\"\n                        }`}\n                      >\n                        <div className=\"flex items-center space-x-3\">\n                          <endpoint.icon className=\"w-4 h-4\" />\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"text-sm font-medium truncate\">\n                              {endpoint.category}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {endpoint.method} {endpoint.endpoint}\n                            </div>\n                          </div>\n                        </div>\n                      </button>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Main Content */}\n            <div className=\"lg:col-span-3\">\n              <Card className=\"glass-effect border-border\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <selectedEndpoint.icon className=\"w-6 h-6\" />\n                      <span>{selectedEndpoint.category}</span>\n                    </CardTitle>\n                    <Badge variant=\"outline\" className=\"font-mono\">\n                      {selectedEndpoint.method}\n                    </Badge>\n                  </div>\n                  <p className=\"text-muted-foreground\">{selectedEndpoint.description}</p>\n                </CardHeader>\n                <CardContent>\n                  <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n                    <TabsList className=\"grid w-full grid-cols-4 bg-slate-800/50\">\n                      <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                      <TabsTrigger value=\"examples\">Examples</TabsTrigger>\n                      <TabsTrigger value=\"models\">Models</TabsTrigger>\n                      <TabsTrigger value=\"playground\">Playground</TabsTrigger>\n                    </TabsList>\n\n                    {/* Overview */}\n                    <TabsContent value=\"overview\" className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-lg font-semibold mb-4\">Endpoint Information</h3>\n                        <div className=\"space-y-4\">\n                          <div className=\"p-4 bg-slate-800/50 rounded-lg\">\n                            <div className=\"font-mono text-sm\">\n                              <span className=\"text-green-400\">{selectedEndpoint.method}</span>{\" \"}\n                              <span className=\"text-blue-400\">https://api.a4f.co{selectedEndpoint.endpoint}</span>\n                            </div>\n                          </div>\n\n                          <div>\n                            <h4 className=\"font-medium mb-2\">Authentication</h4>\n                            <p className=\"text-sm text-muted-foreground mb-2\">\n                              All API requests require authentication using your API key in the Authorization header:\n                            </p>\n                            <div className=\"p-3 bg-slate-800/50 rounded-lg font-mono text-sm\">\n                              Authorization: Bearer your-api-key\n                            </div>\n                          </div>\n\n                          <div>\n                            <h4 className=\"font-medium mb-2\">Rate Limits</h4>\n                            <div className=\"text-sm text-muted-foreground space-y-1\">\n                              <div>• Free tier: 50 requests per month</div>\n                              <div>• Premium tier: Unlimited requests</div>\n                              <div>• Rate limit: 60 requests per minute</div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </TabsContent>\n\n                    {/* Examples */}\n                    <TabsContent value=\"examples\" className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-lg font-semibold mb-4\">Code Examples</h3>\n                        \n                        <Tabs value={selectedLanguage} onValueChange={setSelectedLanguage}>\n                          <TabsList className=\"mb-4\">\n                            <TabsTrigger value=\"javascript\">JavaScript</TabsTrigger>\n                            <TabsTrigger value=\"python\">Python</TabsTrigger>\n                            <TabsTrigger value=\"curl\">cURL</TabsTrigger>\n                          </TabsList>\n\n                          {Object.entries(codeExamples).map(([lang, code]) => (\n                            <TabsContent key={lang} value={lang}>\n                              <div className=\"relative\">\n                                <pre className=\"p-4 bg-slate-800/50 rounded-lg overflow-x-auto text-sm\">\n                                  <code>{code}</code>\n                                </pre>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={() => copyToClipboard(code)}\n                                  className=\"absolute top-2 right-2\"\n                                >\n                                  <Copy className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                            </TabsContent>\n                          ))}\n                        </Tabs>\n                      </div>\n                    </TabsContent>\n\n                    {/* Models */}\n                    <TabsContent value=\"models\" className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-lg font-semibold mb-4\">Available Models</h3>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          {selectedEndpoint.models.map((model, index) => (\n                            <div key={index} className=\"p-4 glass-effect rounded-lg\">\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <h4 className=\"font-medium\">{model}</h4>\n                                <Badge variant=\"secondary\" className=\"text-xs\">Available</Badge>\n                              </div>\n                              <p className=\"text-sm text-muted-foreground\">\n                                High-quality AI model with advanced capabilities for professional use cases.\n                              </p>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </TabsContent>\n\n                    {/* Playground */}\n                    <TabsContent value=\"playground\" className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-lg font-semibold mb-4\">API Playground</h3>\n                        <div className=\"space-y-4\">\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"apiKey\">API Key</Label>\n                            <Input\n                              id=\"apiKey\"\n                              type=\"password\"\n                              placeholder=\"Enter your API key\"\n                              value={apiKey}\n                              onChange={(e) => setApiKey(e.target.value)}\n                              className=\"bg-slate-800/50 border-slate-700\"\n                            />\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"prompt\">Test Prompt</Label>\n                            <Textarea\n                              id=\"prompt\"\n                              placeholder=\"Enter a test prompt\"\n                              value={testPrompt}\n                              onChange={(e) => setTestPrompt(e.target.value)}\n                              className=\"bg-slate-800/50 border-slate-700\"\n                            />\n                          </div>\n\n                          <Button\n                            disabled={!apiKey || !testPrompt}\n                            className=\"btn-primary\"\n                          >\n                            <Play className=\"w-4 h-4 mr-2\" />\n                            Test API Call\n                          </Button>\n\n                          <div className=\"p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg\">\n                            <div className=\"flex items-start space-x-3\">\n                              <Key className=\"w-5 h-5 text-blue-400 mt-0.5\" />\n                              <div>\n                                <p className=\"text-sm font-medium text-blue-400\">Get Your API Key</p>\n                                <p className=\"text-xs text-blue-300\">\n                                  Sign up for a free account to get your API key and start building with our AI models.\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </TabsContent>\n                  </Tabs>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* SDKs Section */}\n          <div className=\"mt-12\">\n            <Card className=\"glass-effect border-border\">\n              <CardHeader>\n                <CardTitle>Official SDKs</CardTitle>\n                <p className=\"text-muted-foreground\">\n                  Get started quickly with our official software development kits\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"p-6 glass-effect rounded-lg\">\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <div className=\"w-10 h-10 bg-yellow-500/20 rounded-lg flex items-center justify-center\">\n                        <Code className=\"w-5 h-5 text-yellow-400\" />\n                      </div>\n                      <h3 className=\"font-semibold\">JavaScript/TypeScript</h3>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Official SDK for Node.js and browser environments\n                    </p>\n                    <div className=\"space-y-2\">\n                      <div className=\"p-2 bg-slate-800/50 rounded font-mono text-sm\">\n                        npm install @loveaihub/sdk\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                        View Documentation\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"p-6 glass-effect rounded-lg\">\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <div className=\"w-10 h-10 bg-blue-500/20 rounded-lg flex items-center justify-center\">\n                        <Code className=\"w-5 h-5 text-blue-400\" />\n                      </div>\n                      <h3 className=\"font-semibold\">Python</h3>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Full-featured Python SDK with async support\n                    </p>\n                    <div className=\"space-y-2\">\n                      <div className=\"p-2 bg-slate-800/50 rounded font-mono text-sm\">\n                        pip install loveaihub\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                        View Documentation\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"p-6 glass-effect rounded-lg\">\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <div className=\"w-10 h-10 bg-green-500/20 rounded-lg flex items-center justify-center\">\n                        <Code className=\"w-5 h-5 text-green-400\" />\n                      </div>\n                      <h3 className=\"font-semibold\">Go</h3>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Lightweight Go SDK for high-performance applications\n                    </p>\n                    <div className=\"space-y-2\">\n                      <div className=\"p-2 bg-slate-800/50 rounded font-mono text-sm\">\n                        go get github.com/loveaihub/go-sdk\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                        View Documentation\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":19957},"client/src/pages/audio-speech.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { \n  Mic, \n  Volume2, \n  Upload, \n  Download, \n  Play, \n  Pause,\n  Loader2,\n  FileAudio,\n  Settings,\n  Copy\n} from \"lucide-react\";\n\nconst ttsModels = [\n  { id: \"provider-2/tts-1\", name: \"TTS-1\", provider: \"Provider 2\", description: \"Standard quality\" },\n  { id: \"provider-2/tts-1-hd\", name: \"TTS-1 HD\", provider: \"Provider 2\", description: \"High definition\" },\n  { id: \"provider-3/gemini-2.5-flash-preview-tts\", name: \"Gemini TTS\", provider: \"Provider 3\", description: \"Natural voice\" },\n  { id: \"provider-2/gpt-4o-mini-tts\", name: \"GPT-4o Mini TTS\", provider: \"Provider 2\", description: \"Fast generation\" },\n  { id: \"provider-6/sonic-2\", name: \"Sonic-2\", provider: \"Provider 6\", description: \"Premium quality\" },\n  { id: \"provider-6/sonic\", name: \"Sonic\", provider: \"Provider 6\", description: \"Standard Sonic\" },\n];\n\nconst transcriptionModels = [\n  { id: \"provider-2/whisper-1\", name: \"Whisper-1\", provider: \"Provider 2\", description: \"Standard transcription\" },\n  { id: \"provider-6/distil-whisper-large-v3-en\", name: \"Distil Whisper Large V3\", provider: \"Provider 6\", description: \"English optimized\" },\n  { id: \"provider-2/gpt-4o-transcribe\", name: \"GPT-4o Transcribe\", provider: \"Provider 2\", description: \"Advanced transcription\" },\n  { id: \"provider-2/gpt-4o-mini-transcribe\", name: \"GPT-4o Mini Transcribe\", provider: \"Provider 2\", description: \"Fast transcription\" },\n  { id: \"provider-6/whisper-large-v3\", name: \"Whisper Large V3\", provider: \"Provider 6\", description: \"High accuracy\" },\n  { id: \"provider-6/whisper-large-v3-turbo\", name: \"Whisper Large V3 Turbo\", provider: \"Provider 6\", description: \"Fast & accurate\" },\n];\n\nconst voices = [\n  { id: \"alloy\", name: \"Alloy\", description: \"Neutral\" },\n  { id: \"echo\", name: \"Echo\", description: \"Male\" },\n  { id: \"fable\", name: \"Fable\", description: \"British Male\" },\n  { id: \"onyx\", name: \"Onyx\", description: \"Deep Male\" },\n  { id: \"nova\", name: \"Nova\", description: \"Female\" },\n  { id: \"shimmer\", name: \"Shimmer\", description: \"Soft Female\" },\n];\n\nconst languages = [\n  { id: \"en\", name: \"English\" },\n  { id: \"es\", name: \"Spanish\" },\n  { id: \"fr\", name: \"French\" },\n  { id: \"de\", name: \"German\" },\n  { id: \"it\", name: \"Italian\" },\n  { id: \"pt\", name: \"Portuguese\" },\n  { id: \"ru\", name: \"Russian\" },\n  { id: \"ja\", name: \"Japanese\" },\n  { id: \"ko\", name: \"Korean\" },\n  { id: \"zh\", name: \"Chinese\" },\n];\n\nexport default function AudioSpeech() {\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const audioRef = useRef<HTMLAudioElement>(null);\n  \n  // TTS State\n  const [ttsText, setTtsText] = useState(\"\");\n  const [selectedTtsModel, setSelectedTtsModel] = useState(ttsModels[0].id);\n  const [selectedVoice, setSelectedVoice] = useState(voices[0].id);\n  const [ttsSpeed, setTtsSpeed] = useState(1.0);\n  \n  // Transcription State\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [selectedTranscriptionModel, setSelectedTranscriptionModel] = useState(transcriptionModels[0].id);\n  const [selectedLanguage, setSelectedLanguage] = useState(\"en\");\n  \n  // Audio Player State\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentAudio, setCurrentAudio] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const generateAudioMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/generate/audio\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Audio Generated Successfully\",\n        description: \"Your speech has been generated and saved to your history.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/generations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Generation Failed\",\n        description: error.message || \"Failed to generate audio. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const transcribeMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const response = await fetch(\"/api/transcribe\", {\n        method: \"POST\",\n        body: data,\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`${response.status}: ${errorText}`);\n      }\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Transcription Complete\",\n        description: \"Your audio has been transcribed successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/generations\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Transcription Failed\",\n        description: error.message || \"Failed to transcribe audio. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const { data: generations, isLoading: generationsLoading } = useQuery({\n    queryKey: [\"/api/generations\"],\n    enabled: isAuthenticated,\n  });\n\n  const handleGenerateAudio = () => {\n    if (!ttsText.trim()) {\n      toast({\n        title: \"Text Required\",\n        description: \"Please enter text to convert to speech.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (user?.subscriptionType === \"free\" && user?.generationsUsed >= user?.generationsLimit) {\n      toast({\n        title: \"Generation Limit Reached\",\n        description: \"You've reached your free tier limit. Please upgrade to premium for unlimited generations.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateAudioMutation.mutate({\n      model: selectedTtsModel,\n      input: ttsText,\n      voice: selectedVoice,\n      response_format: \"mp3\",\n      speed: ttsSpeed,\n    });\n  };\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n    }\n  };\n\n  const handleTranscribe = () => {\n    if (!selectedFile) {\n      toast({\n        title: \"File Required\",\n        description: \"Please select an audio file to transcribe.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"audio\", selectedFile);\n    formData.append(\"model\", selectedTranscriptionModel);\n    formData.append(\"language\", selectedLanguage);\n    formData.append(\"response_format\", \"json\");\n\n    transcribeMutation.mutate(formData);\n  };\n\n  const playAudio = (audioUrl: string) => {\n    if (audioRef.current) {\n      if (currentAudio === audioUrl && isPlaying) {\n        audioRef.current.pause();\n        setIsPlaying(false);\n      } else {\n        audioRef.current.src = audioUrl;\n        audioRef.current.play();\n        setCurrentAudio(audioUrl);\n        setIsPlaying(true);\n      }\n    }\n  };\n\n  const copyText = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied\",\n      description: \"Text copied to clipboard.\",\n    });\n  };\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 flex items-center justify-center\">\n        <div className=\"loading-shimmer w-32 h-32 rounded-xl\"></div>\n      </div>\n    );\n  }\n\n  const audioGenerations = generations?.filter((g: any) => g.type === \"audio\") || [];\n  const transcriptionGenerations = generations?.filter((g: any) => g.type === \"transcription\") || [];\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 text-white\">\n      <Navigation />\n      \n      <div className=\"pt-20 pb-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold mb-4\">\n              <span className=\"gradient-text\">Audio & Speech Tools</span>\n            </h1>\n            <p className=\"text-muted-foreground text-lg\">\n              Generate high-quality speech from text and transcribe audio with advanced AI models\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Main Tools */}\n            <div className=\"lg:col-span-2\">\n              <Tabs defaultValue=\"tts\" className=\"space-y-6\">\n                <TabsList className=\"grid w-full grid-cols-2 bg-slate-800/50\">\n                  <TabsTrigger value=\"tts\" className=\"flex items-center space-x-2\">\n                    <Volume2 className=\"w-4 h-4\" />\n                    <span>Text to Speech</span>\n                  </TabsTrigger>\n                  <TabsTrigger value=\"transcription\" className=\"flex items-center space-x-2\">\n                    <Mic className=\"w-4 h-4\" />\n                    <span>Audio Transcription</span>\n                  </TabsTrigger>\n                </TabsList>\n\n                {/* Text to Speech */}\n                <TabsContent value=\"tts\">\n                  <Card className=\"glass-effect border-border\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Volume2 className=\"w-6 h-6\" />\n                        <span>Text to Speech</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      {/* Text Input */}\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"ttsText\">Text to Convert</Label>\n                        <Textarea\n                          id=\"ttsText\"\n                          placeholder=\"Enter the text you want to convert to speech...\"\n                          value={ttsText}\n                          onChange={(e) => setTtsText(e.target.value)}\n                          className=\"min-h-[120px] bg-slate-800/50 border-slate-700\"\n                        />\n                      </div>\n\n                      {/* Model and Voice Settings */}\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"ttsModel\">AI Model</Label>\n                          <Select value={selectedTtsModel} onValueChange={setSelectedTtsModel}>\n                            <SelectTrigger className=\"bg-slate-800/50 border-slate-700\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {ttsModels.map((model) => (\n                                <SelectItem key={model.id} value={model.id}>\n                                  <div className=\"flex flex-col\">\n                                    <span>{model.name}</span>\n                                    <span className=\"text-xs text-muted-foreground\">{model.description}</span>\n                                  </div>\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"voice\">Voice</Label>\n                          <Select value={selectedVoice} onValueChange={setSelectedVoice}>\n                            <SelectTrigger className=\"bg-slate-800/50 border-slate-700\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {voices.map((voice) => (\n                                <SelectItem key={voice.id} value={voice.id}>\n                                  <div className=\"flex flex-col\">\n                                    <span>{voice.name}</span>\n                                    <span className=\"text-xs text-muted-foreground\">{voice.description}</span>\n                                  </div>\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n\n                      {/* Speed Control */}\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"speed\">Speech Speed: {ttsSpeed}x</Label>\n                        <Input\n                          id=\"speed\"\n                          type=\"range\"\n                          min=\"0.25\"\n                          max=\"4.0\"\n                          step=\"0.25\"\n                          value={ttsSpeed}\n                          onChange={(e) => setTtsSpeed(parseFloat(e.target.value))}\n                          className=\"bg-slate-800/50 border-slate-700\"\n                        />\n                      </div>\n\n                      <Separator />\n\n                      <Button\n                        onClick={handleGenerateAudio}\n                        disabled={generateAudioMutation.isPending || !ttsText.trim()}\n                        className=\"btn-primary w-full\"\n                        size=\"lg\"\n                      >\n                        {generateAudioMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                            Generating Speech...\n                          </>\n                        ) : (\n                          <>\n                            <Volume2 className=\"w-5 h-5 mr-2\" />\n                            Generate Speech\n                          </>\n                        )}\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                {/* Audio Transcription */}\n                <TabsContent value=\"transcription\">\n                  <Card className=\"glass-effect border-border\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Mic className=\"w-6 h-6\" />\n                        <span>Audio Transcription</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      {/* File Upload */}\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"audioFile\">Audio File</Label>\n                        <div className=\"flex items-center space-x-4\">\n                          <Button\n                            variant=\"outline\"\n                            onClick={() => fileInputRef.current?.click()}\n                            className=\"flex items-center space-x-2\"\n                          >\n                            <Upload className=\"w-4 h-4\" />\n                            <span>Choose File</span>\n                          </Button>\n                          {selectedFile && (\n                            <span className=\"text-sm text-muted-foreground\">\n                              {selectedFile.name}\n                            </span>\n                          )}\n                        </div>\n                        <input\n                          ref={fileInputRef}\n                          type=\"file\"\n                          accept=\"audio/*\"\n                          onChange={handleFileSelect}\n                          className=\"hidden\"\n                        />\n                        <p className=\"text-xs text-muted-foreground\">\n                          Supported formats: MP3, WAV, M4A, FLAC, WebM\n                        </p>\n                      </div>\n\n                      {/* Model and Language Settings */}\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"transcriptionModel\">AI Model</Label>\n                          <Select value={selectedTranscriptionModel} onValueChange={setSelectedTranscriptionModel}>\n                            <SelectTrigger className=\"bg-slate-800/50 border-slate-700\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {transcriptionModels.map((model) => (\n                                <SelectItem key={model.id} value={model.id}>\n                                  <div className=\"flex flex-col\">\n                                    <span>{model.name}</span>\n                                    <span className=\"text-xs text-muted-foreground\">{model.description}</span>\n                                  </div>\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"language\">Language</Label>\n                          <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>\n                            <SelectTrigger className=\"bg-slate-800/50 border-slate-700\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {languages.map((language) => (\n                                <SelectItem key={language.id} value={language.id}>\n                                  {language.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n\n                      <Separator />\n\n                      <Button\n                        onClick={handleTranscribe}\n                        disabled={transcribeMutation.isPending || !selectedFile}\n                        className=\"btn-primary w-full\"\n                        size=\"lg\"\n                      >\n                        {transcribeMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                            Transcribing...\n                          </>\n                        ) : (\n                          <>\n                            <Mic className=\"w-5 h-5 mr-2\" />\n                            Transcribe Audio\n                          </>\n                        )}\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n\n              {/* Usage Indicator */}\n              {user?.subscriptionType === \"free\" && (\n                <div className=\"mt-6 p-4 bg-slate-800/50 rounded-lg\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-sm text-muted-foreground\">Free Plan Usage</span>\n                    <span className=\"text-sm font-medium\">\n                      {user.generationsUsed} / {user.generationsLimit}\n                    </span>\n                  </div>\n                  <Progress value={(user.generationsUsed / user.generationsLimit) * 100} className=\"h-2\" />\n                </div>\n              )}\n            </div>\n\n            {/* Recent Generations */}\n            <div className=\"lg:col-span-1\">\n              <Tabs defaultValue=\"audio\" className=\"space-y-4\">\n                <TabsList className=\"grid w-full grid-cols-2 bg-slate-800/50\">\n                  <TabsTrigger value=\"audio\">Speech</TabsTrigger>\n                  <TabsTrigger value=\"transcription\">Transcripts</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"audio\">\n                  <Card className=\"glass-effect border-border\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Volume2 className=\"w-5 h-5\" />\n                        <span>Recent Audio</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {generationsLoading ? (\n                        <div className=\"space-y-4\">\n                          {[...Array(3)].map((_, i) => (\n                            <div key={i} className=\"loading-shimmer h-24 rounded-lg\"></div>\n                          ))}\n                        </div>\n                      ) : audioGenerations.length === 0 ? (\n                        <div className=\"text-center py-8\">\n                          <Volume2 className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                          <p className=\"text-muted-foreground\">No audio generated yet</p>\n                          <p className=\"text-sm text-muted-foreground\">Your generated speech will appear here</p>\n                        </div>\n                      ) : (\n                        <div className=\"space-y-4\">\n                          {audioGenerations.slice(0, 5).map((generation: any) => (\n                            <div key={generation.id} className=\"glass-effect rounded-lg p-4\">\n                              <div className=\"flex items-start space-x-3\">\n                                <div className=\"w-12 h-12 bg-slate-700 rounded-lg flex items-center justify-center\">\n                                  <FileAudio className=\"w-6 h-6 text-muted-foreground\" />\n                                </div>\n                                <div className=\"flex-1 min-w-0\">\n                                  <p className=\"text-sm font-medium truncate\">\n                                    {generation.model.split('/')[1] || generation.model}\n                                  </p>\n                                  <p className=\"text-xs text-muted-foreground truncate\">\n                                    {generation.prompt}\n                                  </p>\n                                  <div className=\"flex items-center space-x-2 mt-2\">\n                                    {generation.result?.url && (\n                                      <Button\n                                        size=\"sm\"\n                                        variant=\"ghost\"\n                                        onClick={() => playAudio(generation.result.url)}\n                                        className=\"h-6 px-2\"\n                                      >\n                                        {currentAudio === generation.result.url && isPlaying ? (\n                                          <Pause className=\"w-3 h-3\" />\n                                        ) : (\n                                          <Play className=\"w-3 h-3\" />\n                                        )}\n                                      </Button>\n                                    )}\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"ghost\"\n                                      onClick={() => copyText(generation.prompt)}\n                                      className=\"h-6 px-2\"\n                                    >\n                                      <Copy className=\"w-3 h-3\" />\n                                    </Button>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"transcription\">\n                  <Card className=\"glass-effect border-border\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Mic className=\"w-5 h-5\" />\n                        <span>Transcriptions</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {generationsLoading ? (\n                        <div className=\"space-y-4\">\n                          {[...Array(3)].map((_, i) => (\n                            <div key={i} className=\"loading-shimmer h-24 rounded-lg\"></div>\n                          ))}\n                        </div>\n                      ) : transcriptionGenerations.length === 0 ? (\n                        <div className=\"text-center py-8\">\n                          <Mic className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                          <p className=\"text-muted-foreground\">No transcriptions yet</p>\n                          <p className=\"text-sm text-muted-foreground\">Your transcribed audio will appear here</p>\n                        </div>\n                      ) : (\n                        <div className=\"space-y-4\">\n                          {transcriptionGenerations.slice(0, 5).map((generation: any) => (\n                            <div key={generation.id} className=\"glass-effect rounded-lg p-4\">\n                              <div className=\"space-y-2\">\n                                <p className=\"text-sm font-medium\">\n                                  {generation.model.split('/')[1] || generation.model}\n                                </p>\n                                {generation.result?.text && (\n                                  <div className=\"text-xs text-muted-foreground p-2 bg-slate-800/50 rounded\">\n                                    {generation.result.text.substring(0, 100)}...\n                                  </div>\n                                )}\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={() => copyText(generation.result?.text || \"\")}\n                                  className=\"h-6 px-2\"\n                                >\n                                  <Copy className=\"w-3 h-3 mr-1\" />\n                                  Copy\n                                </Button>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Hidden Audio Element */}\n      <audio\n        ref={audioRef}\n        onEnded={() => {\n          setIsPlaying(false);\n          setCurrentAudio(null);\n        }}\n        onPause={() => setIsPlaying(false)}\n        onPlay={() => setIsPlaying(true)}\n      />\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":28699},"client/src/pages/blog-post.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Calendar,\n  User,\n  Clock,\n  ArrowLeft,\n  Share2,\n  Bookmark,\n  Twitter,\n  Facebook,\n  Linkedin,\n  Copy\n} from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function BlogPost() {\n  const [, params] = useRoute(\"/blog/:slug\");\n  const slug = params?.slug;\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isBookmarked, setIsBookmarked] = useState(false);\n\n  const { data: post, isLoading, error } = useQuery({\n    queryKey: [\"/api/blog/posts\", slug],\n    enabled: !!slug,\n    retry: false,\n  });\n\n  // Fallback post data for demonstration\n  const fallbackPost = {\n    id: \"1\",\n    title: \"Getting Started with FLUX Image Generation\",\n    content: `\n# Introduction\n\nWelcome to the comprehensive guide on FLUX image generation! In this tutorial, we'll explore how to create stunning images using the latest FLUX models available on our platform.\n\n## What is FLUX?\n\nFLUX is a cutting-edge image generation model that combines speed with quality. It offers several variants:\n\n- **FLUX-1-Schnell**: Fast generation with good quality\n- **FLUX-1-Pro**: Professional quality with advanced controls\n- **FLUX-1-Dev**: Development version with experimental features\n\n## Getting Started\n\n### Step 1: Choose Your Model\n\nThe first step is selecting the right FLUX model for your needs:\n\n\\`\\`\\`javascript\nconst models = {\n  fast: \"provider-1/FLUX-1-schnell\",\n  professional: \"provider-6/FLUX-1-pro\", \n  experimental: \"provider-6/FLUX-1-dev\"\n};\n\\`\\`\\`\n\n### Step 2: Craft Your Prompt\n\nA good prompt is essential for great results. Here are some tips:\n\n1. **Be specific**: Instead of \"a dog\", try \"a golden retriever sitting in a sunny park\"\n2. **Include style details**: \"in the style of impressionist painting\"\n3. **Specify composition**: \"wide shot\", \"close-up portrait\", \"bird's eye view\"\n\n### Step 3: Advanced Parameters\n\nFLUX models support various parameters to fine-tune your generation:\n\n- **Size**: Choose from standard resolutions like 1024x1024, 1920x1080\n- **Quality**: Standard or HD quality options\n- **Style**: Different artistic styles and approaches\n\n## Best Practices\n\n### Prompt Engineering Tips\n\nHere are some advanced techniques for better results:\n\n1. **Use descriptive adjectives**: \"vibrant colors\", \"soft lighting\", \"dramatic shadows\"\n2. **Reference art styles**: \"photorealistic\", \"oil painting style\", \"digital art\"\n3. **Include technical details**: \"sharp focus\", \"highly detailed\", \"4K resolution\"\n\n### Common Mistakes to Avoid\n\n- Don't make prompts too long or complex\n- Avoid contradictory instructions\n- Don't rely solely on negative prompts\n\n## Advanced Techniques\n\n### Prompt Enhancement\n\nOur platform offers AI-powered prompt enhancement that can improve your results automatically. Simply enable the \"enhance\" option when generating images.\n\n### Model Comparison\n\nDifferent FLUX models excel at different tasks:\n\n| Model | Best For | Speed | Quality |\n|-------|----------|-------|---------|\n| FLUX-1-Schnell | Quick iterations | Fast | Good |\n| FLUX-1-Pro | Professional work | Medium | Excellent |\n| FLUX-1-Dev | Experimentation | Medium | Variable |\n\n## Conclusion\n\nFLUX models represent the cutting edge of AI image generation. With the right prompts and settings, you can create professional-quality images for any project.\n\nReady to start creating? Head over to our Image Generation Studio and experiment with these techniques!\n\n## Additional Resources\n\n- [FLUX Model Documentation](https://docs.loveaihub.com/flux)\n- [Prompt Engineering Guide](https://docs.loveaihub.com/prompts)\n- [Community Gallery](https://loveaihub.com/gallery)\n\nHappy generating!\n    `,\n    excerpt: \"Learn how to create stunning images using the latest FLUX models. From basic prompts to advanced techniques for professional results.\",\n    category: \"AI Tutorial\",\n    tags: [\"FLUX\", \"Image Generation\", \"Tutorial\", \"AI\"],\n    author: \"LoveAIHub Team\",\n    publishedAt: \"2024-01-15T10:00:00Z\",\n    readTime: \"5 min read\"\n  };\n\n  const displayPost = post || fallbackPost;\n\n  const shareUrl = typeof window !== 'undefined' ? window.location.href : '';\n\n  const handleShare = (platform: string) => {\n    const title = encodeURIComponent(displayPost.title);\n    const url = encodeURIComponent(shareUrl);\n    \n    let shareLink = '';\n    \n    switch (platform) {\n      case 'twitter':\n        shareLink = `https://twitter.com/intent/tweet?text=${title}&url=${url}`;\n        break;\n      case 'facebook':\n        shareLink = `https://www.facebook.com/sharer/sharer.php?u=${url}`;\n        break;\n      case 'linkedin':\n        shareLink = `https://www.linkedin.com/sharing/share-offsite/?url=${url}`;\n        break;\n      case 'copy':\n        navigator.clipboard.writeText(shareUrl);\n        toast({\n          title: \"Link copied!\",\n          description: \"Article link copied to clipboard\",\n        });\n        return;\n    }\n    \n    if (shareLink) {\n      window.open(shareLink, '_blank', 'width=600,height=400');\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case \"AI Tutorial\": return \"bg-primary/20 text-primary\";\n      case \"Platform Update\": return \"bg-cyan-500/20 text-cyan-400\";\n      case \"AI Insights\": return \"bg-purple-500/20 text-purple-400\";\n      case \"Technical\": return \"bg-orange-500/20 text-orange-400\";\n      case \"News\": return \"bg-green-500/20 text-green-400\";\n      default: return \"bg-gray-500/20 text-gray-400\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navbar />\n        <div className=\"pt-20 pb-16\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-8 bg-muted rounded mb-4\"></div>\n              <div className=\"h-12 bg-muted rounded mb-4\"></div>\n              <div className=\"h-6 bg-muted rounded mb-8\"></div>\n              <div className=\"space-y-4\">\n                {[...Array(10)].map((_, i) => (\n                  <div key={i} className=\"h-4 bg-muted rounded\"></div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (error && !post) {\n    const isUnauthorized = isUnauthorizedError(error as Error);\n    \n    if (isUnauthorized) {\n      useEffect(() => {\n        toast({\n          title: \"Authentication Required\",\n          description: \"Please sign in to view this article\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 1000);\n      }, [toast]);\n      \n      return null;\n    }\n\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"glass-effect p-8 text-center\">\n          <CardContent>\n            <h2 className=\"text-2xl font-bold mb-2\">Article Not Found</h2>\n            <p className=\"text-muted-foreground mb-4\">\n              The article you're looking for doesn't exist or has been removed.\n            </p>\n            <Button>\n              <a href=\"/blog\">Back to Blog</a>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      \n      <div className=\"pt-20 pb-16\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Back Button */}\n          <Button variant=\"ghost\" className=\"mb-6\">\n            <a href=\"/blog\" className=\"flex items-center gap-2\">\n              <ArrowLeft className=\"w-4 h-4\" />\n              Back to Blog\n            </a>\n          </Button>\n\n          {/* Article Header */}\n          <div className=\"mb-8\">\n            <Badge className={`mb-4 ${getCategoryColor(displayPost.category)}`}>\n              {displayPost.category}\n            </Badge>\n            \n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4 gradient-text\">\n              {displayPost.title}\n            </h1>\n            \n            <p className=\"text-xl text-muted-foreground mb-6\">\n              {displayPost.excerpt}\n            </p>\n            \n            <div className=\"flex flex-wrap items-center gap-6 text-sm text-muted-foreground mb-6\">\n              <div className=\"flex items-center gap-2\">\n                <User className=\"w-4 h-4\" />\n                {displayPost.author}\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"w-4 h-4\" />\n                {new Date(displayPost.publishedAt).toLocaleDateString('en-US', {\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric'\n                })}\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"w-4 h-4\" />\n                {displayPost.readTime}\n              </div>\n            </div>\n\n            {/* Tags */}\n            {displayPost.tags && (\n              <div className=\"flex flex-wrap gap-2 mb-6\">\n                {displayPost.tags.map((tag, index) => (\n                  <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                    #{tag}\n                  </Badge>\n                ))}\n              </div>\n            )}\n\n            {/* Social Share & Actions */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleShare('twitter')}\n                >\n                  <Twitter className=\"w-4 h-4 mr-2\" />\n                  Tweet\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleShare('facebook')}\n                >\n                  <Facebook className=\"w-4 h-4 mr-2\" />\n                  Share\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleShare('linkedin')}\n                >\n                  <Linkedin className=\"w-4 h-4 mr-2\" />\n                  Post\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleShare('copy')}\n                >\n                  <Copy className=\"w-4 h-4 mr-2\" />\n                  Copy\n                </Button>\n              </div>\n              \n              <Button\n                variant={isBookmarked ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setIsBookmarked(!isBookmarked)}\n              >\n                <Bookmark className={`w-4 h-4 mr-2 ${isBookmarked ? 'fill-current' : ''}`} />\n                {isBookmarked ? 'Saved' : 'Save'}\n              </Button>\n            </div>\n          </div>\n\n          <Separator className=\"mb-8\" />\n\n          {/* Article Content */}\n          <Card className=\"glass-effect\">\n            <CardContent className=\"p-8\">\n              <div \n                className=\"prose prose-invert max-w-none prose-headings:gradient-text prose-headings:font-bold prose-p:text-muted-foreground prose-strong:text-foreground prose-code:bg-muted prose-code:px-2 prose-code:py-1 prose-code:rounded prose-pre:bg-muted prose-pre:border prose-table:text-sm\"\n                dangerouslySetInnerHTML={{ \n                  __html: displayPost.content\n                    .split('\\n')\n                    .map(line => {\n                      // Handle headers\n                      if (line.startsWith('# ')) {\n                        return `<h1 class=\"gradient-text\">${line.slice(2)}</h1>`;\n                      }\n                      if (line.startsWith('## ')) {\n                        return `<h2 class=\"gradient-text\">${line.slice(3)}</h2>`;\n                      }\n                      if (line.startsWith('### ')) {\n                        return `<h3 class=\"gradient-text\">${line.slice(4)}</h3>`;\n                      }\n                      \n                      // Handle code blocks\n                      if (line.startsWith('```')) {\n                        const isClosing = line === '```';\n                        const lang = isClosing ? '' : line.slice(3);\n                        return isClosing ? '</pre></code>' : `<code><pre class=\"language-${lang}\">`;\n                      }\n                      \n                      // Handle inline code\n                      line = line.replace(/`([^`]+)`/g, '<code>$1</code>');\n                      \n                      // Handle bold\n                      line = line.replace(/\\*\\*([^*]+)\\*\\*/g, '<strong>$1</strong>');\n                      \n                      // Handle bullet points\n                      if (line.match(/^\\d+\\./)) {\n                        return `<li>${line.replace(/^\\d+\\.\\s*/, '')}</li>`;\n                      }\n                      if (line.startsWith('- ')) {\n                        return `<li>${line.slice(2)}</li>`;\n                      }\n                      \n                      // Handle tables\n                      if (line.includes('|')) {\n                        const cells = line.split('|').filter(cell => cell.trim());\n                        if (cells.length > 1) {\n                          const isHeader = line.includes('---');\n                          if (isHeader) return '';\n                          const cellElements = cells.map(cell => \n                            line.includes('Model') || line.includes('Best For') ? \n                            `<th>${cell.trim()}</th>` : \n                            `<td>${cell.trim()}</td>`\n                          ).join('');\n                          return `<tr>${cellElements}</tr>`;\n                        }\n                      }\n                      \n                      // Regular paragraphs\n                      if (line.trim()) {\n                        return `<p>${line}</p>`;\n                      }\n                      \n                      return line;\n                    })\n                    .join('')\n                    .replace(/<li>/g, '<ul><li>')\n                    .replace(/<\\/li>(?!\\s*<li>)/g, '</li></ul>')\n                    .replace(/<tr>/g, '<table class=\"w-full border-collapse border border-border\"><tr>')\n                    .replace(/<\\/tr>(?!\\s*<tr>)/g, '</tr></table>')\n                }}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Article Footer */}\n          <div className=\"mt-12 pt-8 border-t border-border\">\n            <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4\">\n              <div>\n                <h3 className=\"font-semibold mb-2\">Share this article</h3>\n                <div className=\"flex items-center gap-2\">\n                  <Button variant=\"outline\" size=\"sm\" onClick={() => handleShare('twitter')}>\n                    <Twitter className=\"w-4 h-4\" />\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" onClick={() => handleShare('facebook')}>\n                    <Facebook className=\"w-4 h-4\" />\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" onClick={() => handleShare('linkedin')}>\n                    <Linkedin className=\"w-4 h-4\" />\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" onClick={() => handleShare('copy')}>\n                    <Share2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"text-right\">\n                <p className=\"text-sm text-muted-foreground mb-2\">Written by</p>\n                <p className=\"font-semibold\">{displayPost.author}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Related Articles CTA */}\n          <Card className=\"glass-effect mt-12\">\n            <CardContent className=\"p-8 text-center\">\n              <h3 className=\"text-2xl font-bold mb-4\">Explore More AI Tutorials</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Discover more guides and insights about AI technology and our platform\n              </p>\n              <Button className=\"btn-depth\">\n                <a href=\"/blog\">View All Articles</a>\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":17044},"client/src/pages/blog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { \n  Search, \n  Calendar, \n  Clock, \n  User, \n  Eye,\n  BookOpen,\n  TrendingUp,\n  Sparkles,\n  Brain,\n  Zap\n} from \"lucide-react\";\n\nconst categories = [\n  { id: \"all\", name: \"All Posts\", count: 12 },\n  { id: \"ai-tutorial\", name: \"AI Tutorials\", count: 5 },\n  { id: \"platform-update\", name: \"Platform Updates\", count: 3 },\n  { id: \"ai-insights\", name: \"AI Insights\", count: 4 },\n];\n\nconst featuredPosts = [\n  {\n    id: \"1\",\n    title: \"Getting Started with FLUX Image Generation\",\n    excerpt: \"Learn how to create stunning images using the latest FLUX models. From basic prompts to advanced techniques for professional results.\",\n    category: \"AI Tutorial\",\n    author: \"Alex Chen\",\n    publishedAt: \"2024-01-15\",\n    readTime: \"5 min read\",\n    viewCount: 1250,\n    featured: true,\n    tags: [\"FLUX\", \"Image Generation\", \"Tutorial\"],\n    slug: \"getting-started-flux-image-generation\"\n  },\n  {\n    id: \"2\",\n    title: \"New Video Generation Model: WAN-2.1 Released\",\n    excerpt: \"Experience faster video generation with improved quality and new creative controls in our latest model update.\",\n    category: \"Platform Update\",\n    author: \"Sarah Johnson\",\n    publishedAt: \"2024-01-12\",\n    readTime: \"3 min read\",\n    viewCount: 890,\n    featured: true,\n    tags: [\"WAN-2.1\", \"Video Generation\", \"Update\"],\n    slug: \"wan-21-video-model-release\"\n  },\n  {\n    id: \"3\",\n    title: \"The Future of AI Chat: Advanced Tools Integration\",\n    excerpt: \"Explore how our advanced AI chat combines multiple models with web search and analysis tools for better results.\",\n    category: \"AI Insights\",\n    author: \"David Rodriguez\",\n    publishedAt: \"2024-01-10\",\n    readTime: \"7 min read\",\n    viewCount: 2100,\n    featured: true,\n    tags: [\"AI Chat\", \"Tools\", \"Future\"],\n    slug: \"future-ai-chat-tools-integration\"\n  }\n];\n\nconst recentPosts = [\n  {\n    id: \"4\",\n    title: \"Optimizing Image Prompts for Better Results\",\n    excerpt: \"Tips and techniques for writing effective prompts that generate exactly what you envision.\",\n    category: \"AI Tutorial\",\n    author: \"Lisa Wang\",\n    publishedAt: \"2024-01-08\",\n    readTime: \"4 min read\",\n    viewCount: 756,\n    featured: false,\n    tags: [\"Prompts\", \"Tips\", \"Optimization\"],\n    slug: \"optimizing-image-prompts\"\n  },\n  {\n    id: \"5\",\n    title: \"API Rate Limits and Best Practices\",\n    excerpt: \"Understanding rate limits and implementing best practices for efficient API usage.\",\n    category: \"Platform Update\",\n    author: \"Mike Thompson\",\n    publishedAt: \"2024-01-05\",\n    readTime: \"6 min read\",\n    viewCount: 445,\n    featured: false,\n    tags: [\"API\", \"Rate Limits\", \"Best Practices\"],\n    slug: \"api-rate-limits-best-practices\"\n  },\n  {\n    id: \"6\",\n    title: \"Understanding AI Model Capabilities\",\n    excerpt: \"A comprehensive guide to choosing the right AI model for your specific use case.\",\n    category: \"AI Insights\",\n    author: \"Emma Davis\",\n    publishedAt: \"2024-01-03\",\n    readTime: \"8 min read\",\n    viewCount: 1340,\n    featured: false,\n    tags: [\"AI Models\", \"Capabilities\", \"Guide\"],\n    slug: \"understanding-ai-model-capabilities\"\n  }\n];\n\nexport default function Blog() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [filteredPosts, setFilteredPosts] = useState([...featuredPosts, ...recentPosts]);\n\n  const { data: blogPosts, isLoading } = useQuery({\n    queryKey: [\"/api/blog\"],\n    retry: false,\n  });\n\n  useEffect(() => {\n    let posts = [...featuredPosts, ...recentPosts];\n    \n    if (selectedCategory !== \"all\") {\n      posts = posts.filter(post => \n        post.category.toLowerCase().replace(/\\s+/g, '-') === selectedCategory\n      );\n    }\n    \n    if (searchQuery) {\n      posts = posts.filter(post =>\n        post.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        post.excerpt.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        post.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))\n      );\n    }\n    \n    setFilteredPosts(posts);\n  }, [searchQuery, selectedCategory]);\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'ai tutorial':\n        return BookOpen;\n      case 'platform update':\n        return TrendingUp;\n      case 'ai insights':\n        return Brain;\n      default:\n        return Sparkles;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 text-white\">\n      <Navigation />\n      \n      <div className=\"pt-20 pb-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl font-bold mb-4\">\n              <span className=\"gradient-text\">AI Blog & Insights</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Stay updated with AI trends, tutorials, platform updates, and insights from our team\n            </p>\n          </div>\n\n          {/* Search and Filter */}\n          <div className=\"mb-12\">\n            <div className=\"flex flex-col md:flex-row gap-4 items-center justify-between\">\n              <div className=\"relative flex-1 max-w-md\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search articles...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 bg-slate-800/50 border-slate-700\"\n                />\n              </div>\n              \n              <div className=\"flex flex-wrap gap-2\">\n                {categories.map((category) => (\n                  <Button\n                    key={category.id}\n                    variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setSelectedCategory(category.id)}\n                    className={selectedCategory === category.id ? \"btn-primary\" : \"btn-secondary\"}\n                  >\n                    {category.name} ({category.count})\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Featured Posts */}\n          {selectedCategory === \"all\" && searchQuery === \"\" && (\n            <div className=\"mb-12\">\n              <h2 className=\"text-2xl font-bold mb-6 flex items-center space-x-2\">\n                <Sparkles className=\"w-6 h-6 text-primary\" />\n                <span>Featured Articles</span>\n              </h2>\n              \n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n                {featuredPosts.map((post, index) => {\n                  const CategoryIcon = getCategoryIcon(post.category);\n                  \n                  return (\n                    <Card key={post.id} className={`glass-effect border-border card-hover overflow-hidden ${\n                      index === 0 ? \"lg:col-span-2 lg:row-span-2\" : \"\"\n                    }`}>\n                      <div className={`h-48 bg-gradient-to-br ${\n                        index === 0 ? \"from-primary/20 to-purple-500/20\" :\n                        index === 1 ? \"from-cyan-500/20 to-emerald-500/20\" :\n                        \"from-purple-500/20 to-pink-500/20\"\n                      } flex items-center justify-center`}>\n                        <CategoryIcon className=\"w-16 h-16 text-primary\" />\n                      </div>\n                      \n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center space-x-2 mb-3\">\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {post.category}\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            Featured\n                          </Badge>\n                        </div>\n                        \n                        <h3 className=\"text-xl font-bold mb-3 line-clamp-2\">\n                          {post.title}\n                        </h3>\n                        \n                        <p className=\"text-muted-foreground mb-4 line-clamp-3\">\n                          {post.excerpt}\n                        </p>\n                        \n                        <div className=\"flex flex-wrap gap-1 mb-4\">\n                          {post.tags.map((tag) => (\n                            <span key={tag} className=\"px-2 py-1 bg-slate-800/50 rounded text-xs text-muted-foreground\">\n                              {tag}\n                            </span>\n                          ))}\n                        </div>\n                        \n                        <Separator className=\"mb-4\" />\n                        \n                        <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"flex items-center space-x-1\">\n                              <User className=\"w-4 h-4\" />\n                              <span>{post.author}</span>\n                            </div>\n                            <div className=\"flex items-center space-x-1\">\n                              <Calendar className=\"w-4 h-4\" />\n                              <span>{formatDate(post.publishedAt)}</span>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"flex items-center space-x-1\">\n                              <Clock className=\"w-4 h-4\" />\n                              <span>{post.readTime}</span>\n                            </div>\n                            <div className=\"flex items-center space-x-1\">\n                              <Eye className=\"w-4 h-4\" />\n                              <span>{post.viewCount.toLocaleString()}</span>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <Link href={`/blog/${post.slug}`}>\n                          <Button className=\"w-full mt-4 btn-primary\">\n                            Read Article\n                          </Button>\n                        </Link>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          {/* All Posts */}\n          <div>\n            <h2 className=\"text-2xl font-bold mb-6\">\n              {selectedCategory === \"all\" ? \"All Articles\" : categories.find(c => c.id === selectedCategory)?.name}\n            </h2>\n            \n            {filteredPosts.length === 0 ? (\n              <Card className=\"glass-effect border-border\">\n                <CardContent className=\"p-12 text-center\">\n                  <Search className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-2\">No articles found</h3>\n                  <p className=\"text-muted-foreground\">\n                    Try adjusting your search query or filter criteria.\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {filteredPosts.map((post) => {\n                  const CategoryIcon = getCategoryIcon(post.category);\n                  \n                  return (\n                    <Card key={post.id} className=\"glass-effect border-border card-hover overflow-hidden\">\n                      <div className={`h-40 bg-gradient-to-br ${\n                        post.category === \"AI Tutorial\" ? \"from-primary/20 to-purple-500/20\" :\n                        post.category === \"Platform Update\" ? \"from-cyan-500/20 to-emerald-500/20\" :\n                        \"from-purple-500/20 to-pink-500/20\"\n                      } flex items-center justify-center`}>\n                        <CategoryIcon className=\"w-12 h-12 text-primary\" />\n                      </div>\n                      \n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center space-x-2 mb-3\">\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {post.category}\n                          </Badge>\n                          {post.featured && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              Featured\n                            </Badge>\n                          )}\n                        </div>\n                        \n                        <h3 className=\"text-lg font-bold mb-3 line-clamp-2\">\n                          {post.title}\n                        </h3>\n                        \n                        <p className=\"text-muted-foreground mb-4 line-clamp-3 text-sm\">\n                          {post.excerpt}\n                        </p>\n                        \n                        <div className=\"flex flex-wrap gap-1 mb-4\">\n                          {post.tags.slice(0, 3).map((tag) => (\n                            <span key={tag} className=\"px-2 py-1 bg-slate-800/50 rounded text-xs text-muted-foreground\">\n                              {tag}\n                            </span>\n                          ))}\n                        </div>\n                        \n                        <Separator className=\"mb-4\" />\n                        \n                        <div className=\"flex items-center justify-between text-xs text-muted-foreground mb-4\">\n                          <div className=\"flex items-center space-x-1\">\n                            <User className=\"w-3 h-3\" />\n                            <span>{post.author}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-1\">\n                            <Calendar className=\"w-3 h-3\" />\n                            <span>{formatDate(post.publishedAt)}</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between text-xs text-muted-foreground mb-4\">\n                          <div className=\"flex items-center space-x-1\">\n                            <Clock className=\"w-3 h-3\" />\n                            <span>{post.readTime}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-1\">\n                            <Eye className=\"w-3 h-3\" />\n                            <span>{post.viewCount.toLocaleString()}</span>\n                          </div>\n                        </div>\n                        \n                        <Link href={`/blog/${post.slug}`}>\n                          <Button className=\"w-full btn-primary\" size=\"sm\">\n                            Read Article\n                          </Button>\n                        </Link>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n\n          {/* Newsletter Signup */}\n          <div className=\"mt-16\">\n            <Card className=\"glass-effect border-border\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"max-w-md mx-auto\">\n                  <Zap className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-2xl font-bold mb-4\">Stay Updated</h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    Subscribe to our newsletter for the latest AI insights, tutorials, and platform updates.\n                  </p>\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      placeholder=\"Enter your email\"\n                      className=\"bg-slate-800/50 border-slate-700\"\n                    />\n                    <Button className=\"btn-primary\">\n                      Subscribe\n                    </Button>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-2\">\n                    No spam, unsubscribe at any time.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":17224},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport DashboardLayout from \"@/components/layout/dashboard-layout\";\nimport DashboardHeader from \"@/components/dashboard/dashboard-header\";\nimport StatsCards from \"@/components/dashboard/stats-cards\";\nimport QuickActions from \"@/components/dashboard/quick-actions\";\nimport GenerationHistory from \"@/components/generation-history\";\nimport SubscriptionManager from \"@/components/subscription-manager\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { Crown, Plus } from \"lucide-react\";\n\nexport default function Home() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated || !user) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"loading-shimmer w-32 h-32 rounded-xl\"></div>\n      </div>\n    );\n  }\n\n  const welcomeMessage = () => {\n    const hour = new Date().getHours();\n    if (hour < 12) return \"Good morning\";\n    if (hour < 18) return \"Good afternoon\";\n    return \"Good evening\";\n  };\n\n  return (\n    <DashboardLayout>\n      <DashboardHeader\n        title={`${welcomeMessage()}, ${(user as any)?.firstName || 'User'}!`}\n      >\n        {(user as any)?.subscriptionType === \"free\" && (\n          <Link href=\"/pricing\">\n            <Button className=\"bg-gradient-to-r from-primary to-purple-600 hover:from-primary/90 hover:to-purple-600/90\">\n              <Crown className=\"w-4 h-4 mr-2\" />\n              Upgrade to Premium\n            </Button>\n          </Link>\n        )}\n        <Link href=\"/image-generation\">\n          <Button variant=\"outline\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            New Generation\n          </Button>\n        </Link>\n      </DashboardHeader>\n\n      <div className=\"container mx-auto px-6 py-6 space-y-8\">\n        {/* Stats Overview */}\n        <StatsCards />\n\n        {/* Quick Actions */}\n        <QuickActions />\n\n        {/* Subscription Manager for Free Users */}\n        {(user as any)?.subscriptionType === \"free\" && (\n          <SubscriptionManager />\n        )}\n\n        {/* Recent Activity */}\n        <GenerationHistory />\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":2696},"client/src/pages/image-editing.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { \n  Edit, \n  Upload, \n  Download, \n  Loader2,\n  Copy,\n  ExternalLink,\n  Brush,\n  Image as ImageIcon,\n  Scissors\n} from \"lucide-react\";\n\nconst editingModels = [\n  { id: \"provider-3/flux-kontext-pro\", name: \"FLUX Kontext Pro\", provider: \"Provider 3\", description: \"Professional editing\" },\n  { id: \"provider-6/black-forest-labs-flux-1-kontext-dev\", name: \"FLUX Kontext Dev\", provider: \"Provider 6\", description: \"Development model\" },\n  { id: \"provider-6/black-forest-labs-flux-1-kontext-pro\", name: \"FLUX Kontext Pro\", provider: \"Provider 6\", description: \"Production ready\" },\n  { id: \"provider-6/black-forest-labs-flux-1-kontext-max\", name: \"FLUX Kontext Max\", provider: \"Provider 6\", description: \"Maximum quality\" },\n];\n\nexport default function ImageEditing() {\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const imageInputRef = useRef<HTMLInputElement>(null);\n  const maskInputRef = useRef<HTMLInputElement>(null);\n  \n  const [prompt, setPrompt] = useState(\"\");\n  const [selectedModel, setSelectedModel] = useState(editingModels[0].id);\n  const [selectedImage, setSelectedImage] = useState<File | null>(null);\n  const [selectedMask, setSelectedMask] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string | null>(null);\n  const [maskPreview, setMaskPreview] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const editImageMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const response = await fetch(\"/api/edit/image\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`${response.status}: ${errorText}`);\n      }\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Image Edited Successfully\",\n        description: \"Your edited image has been generated and saved to your history.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/generations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Editing Failed\",\n        description: error.message || \"Failed to edit image. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const { data: generations, isLoading: generationsLoading } = useQuery({\n    queryKey: [\"/api/generations\"],\n    enabled: isAuthenticated,\n  });\n\n  const handleImageSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setSelectedImage(file);\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setImagePreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleMaskSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setSelectedMask(file);\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setMaskPreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleEditImage = () => {\n    if (!selectedImage) {\n      toast({\n        title: \"Image Required\",\n        description: \"Please select an image to edit.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!prompt.trim()) {\n      toast({\n        title: \"Prompt Required\",\n        description: \"Please enter a prompt describing the edit you want to make.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (user?.subscriptionType === \"free\" && user?.generationsUsed >= user?.generationsLimit) {\n      toast({\n        title: \"Generation Limit Reached\",\n        description: \"You've reached your free tier limit. Please upgrade to premium for unlimited generations.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"image\", selectedImage);\n    if (selectedMask) {\n      formData.append(\"mask\", selectedMask);\n    }\n    formData.append(\"model\", selectedModel);\n    formData.append(\"prompt\", prompt);\n\n    editImageMutation.mutate(formData);\n  };\n\n  const copyPrompt = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied\",\n      description: \"Prompt copied to clipboard.\",\n    });\n  };\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 flex items-center justify-center\">\n        <div className=\"loading-shimmer w-32 h-32 rounded-xl\"></div>\n      </div>\n    );\n  }\n\n  const editGenerations = generations?.filter((g: any) => g.type === \"image_edit\") || [];\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 text-white\">\n      <Navigation />\n      \n      <div className=\"pt-20 pb-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold mb-4\">\n              <span className=\"gradient-text\">Image Editing Suite</span>\n            </h1>\n            <p className=\"text-muted-foreground text-lg\">\n              Professional AI-powered image editing with inpainting, outpainting, and style transfer\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Editing Form */}\n            <div className=\"lg:col-span-2\">\n              <Card className=\"glass-effect border-border\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Brush className=\"w-6 h-6\" />\n                    <span>Edit Image</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {/* Image Upload */}\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"image\">Original Image</Label>\n                      <div className=\"flex items-center space-x-4\">\n                        <Button\n                          variant=\"outline\"\n                          onClick={() => imageInputRef.current?.click()}\n                          className=\"flex items-center space-x-2\"\n                        >\n                          <Upload className=\"w-4 h-4\" />\n                          <span>Choose Image</span>\n                        </Button>\n                        {selectedImage && (\n                          <span className=\"text-sm text-muted-foreground\">\n                            {selectedImage.name}\n                          </span>\n                        )}\n                      </div>\n                      <input\n                        ref={imageInputRef}\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleImageSelect}\n                        className=\"hidden\"\n                      />\n                    </div>\n\n                    {/* Image Preview */}\n                    {imagePreview && (\n                      <div className=\"w-full max-w-md\">\n                        <img\n                          src={imagePreview}\n                          alt=\"Selected image\"\n                          className=\"w-full h-auto rounded-lg border border-slate-700\"\n                        />\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Mask Upload (Optional) */}\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"mask\">Mask Image (Optional)</Label>\n                      <div className=\"flex items-center space-x-4\">\n                        <Button\n                          variant=\"outline\"\n                          onClick={() => maskInputRef.current?.click()}\n                          className=\"flex items-center space-x-2\"\n                        >\n                          <Scissors className=\"w-4 h-4\" />\n                          <span>Choose Mask</span>\n                        </Button>\n                        {selectedMask && (\n                          <span className=\"text-sm text-muted-foreground\">\n                            {selectedMask.name}\n                          </span>\n                        )}\n                      </div>\n                      <input\n                        ref={maskInputRef}\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleMaskSelect}\n                        className=\"hidden\"\n                      />\n                      <p className=\"text-xs text-muted-foreground\">\n                        Upload a mask to specify which areas to edit. White areas will be edited, black areas will be preserved.\n                      </p>\n                    </div>\n\n                    {/* Mask Preview */}\n                    {maskPreview && (\n                      <div className=\"w-full max-w-md\">\n                        <img\n                          src={maskPreview}\n                          alt=\"Mask image\"\n                          className=\"w-full h-auto rounded-lg border border-slate-700\"\n                        />\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Edit Prompt */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"prompt\">Edit Instructions</Label>\n                    <Textarea\n                      id=\"prompt\"\n                      placeholder=\"Describe what you want to change in the image...\"\n                      value={prompt}\n                      onChange={(e) => setPrompt(e.target.value)}\n                      className=\"min-h-[100px] bg-slate-800/50 border-slate-700\"\n                    />\n                    <p className=\"text-xs text-muted-foreground\">\n                      Be specific about what you want to add, remove, or change in the image.\n                    </p>\n                  </div>\n\n                  {/* Model Selection */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"model\">AI Model</Label>\n                    <Select value={selectedModel} onValueChange={setSelectedModel}>\n                      <SelectTrigger className=\"bg-slate-800/50 border-slate-700\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {editingModels.map((model) => (\n                          <SelectItem key={model.id} value={model.id}>\n                            <div className=\"flex flex-col\">\n                              <span>{model.name}</span>\n                              <span className=\"text-xs text-muted-foreground\">{model.description}</span>\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <Separator />\n\n                  {/* Edit Button */}\n                  <Button\n                    onClick={handleEditImage}\n                    disabled={editImageMutation.isPending || !selectedImage || !prompt.trim()}\n                    className=\"btn-primary w-full\"\n                    size=\"lg\"\n                  >\n                    {editImageMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                        Editing Image...\n                      </>\n                    ) : (\n                      <>\n                        <Brush className=\"w-5 h-5 mr-2\" />\n                        Edit Image\n                      </>\n                    )}\n                  </Button>\n\n                  {/* Tips */}\n                  <div className=\"p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg\">\n                    <h4 className=\"font-medium text-blue-400 mb-2\">Editing Tips</h4>\n                    <ul className=\"text-sm text-blue-300 space-y-1\">\n                      <li>• Use high-resolution images for best results</li>\n                      <li>• Create precise masks for targeted edits</li>\n                      <li>• Be descriptive in your edit instructions</li>\n                      <li>• White mask areas = edit, black mask areas = preserve</li>\n                    </ul>\n                  </div>\n\n                  {/* Usage Indicator */}\n                  {user?.subscriptionType === \"free\" && (\n                    <div className=\"mt-4 p-4 bg-slate-800/50 rounded-lg\">\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <span className=\"text-sm text-muted-foreground\">Free Plan Usage</span>\n                        <span className=\"text-sm font-medium\">\n                          {user.generationsUsed} / {user.generationsLimit}\n                        </span>\n                      </div>\n                      <Progress value={(user.generationsUsed / user.generationsLimit) * 100} className=\"h-2\" />\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Edits */}\n            <div className=\"lg:col-span-1\">\n              <Card className=\"glass-effect border-border\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Edit className=\"w-6 h-6\" />\n                    <span>Recent Edits</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {generationsLoading ? (\n                    <div className=\"space-y-4\">\n                      {[...Array(3)].map((_, i) => (\n                        <div key={i} className=\"loading-shimmer h-32 rounded-lg\"></div>\n                      ))}\n                    </div>\n                  ) : editGenerations.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <Edit className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground\">No edits made yet</p>\n                      <p className=\"text-sm text-muted-foreground\">Your edited images will appear here</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {editGenerations.slice(0, 5).map((generation: any) => (\n                        <div key={generation.id} className=\"glass-effect rounded-lg p-4\">\n                          <div className=\"flex items-start space-x-3\">\n                            <div className=\"w-16 h-16 bg-slate-700 rounded-lg flex items-center justify-center\">\n                              {generation.result?.data?.[0]?.url ? (\n                                <img\n                                  src={generation.result.data[0].url}\n                                  alt=\"Edited\"\n                                  className=\"w-full h-full object-cover rounded-lg\"\n                                />\n                              ) : (\n                                <ImageIcon className=\"w-8 h-8 text-muted-foreground\" />\n                              )}\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <p className=\"text-sm font-medium truncate\">\n                                {generation.model.split('/')[1] || generation.model}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground truncate\">\n                                {generation.prompt}\n                              </p>\n                              <div className=\"flex items-center space-x-1 mt-1\">\n                                <span className={`text-xs px-2 py-1 rounded-full ${\n                                  generation.status === \"completed\" \n                                    ? \"bg-green-500/20 text-green-400\" \n                                    : generation.status === \"failed\"\n                                    ? \"bg-red-500/20 text-red-400\"\n                                    : \"bg-yellow-500/20 text-yellow-400\"\n                                }`}>\n                                  {generation.status}\n                                </span>\n                              </div>\n                              <div className=\"flex items-center space-x-2 mt-2\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={() => copyPrompt(generation.prompt)}\n                                  className=\"h-6 px-2\"\n                                >\n                                  <Copy className=\"w-3 h-3\" />\n                                </Button>\n                                {generation.result?.data?.[0]?.url && (\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                    onClick={() => window.open(generation.result.data[0].url, '_blank')}\n                                    className=\"h-6 px-2\"\n                                  >\n                                    <ExternalLink className=\"w-3 h-3\" />\n                                  </Button>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":19506},"client/src/pages/image-generation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { \n  Image as ImageIcon, \n  Download, \n  Settings, \n  Sparkles, \n  Loader2,\n  Copy,\n  ExternalLink,\n  Wand2\n} from \"lucide-react\";\n\nconst imageModels = [\n  { id: \"provider-6/gpt-image-1\", name: \"GPT Image 1\", provider: \"Provider 6\" },\n  { id: \"provider-2/dall-e-3\", name: \"DALL-E 3\", provider: \"Provider 2\" },\n  { id: \"provider-3/dall-e-3\", name: \"DALL-E 3\", provider: \"Provider 3\" },\n  { id: \"provider-4/imagen-3\", name: \"Imagen 3\", provider: \"Provider 4\" },\n  { id: \"provider-4/imagen-4\", name: \"Imagen 4\", provider: \"Provider 4\" },\n  { id: \"provider-3/imagen-3.0-generate-002\", name: \"Imagen 3.0\", provider: \"Provider 3\" },\n  { id: \"provider-3/imagen-4.0-generate-preview-06-06\", name: \"Imagen 4.0 Preview\", provider: \"Provider 3\" },\n  { id: \"provider-6/sana-1.5\", name: \"Sana 1.5\", provider: \"Provider 6\" },\n  { id: \"provider-6/sana-1.5-flash\", name: \"Sana 1.5 Flash\", provider: \"Provider 6\" },\n  { id: \"provider-1/FLUX-1-schnell\", name: \"FLUX-1 Schnell\", provider: \"Provider 1\" },\n  { id: \"provider-2/FLUX-1-schnell\", name: \"FLUX-1 Schnell\", provider: \"Provider 2\" },\n  { id: \"provider-3/FLUX-1-schnell\", name: \"FLUX-1 Schnell\", provider: \"Provider 3\" },\n  { id: \"provider-2/FLUX-1-schnell-v2\", name: \"FLUX-1 Schnell v2\", provider: \"Provider 2\" },\n  { id: \"provider-1/FLUX-1-dev\", name: \"FLUX-1 Dev\", provider: \"Provider 1\" },\n  { id: \"provider-2/FLUX-1-dev\", name: \"FLUX-1 Dev\", provider: \"Provider 2\" },\n  { id: \"provider-3/FLUX-1-dev\", name: \"FLUX-1 Dev\", provider: \"Provider 3\" },\n  { id: \"provider-6/FLUX-1-dev\", name: \"FLUX-1 Dev\", provider: \"Provider 6\" },\n  { id: \"provider-6/FLUX-1-pro\", name: \"FLUX-1 Pro\", provider: \"Provider 6\" },\n  { id: \"provider-1/FLUX.1.1-pro\", name: \"FLUX 1.1 Pro\", provider: \"Provider 1\" },\n  { id: \"provider-2/FLUX.1.1-pro\", name: \"FLUX 1.1 Pro\", provider: \"Provider 2\" },\n  { id: \"provider-3/FLUX.1.1-pro-ultra\", name: \"FLUX 1.1 Pro Ultra\", provider: \"Provider 3\" },\n  { id: \"provider-3/FLUX.1.1-pro-ultra-raw\", name: \"FLUX 1.1 Pro Ultra Raw\", provider: \"Provider 3\" },\n];\n\nconst imageSizes = [\n  { id: \"1024x1024\", name: \"Square (1024x1024)\" },\n  { id: \"1792x1024\", name: \"Landscape (1792x1024)\" },\n  { id: \"1024x1792\", name: \"Portrait (1024x1792)\" },\n  { id: \"512x512\", name: \"Small Square (512x512)\" },\n];\n\nexport default function ImageGeneration() {\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [prompt, setPrompt] = useState(\"\");\n  const [selectedModel, setSelectedModel] = useState(imageModels[0].id);\n  const [selectedSize, setSelectedSize] = useState(\"1024x1024\");\n  const [quality, setQuality] = useState(\"standard\");\n  const [style, setStyle] = useState(\"vivid\");\n  const [numImages, setNumImages] = useState(1);\n  const [enhancePrompt, setEnhancePrompt] = useState(false);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const generateImageMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/generate/image\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Image Generated Successfully\",\n        description: \"Your image has been generated and saved to your history.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/generations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Generation Failed\",\n        description: error.message || \"Failed to generate image. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const { data: generations, isLoading: generationsLoading } = useQuery({\n    queryKey: [\"/api/generations\"],\n    enabled: isAuthenticated,\n  });\n\n  const handleGenerate = () => {\n    if (!prompt.trim()) {\n      toast({\n        title: \"Prompt Required\",\n        description: \"Please enter a prompt to generate an image.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (user?.subscriptionType === \"free\" && user?.generationsUsed >= user?.generationsLimit) {\n      toast({\n        title: \"Generation Limit Reached\",\n        description: \"You've reached your free tier limit. Please upgrade to premium for unlimited generations.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateImageMutation.mutate({\n      model: selectedModel,\n      prompt,\n      n: numImages,\n      size: selectedSize,\n      quality,\n      style,\n      enhancePrompt,\n    });\n  };\n\n  const copyPrompt = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied\",\n      description: \"Prompt copied to clipboard.\",\n    });\n  };\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 flex items-center justify-center\">\n        <div className=\"loading-shimmer w-32 h-32 rounded-xl\"></div>\n      </div>\n    );\n  }\n\n  const imageGenerations = generations?.filter((g: any) => g.type === \"image\") || [];\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 text-white\">\n      <Navigation />\n      \n      <div className=\"pt-20 pb-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold mb-4\">\n              <span className=\"gradient-text\">Image Generation Studio</span>\n            </h1>\n            <p className=\"text-muted-foreground text-lg\">\n              Create stunning images with 20+ state-of-the-art AI models\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Generation Form */}\n            <div className=\"lg:col-span-2\">\n              <Card className=\"glass-effect border-border\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Wand2 className=\"w-6 h-6\" />\n                    <span>Generate Image</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {/* Prompt Input */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"prompt\">Prompt</Label>\n                    <Textarea\n                      id=\"prompt\"\n                      placeholder=\"Describe the image you want to generate...\"\n                      value={prompt}\n                      onChange={(e) => setPrompt(e.target.value)}\n                      className=\"min-h-[100px] bg-slate-800/50 border-slate-700\"\n                    />\n                  </div>\n\n                  {/* Model Selection */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"model\">AI Model</Label>\n                    <Select value={selectedModel} onValueChange={setSelectedModel}>\n                      <SelectTrigger className=\"bg-slate-800/50 border-slate-700\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {imageModels.map((model) => (\n                          <SelectItem key={model.id} value={model.id}>\n                            {model.name} ({model.provider})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Basic Options */}\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"size\">Image Size</Label>\n                      <Select value={selectedSize} onValueChange={setSelectedSize}>\n                        <SelectTrigger className=\"bg-slate-800/50 border-slate-700\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {imageSizes.map((size) => (\n                            <SelectItem key={size.id} value={size.id}>\n                              {size.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"numImages\">Number of Images</Label>\n                      <Input\n                        id=\"numImages\"\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"4\"\n                        value={numImages}\n                        onChange={(e) => setNumImages(parseInt(e.target.value) || 1)}\n                        className=\"bg-slate-800/50 border-slate-700\"\n                      />\n                    </div>\n                  </div>\n\n                  {/* Enhance Prompt Option */}\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"enhance\"\n                      checked={enhancePrompt}\n                      onCheckedChange={setEnhancePrompt}\n                    />\n                    <Label htmlFor=\"enhance\" className=\"flex items-center space-x-2\">\n                      <Sparkles className=\"w-4 h-4\" />\n                      <span>Enhance prompt with AI</span>\n                    </Label>\n                  </div>\n\n                  {/* Advanced Options Toggle */}\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"advanced\"\n                      checked={showAdvanced}\n                      onCheckedChange={setShowAdvanced}\n                    />\n                    <Label htmlFor=\"advanced\" className=\"flex items-center space-x-2\">\n                      <Settings className=\"w-4 h-4\" />\n                      <span>Advanced Options</span>\n                    </Label>\n                  </div>\n\n                  {/* Advanced Options */}\n                  {showAdvanced && (\n                    <div className=\"space-y-4 pt-4 border-t border-slate-700\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"quality\">Quality</Label>\n                          <Select value={quality} onValueChange={setQuality}>\n                            <SelectTrigger className=\"bg-slate-800/50 border-slate-700\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"standard\">Standard</SelectItem>\n                              <SelectItem value=\"hd\">HD</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"style\">Style</Label>\n                          <Select value={style} onValueChange={setStyle}>\n                            <SelectTrigger className=\"bg-slate-800/50 border-slate-700\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"vivid\">Vivid</SelectItem>\n                              <SelectItem value=\"natural\">Natural</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  <Separator />\n\n                  {/* Generate Button */}\n                  <Button\n                    onClick={handleGenerate}\n                    disabled={generateImageMutation.isPending || !prompt.trim()}\n                    className=\"btn-primary w-full\"\n                    size=\"lg\"\n                  >\n                    {generateImageMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                        Generating...\n                      </>\n                    ) : (\n                      <>\n                        <Wand2 className=\"w-5 h-5 mr-2\" />\n                        Generate Image\n                      </>\n                    )}\n                  </Button>\n\n                  {/* Usage Indicator */}\n                  {user?.subscriptionType === \"free\" && (\n                    <div className=\"mt-4 p-4 bg-slate-800/50 rounded-lg\">\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <span className=\"text-sm text-muted-foreground\">Free Plan Usage</span>\n                        <span className=\"text-sm font-medium\">\n                          {user.generationsUsed} / {user.generationsLimit}\n                        </span>\n                      </div>\n                      <Progress value={(user.generationsUsed / user.generationsLimit) * 100} className=\"h-2\" />\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Generations */}\n            <div className=\"lg:col-span-1\">\n              <Card className=\"glass-effect border-border\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <ImageIcon className=\"w-6 h-6\" />\n                    <span>Recent Images</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {generationsLoading ? (\n                    <div className=\"space-y-4\">\n                      {[...Array(3)].map((_, i) => (\n                        <div key={i} className=\"loading-shimmer h-32 rounded-lg\"></div>\n                      ))}\n                    </div>\n                  ) : imageGenerations.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <ImageIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground\">No images generated yet</p>\n                      <p className=\"text-sm text-muted-foreground\">Your generated images will appear here</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {imageGenerations.slice(0, 5).map((generation: any) => (\n                        <div key={generation.id} className=\"glass-effect rounded-lg p-4\">\n                          <div className=\"flex items-start space-x-3\">\n                            <div className=\"w-16 h-16 bg-slate-700 rounded-lg flex items-center justify-center\">\n                              {generation.result?.data?.[0]?.url ? (\n                                <img\n                                  src={generation.result.data[0].url}\n                                  alt=\"Generated\"\n                                  className=\"w-full h-full object-cover rounded-lg\"\n                                />\n                              ) : (\n                                <ImageIcon className=\"w-8 h-8 text-muted-foreground\" />\n                              )}\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <p className=\"text-sm font-medium truncate\">\n                                {generation.model.split('/')[1] || generation.model}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground truncate\">\n                                {generation.prompt}\n                              </p>\n                              <div className=\"flex items-center space-x-2 mt-2\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={() => copyPrompt(generation.prompt)}\n                                  className=\"h-6 px-2\"\n                                >\n                                  <Copy className=\"w-3 h-3\" />\n                                </Button>\n                                {generation.result?.data?.[0]?.url && (\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                    onClick={() => window.open(generation.result.data[0].url, '_blank')}\n                                    className=\"h-6 px-2\"\n                                  >\n                                    <ExternalLink className=\"w-3 h-3\" />\n                                  </Button>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":18753},"client/src/pages/landing.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { AuthModal } from \"@/components/auth/AuthModal\";\nimport { \n  Sparkles, \n  Image, \n  Video, \n  MessageSquare, \n  Mic, \n  Edit, \n  Code,\n  Play,\n  CheckCircle,\n  ArrowRight,\n  Star,\n  Zap,\n  Globe,\n  Shield\n} from \"lucide-react\";\n\nexport default function Landing() {\n  const [mounted, setMounted] = useState(false);\n  const [showAuthModal, setShowAuthModal] = useState(false);\n  const [authModalTab, setAuthModalTab] = useState<\"signin\" | \"signup\">(\"signup\");\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!mounted) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 text-white overflow-x-hidden\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"pt-32 pb-20 relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/20 via-slate-900 to-purple-900/20\"></div>\n        \n        {/* Floating Elements */}\n        <div className=\"absolute top-20 left-10 w-20 h-20 bg-primary/20 rounded-full blur-xl animate-float\"></div>\n        <div className=\"absolute top-40 right-20 w-32 h-32 bg-purple-500/20 rounded-full blur-xl animate-float\" style={{ animationDelay: \"-2s\" }}></div>\n        <div className=\"absolute bottom-20 left-1/4 w-16 h-16 bg-cyan-500/20 rounded-full blur-xl animate-float\" style={{ animationDelay: \"-4s\" }}></div>\n        \n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n          <div className=\"text-center mb-16\">\n            <div className=\"mb-6\">\n              <span className=\"px-4 py-2 bg-primary/10 border border-primary/20 rounded-full text-sm font-medium text-primary\">\n                🚀 20+ AI Models Available\n              </span>\n            </div>\n            \n            <h1 className=\"text-5xl md:text-7xl font-bold mb-6 leading-tight\">\n              Professional\n              <span className=\"gradient-text block\">AI Platform</span>\n              <span className=\"text-4xl md:text-5xl\">for Creators</span>\n            </h1>\n            \n            <p className=\"text-xl text-muted-foreground mb-8 max-w-3xl mx-auto leading-relaxed\">\n              Generate stunning images, create videos, chat with advanced AI, transcribe audio, and more. \n              Access 20+ state-of-the-art AI models through our unified platform.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center mb-12\">\n              <Button \n                className=\"btn-primary text-lg px-8 py-4 animate-glow\"\n                onClick={() => {\n                  setAuthModalTab(\"signup\");\n                  setShowAuthModal(true);\n                }}\n              >\n                Start Creating Free\n              </Button>\n              <Link href=\"/api-docs\">\n                <Button variant=\"outline\" className=\"btn-secondary text-lg px-8 py-4\">\n                  View Documentation\n                </Button>\n              </Link>\n            </div>\n            \n            <div className=\"flex justify-center items-center space-x-8 text-sm text-muted-foreground\">\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"w-5 h-5 text-green-400\" />\n                <span>50 Free Generations</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"w-5 h-5 text-green-400\" />\n                <span>No Credit Card Required</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"w-5 h-5 text-green-400\" />\n                <span>Instant Setup</span>\n              </div>\n            </div>\n          </div>\n          \n          {/* Hero Visual */}\n          <div className=\"relative max-w-5xl mx-auto\">\n            <div className=\"glass-effect rounded-2xl p-8 shadow-2xl\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"glass-effect rounded-xl p-6 card-hover\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-purple-500 rounded-lg mb-4 flex items-center justify-center\">\n                    <Image className=\"w-6 h-6\" />\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">Image Generation</h3>\n                  <p className=\"text-sm text-muted-foreground\">FLUX, DALL-E, Stable Diffusion</p>\n                </div>\n                \n                <div className=\"glass-effect rounded-xl p-6 card-hover\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-cyan-500 to-primary rounded-lg mb-4 flex items-center justify-center\">\n                    <Video className=\"w-6 h-6\" />\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">Video Creation</h3>\n                  <p className=\"text-sm text-muted-foreground\">WAN-2.1 Video Model</p>\n                </div>\n                \n                <div className=\"glass-effect rounded-xl p-6 card-hover\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-purple-500 to-cyan-500 rounded-lg mb-4 flex items-center justify-center\">\n                    <MessageSquare className=\"w-6 h-6\" />\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">AI Chat</h3>\n                  <p className=\"text-sm text-muted-foreground\">GPT-4, Claude, Gemini</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 bg-slate-800/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold mb-6\">\n              <span className=\"gradient-text\">Powerful AI Services</span>\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Everything you need to create, generate, and analyze with AI in one professional platform\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {/* Image Generation Studio */}\n            <Card className=\"glass-effect border-border card-hover group\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-primary to-purple-500 rounded-2xl mb-6 flex items-center justify-center group-hover:scale-110 transition-transform\">\n                  <Image className=\"w-8 h-8\" />\n                </div>\n                <h3 className=\"text-2xl font-bold mb-4\">Image Generation Studio</h3>\n                <p className=\"text-muted-foreground mb-6\">Create stunning images with 20+ models including FLUX, DALL-E 3, Stable Diffusion, and Imagen. Professional quality with advanced controls.</p>\n                <div className=\"flex flex-wrap gap-2 mb-6\">\n                  <span className=\"px-3 py-1 bg-primary/20 text-primary rounded-full text-sm\">FLUX-1-Pro</span>\n                  <span className=\"px-3 py-1 bg-primary/20 text-primary rounded-full text-sm\">DALL-E 3</span>\n                  <span className=\"px-3 py-1 bg-primary/20 text-primary rounded-full text-sm\">Imagen 4</span>\n                </div>\n                <Link href=\"/image-generation\" className=\"text-primary hover:text-primary/80 font-medium inline-flex items-center\">\n                  Explore Models\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Video Generation Lab */}\n            <Card className=\"glass-effect border-border card-hover group\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-cyan-500 to-primary rounded-2xl mb-6 flex items-center justify-center group-hover:scale-110 transition-transform\">\n                  <Video className=\"w-8 h-8\" />\n                </div>\n                <h3 className=\"text-2xl font-bold mb-4\">Video Generation Lab</h3>\n                <p className=\"text-muted-foreground mb-6\">Transform text prompts into professional videos using WAN-2.1. Create engaging content for social media, marketing, and entertainment.</p>\n                <div className=\"flex flex-wrap gap-2 mb-6\">\n                  <span className=\"px-3 py-1 bg-cyan-500/20 text-cyan-400 rounded-full text-sm\">WAN-2.1</span>\n                  <span className=\"px-3 py-1 bg-cyan-500/20 text-cyan-400 rounded-full text-sm\">HD Quality</span>\n                  <span className=\"px-3 py-1 bg-cyan-500/20 text-cyan-400 rounded-full text-sm\">Fast Render</span>\n                </div>\n                <Link href=\"/video-generation\" className=\"text-cyan-400 hover:text-cyan-300 font-medium inline-flex items-center\">\n                  Start Creating\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Advanced AI Chat */}\n            <Card className=\"glass-effect border-border card-hover group\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-purple-500 to-cyan-500 rounded-2xl mb-6 flex items-center justify-center group-hover:scale-110 transition-transform\">\n                  <MessageSquare className=\"w-8 h-8\" />\n                </div>\n                <h3 className=\"text-2xl font-bold mb-4\">Advanced AI Chat</h3>\n                <p className=\"text-muted-foreground mb-6\">Chat with the most advanced AI models. Web search, analysis tools, research capabilities, and creative assistance in one interface.</p>\n                <div className=\"flex flex-wrap gap-2 mb-6\">\n                  <span className=\"px-3 py-1 bg-purple-500/20 text-purple-400 rounded-full text-sm\">GPT-4.1</span>\n                  <span className=\"px-3 py-1 bg-purple-500/20 text-purple-400 rounded-full text-sm\">Claude 4</span>\n                  <span className=\"px-3 py-1 bg-purple-500/20 text-purple-400 rounded-full text-sm\">Web Search</span>\n                </div>\n                <Link href=\"/ai-chat\" className=\"text-purple-400 hover:text-purple-300 font-medium inline-flex items-center\">\n                  Start Chatting\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Audio & Speech */}\n            <Card className=\"glass-effect border-border card-hover group\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-emerald-500 to-primary rounded-2xl mb-6 flex items-center justify-center group-hover:scale-110 transition-transform\">\n                  <Mic className=\"w-8 h-8\" />\n                </div>\n                <h3 className=\"text-2xl font-bold mb-4\">Audio & Speech</h3>\n                <p className=\"text-muted-foreground mb-6\">Generate high-quality speech from text and transcribe audio with multiple TTS and transcription models including Whisper and Sonic.</p>\n                <div className=\"flex flex-wrap gap-2 mb-6\">\n                  <span className=\"px-3 py-1 bg-emerald-500/20 text-emerald-400 rounded-full text-sm\">TTS-HD</span>\n                  <span className=\"px-3 py-1 bg-emerald-500/20 text-emerald-400 rounded-full text-sm\">Whisper</span>\n                  <span className=\"px-3 py-1 bg-emerald-500/20 text-emerald-400 rounded-full text-sm\">Sonic-2</span>\n                </div>\n                <Link href=\"/audio-speech\" className=\"text-emerald-400 hover:text-emerald-300 font-medium inline-flex items-center\">\n                  Try Audio Tools\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Image Editing Suite */}\n            <Card className=\"glass-effect border-border card-hover group\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-orange-500 to-primary rounded-2xl mb-6 flex items-center justify-center group-hover:scale-110 transition-transform\">\n                  <Edit className=\"w-8 h-8\" />\n                </div>\n                <h3 className=\"text-2xl font-bold mb-4\">Image Editing Suite</h3>\n                <p className=\"text-muted-foreground mb-6\">Professional image editing with AI-powered tools. Inpainting, outpainting, style transfer, and advanced editing capabilities.</p>\n                <div className=\"flex flex-wrap gap-2 mb-6\">\n                  <span className=\"px-3 py-1 bg-orange-500/20 text-orange-400 rounded-full text-sm\">FLUX-Kontext</span>\n                  <span className=\"px-3 py-1 bg-orange-500/20 text-orange-400 rounded-full text-sm\">Inpainting</span>\n                  <span className=\"px-3 py-1 bg-orange-500/20 text-orange-400 rounded-full text-sm\">Style Transfer</span>\n                </div>\n                <Link href=\"/image-editing\" className=\"text-orange-400 hover:text-orange-300 font-medium inline-flex items-center\">\n                  Edit Images\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* API & Embeddings */}\n            <Card className=\"glass-effect border-border card-hover group\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-pink-500 to-primary rounded-2xl mb-6 flex items-center justify-center group-hover:scale-110 transition-transform\">\n                  <Code className=\"w-8 h-8\" />\n                </div>\n                <h3 className=\"text-2xl font-bold mb-4\">API & Embeddings</h3>\n                <p className=\"text-muted-foreground mb-6\">Integrate AI into your applications with our developer-friendly API. Advanced embeddings for semantic search and analysis.</p>\n                <div className=\"flex flex-wrap gap-2 mb-6\">\n                  <span className=\"px-3 py-1 bg-pink-500/20 text-pink-400 rounded-full text-sm\">REST API</span>\n                  <span className=\"px-3 py-1 bg-pink-500/20 text-pink-400 rounded-full text-sm\">Embeddings</span>\n                  <span className=\"px-3 py-1 bg-pink-500/20 text-pink-400 rounded-full text-sm\">SDKs</span>\n                </div>\n                <Link href=\"/api-docs\" className=\"text-pink-400 hover:text-pink-300 font-medium inline-flex items-center\">\n                  View API Docs\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Link>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* AI Models Showcase */}\n      <section id=\"models\" className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold mb-6\">\n              <span className=\"gradient-text\">20+ AI Models</span>\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Access the latest and most powerful AI models from leading providers, all through our unified API\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {/* Image Models */}\n            <Card className=\"glass-effect border-border card-hover\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-primary to-purple-500 rounded-lg\"></div>\n                  <h3 className=\"font-semibold\">Image Generation</h3>\n                </div>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">FLUX-1-Pro</span>\n                    <span className=\"px-2 py-1 bg-green-500/20 text-green-400 rounded text-xs\">Available</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">DALL-E 3</span>\n                    <span className=\"px-2 py-1 bg-green-500/20 text-green-400 rounded text-xs\">Available</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Imagen 4</span>\n                    <span className=\"px-2 py-1 bg-green-500/20 text-green-400 rounded text-xs\">Available</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Stable Diffusion</span>\n                    <span className=\"px-2 py-1 bg-green-500/20 text-green-400 rounded text-xs\">Available</span>\n                  </div>\n                  <div className=\"pt-2\">\n                    <span className=\"text-xs text-muted-foreground\">+5 more models</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Chat Models */}\n            <Card className=\"glass-effect border-border card-hover\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-cyan-500 rounded-lg\"></div>\n                  <h3 className=\"font-semibold\">Chat Completion</h3>\n                </div>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">GPT-4.1</span>\n                    <span className=\"px-2 py-1 bg-green-500/20 text-green-400 rounded text-xs\">Available</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Claude 4</span>\n                    <span className=\"px-2 py-1 bg-green-500/20 text-green-400 rounded text-xs\">Available</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Gemini 2.5 Pro</span>\n                    <span className=\"px-2 py-1 bg-green-500/20 text-green-400 rounded text-xs\">Available</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Llama 4</span>\n                    <span className=\"px-2 py-1 bg-green-500/20 text-green-400 rounded text-xs\">Available</span>\n                  </div>\n                  <div className=\"pt-2\">\n                    <span className=\"text-xs text-muted-foreground\">+15 more models</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Video Models */}\n            <Card className=\"glass-effect border-border card-hover\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-cyan-500 to-emerald-500 rounded-lg\"></div>\n                  <h3 className=\"font-semibold\">Video Generation</h3>\n                </div>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">WAN-2.1</span>\n                    <span className=\"px-2 py-1 bg-green-500/20 text-green-400 rounded text-xs\">Available</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">HD Quality</span>\n                    <span className=\"px-2 py-1 bg-blue-500/20 text-blue-400 rounded text-xs\">Premium</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Fast Rendering</span>\n                    <span className=\"px-2 py-1 bg-green-500/20 text-green-400 rounded text-xs\">Available</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Custom Styles</span>\n                    <span className=\"px-2 py-1 bg-green-500/20 text-green-400 rounded text-xs\">Available</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Audio Models */}\n            <Card className=\"glass-effect border-border card-hover\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-emerald-500 to-orange-500 rounded-lg\"></div>\n                  <h3 className=\"font-semibold\">Audio & Speech</h3>\n                </div>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">TTS-HD</span>\n                    <span className=\"px-2 py-1 bg-green-500/20 text-green-400 rounded text-xs\">Available</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Whisper V3</span>\n                    <span className=\"px-2 py-1 bg-green-500/20 text-green-400 rounded text-xs\">Available</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Sonic-2</span>\n                    <span className=\"px-2 py-1 bg-green-500/20 text-green-400 rounded text-xs\">Available</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Multi-language</span>\n                    <span className=\"px-2 py-1 bg-green-500/20 text-green-400 rounded text-xs\">Available</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          <div className=\"text-center mt-12\">\n            <Link href=\"/api-docs\">\n              <Button className=\"btn-primary px-8 py-4\">\n                View All Models & Documentation\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats & Trust Section */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold gradient-text mb-2\">20+</div>\n              <p className=\"text-muted-foreground\">AI Models</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold gradient-text mb-2\">50K+</div>\n              <p className=\"text-muted-foreground\">Generations Created</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold gradient-text mb-2\">1K+</div>\n              <p className=\"text-muted-foreground\">Active Users</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold gradient-text mb-2\">99.9%</div>\n              <p className=\"text-muted-foreground\">Uptime</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <div className=\"glass-effect rounded-3xl p-12 relative overflow-hidden\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-primary/10 to-purple-500/10\"></div>\n            <div className=\"relative z-10\">\n              <h2 className=\"text-4xl font-bold mb-6\">\n                Ready to Create with\n                <span className=\"gradient-text block\">Professional AI?</span>\n              </h2>\n              <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n                Join thousands of creators using LoveAIHub to generate stunning content with the world's most advanced AI models.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Button \n                  className=\"btn-primary text-lg px-8 py-4\"\n                  onClick={() => {\n                    setAuthModalTab(\"signup\");\n                    setShowAuthModal(true);\n                  }}\n                >\n                  Start Creating Free\n                </Button>\n                <Link href=\"/pricing\">\n                  <Button variant=\"outline\" className=\"btn-secondary text-lg px-8 py-4\">\n                    View Pricing\n                  </Button>\n                </Link>\n              </div>\n              \n              <div className=\"mt-8 flex justify-center items-center space-x-8 text-sm text-muted-foreground\">\n                <span>✨ 50 free generations</span>\n                <span>🚀 Instant access</span>\n                <span>💳 No credit card required</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n      \n      <AuthModal\n        isOpen={showAuthModal}\n        onClose={() => setShowAuthModal(false)}\n        defaultTab={authModalTab}\n      />\n    </div>\n  );\n}\n","size_bytes":25939},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pricing.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { \n  CheckCircle, \n  Crown, \n  Zap, \n  Shield, \n  Star,\n  Globe,\n  Headphones,\n  Code,\n  Users,\n  Building,\n  ArrowRight\n} from \"lucide-react\";\n\nconst features = {\n  free: [\n    \"50 AI generations per month\",\n    \"Access to all AI models\",\n    \"Standard image quality\",\n    \"Basic chat functionality\",\n    \"Community support\",\n    \"API access (limited)\",\n  ],\n  premium: [\n    \"Unlimited AI generations\",\n    \"Access to all premium models\",\n    \"HD image quality\",\n    \"Advanced AI chat with tools\",\n    \"Priority processing\",\n    \"Full API access\",\n    \"Priority support\",\n    \"Advanced analytics\",\n    \"Custom model fine-tuning\",\n  ],\n  enterprise: [\n    \"Everything in Premium\",\n    \"Custom model deployment\",\n    \"Dedicated infrastructure\",\n    \"SLA guarantees\",\n    \"Custom integrations\",\n    \"White-label solutions\",\n    \"Dedicated account manager\",\n    \"Custom billing\",\n  ]\n};\n\nconst useCases = [\n  {\n    icon: Users,\n    title: \"Content Creators\",\n    description: \"Generate stunning visuals, videos, and audio content for social media, marketing, and entertainment.\",\n    plan: \"Premium\"\n  },\n  {\n    icon: Code,\n    title: \"Developers\",\n    description: \"Integrate AI capabilities into your applications with our comprehensive APIs and SDKs.\",\n    plan: \"Premium\"\n  },\n  {\n    icon: Building,\n    title: \"Enterprises\",\n    description: \"Scale AI across your organization with custom solutions, dedicated support, and enterprise features.\",\n    plan: \"Enterprise\"\n  }\n];\n\nconst faqs = [\n  {\n    question: \"Can I change plans anytime?\",\n    answer: \"Yes, you can upgrade or downgrade your plan at any time. Changes take effect immediately, and we'll prorate billing accordingly.\"\n  },\n  {\n    question: \"What happens if I exceed my generation limit?\",\n    answer: \"Free users are limited to 50 generations per month. Premium users have unlimited generations. We'll notify you when approaching limits.\"\n  },\n  {\n    question: \"Do you offer refunds?\",\n    answer: \"We offer a 30-day money-back guarantee for all paid plans. No questions asked.\"\n  },\n  {\n    question: \"Is there an API rate limit?\",\n    answer: \"Free plans have limited API access. Premium plans include full API access with higher rate limits. Enterprise plans offer custom limits.\"\n  },\n  {\n    question: \"Can I cancel my subscription?\",\n    answer: \"Yes, you can cancel anytime. Your plan will remain active until the end of your current billing period.\"\n  }\n];\n\nexport default function Pricing() {\n  const { isAuthenticated, user } = useAuth();\n  const [billingPeriod, setBillingPeriod] = useState<\"monthly\" | \"yearly\">(\"monthly\");\n\n  const prices = {\n    premium: {\n      monthly: 5,\n      yearly: 50\n    },\n    enterprise: {\n      monthly: 50,\n      yearly: 500\n    }\n  };\n\n  const yearlyDiscount = billingPeriod === \"yearly\" ? 17 : 0; // ~17% discount for yearly\n\n  const handleSubscribe = (plan: string) => {\n    if (!isAuthenticated) {\n      window.location.href = \"/api/login\";\n      return;\n    }\n    \n    if (plan === \"enterprise\") {\n      // For enterprise, redirect to contact\n      window.open(\"mailto:enterprise@loveaihub.com\", \"_blank\");\n      return;\n    }\n    \n    // For premium, integrate with Razorpay\n    console.log(`Subscribing to ${plan} plan (${billingPeriod})`);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 text-white\">\n      <Navigation />\n      \n      <div className=\"pt-20 pb-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-5xl font-bold mb-6\">\n              <span className=\"gradient-text\">Simple, Transparent Pricing</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto mb-8\">\n              Start free with 50 generations, then upgrade for unlimited access to all AI models\n            </p>\n            \n            {/* Billing Toggle */}\n            <div className=\"flex items-center justify-center space-x-4 mb-8\">\n              <Label htmlFor=\"billing\" className={billingPeriod === \"monthly\" ? \"text-white\" : \"text-muted-foreground\"}>\n                Monthly\n              </Label>\n              <Switch\n                id=\"billing\"\n                checked={billingPeriod === \"yearly\"}\n                onCheckedChange={(checked) => setBillingPeriod(checked ? \"yearly\" : \"monthly\")}\n              />\n              <Label htmlFor=\"billing\" className={billingPeriod === \"yearly\" ? \"text-white\" : \"text-muted-foreground\"}>\n                Yearly\n              </Label>\n              {billingPeriod === \"yearly\" && (\n                <Badge variant=\"secondary\" className=\"bg-green-500/20 text-green-400\">\n                  Save {yearlyDiscount}%\n                </Badge>\n              )}\n            </div>\n          </div>\n\n          {/* Pricing Cards */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-16\">\n            {/* Free Plan */}\n            <Card className=\"glass-effect border-border card-hover\">\n              <CardHeader className=\"text-center pb-8\">\n                <div className=\"w-16 h-16 bg-slate-700 rounded-2xl mb-4 flex items-center justify-center mx-auto\">\n                  <Zap className=\"w-8 h-8 text-muted-foreground\" />\n                </div>\n                <CardTitle className=\"text-2xl mb-2\">Free Starter</CardTitle>\n                <div className=\"text-4xl font-bold mb-2\">$0</div>\n                <p className=\"text-muted-foreground\">Perfect for trying out our platform</p>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-6\">\n                <ul className=\"space-y-4\">\n                  {features.free.map((feature, index) => (\n                    <li key={index} className=\"flex items-center space-x-3\">\n                      <CheckCircle className=\"w-5 h-5 text-green-400 flex-shrink-0\" />\n                      <span className=\"text-sm\">{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n                \n                <Button\n                  onClick={() => handleSubscribe(\"free\")}\n                  variant=\"outline\"\n                  className=\"w-full btn-secondary\"\n                  size=\"lg\"\n                >\n                  {isAuthenticated && user?.subscriptionType === \"free\" ? \"Current Plan\" : \"Get Started Free\"}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Premium Plan */}\n            <Card className=\"glass-effect border-2 border-primary/50 card-hover relative\">\n              <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                <Badge className=\"bg-gradient-to-r from-primary to-purple-500 text-white px-4 py-2\">\n                  Most Popular\n                </Badge>\n              </div>\n              \n              <CardHeader className=\"text-center pb-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-primary to-purple-500 rounded-2xl mb-4 flex items-center justify-center mx-auto\">\n                  <Crown className=\"w-8 h-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-2xl mb-2\">Premium Unlimited</CardTitle>\n                <div className=\"text-4xl font-bold mb-2\">\n                  ${billingPeriod === \"monthly\" ? prices.premium.monthly : Math.round(prices.premium.yearly / 12)}\n                  <span className=\"text-lg font-normal text-muted-foreground\">\n                    /{billingPeriod === \"monthly\" ? \"month\" : \"month\"}\n                  </span>\n                </div>\n                {billingPeriod === \"yearly\" && (\n                  <div className=\"text-sm text-muted-foreground\">\n                    Billed annually (${prices.premium.yearly}/year)\n                  </div>\n                )}\n                <p className=\"text-muted-foreground\">Unlimited everything for creators</p>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-6\">\n                <ul className=\"space-y-4\">\n                  {features.premium.map((feature, index) => (\n                    <li key={index} className=\"flex items-center space-x-3\">\n                      <CheckCircle className=\"w-5 h-5 text-green-400 flex-shrink-0\" />\n                      <span className=\"text-sm font-medium\">{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n                \n                <Button\n                  onClick={() => handleSubscribe(\"premium\")}\n                  className=\"w-full btn-primary\"\n                  size=\"lg\"\n                >\n                  {isAuthenticated && user?.subscriptionType === \"premium\" ? \"Current Plan\" : \"Upgrade to Premium\"}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Enterprise Plan */}\n            <Card className=\"glass-effect border-border card-hover\">\n              <CardHeader className=\"text-center pb-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-purple-500 to-pink-500 rounded-2xl mb-4 flex items-center justify-center mx-auto\">\n                  <Building className=\"w-8 h-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-2xl mb-2\">Enterprise</CardTitle>\n                <div className=\"text-4xl font-bold mb-2\">Custom</div>\n                <p className=\"text-muted-foreground\">For teams and organizations</p>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-6\">\n                <ul className=\"space-y-4\">\n                  {features.enterprise.map((feature, index) => (\n                    <li key={index} className=\"flex items-center space-x-3\">\n                      <CheckCircle className=\"w-5 h-5 text-green-400 flex-shrink-0\" />\n                      <span className=\"text-sm\">{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n                \n                <Button\n                  onClick={() => handleSubscribe(\"enterprise\")}\n                  variant=\"outline\"\n                  className=\"w-full btn-secondary\"\n                  size=\"lg\"\n                >\n                  Contact Sales\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Features Comparison */}\n          <div className=\"mb-16\">\n            <Card className=\"glass-effect border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-center text-2xl\">\n                  Why Choose <span className=\"gradient-text\">LoveAIHub</span>?\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  <div className=\"text-center\">\n                    <div className=\"w-12 h-12 bg-primary/20 rounded-lg mb-4 flex items-center justify-center mx-auto\">\n                      <Star className=\"w-6 h-6 text-primary\" />\n                    </div>\n                    <h3 className=\"font-semibold mb-2\">20+ AI Models</h3>\n                    <p className=\"text-sm text-muted-foreground\">Access the latest models from OpenAI, Anthropic, Google, and more</p>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <div className=\"w-12 h-12 bg-cyan-500/20 rounded-lg mb-4 flex items-center justify-center mx-auto\">\n                      <Shield className=\"w-6 h-6 text-cyan-400\" />\n                    </div>\n                    <h3 className=\"font-semibold mb-2\">Enterprise Security</h3>\n                    <p className=\"text-sm text-muted-foreground\">SOC 2 compliant with end-to-end encryption</p>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <div className=\"w-12 h-12 bg-emerald-500/20 rounded-lg mb-4 flex items-center justify-center mx-auto\">\n                      <Globe className=\"w-6 h-6 text-emerald-400\" />\n                    </div>\n                    <h3 className=\"font-semibold mb-2\">Global Infrastructure</h3>\n                    <p className=\"text-sm text-muted-foreground\">99.9% uptime with worldwide edge locations</p>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <div className=\"w-12 h-12 bg-purple-500/20 rounded-lg mb-4 flex items-center justify-center mx-auto\">\n                      <Headphones className=\"w-6 h-6 text-purple-400\" />\n                    </div>\n                    <h3 className=\"font-semibold mb-2\">24/7 Support</h3>\n                    <p className=\"text-sm text-muted-foreground\">Expert support team ready to help you succeed</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Use Cases */}\n          <div className=\"mb-16\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">\n              Perfect for <span className=\"gradient-text\">Every Use Case</span>\n            </h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              {useCases.map((useCase, index) => (\n                <Card key={index} className=\"glass-effect border-border card-hover\">\n                  <CardContent className=\"p-8 text-center\">\n                    <div className=\"w-16 h-16 bg-gradient-to-r from-primary to-purple-500 rounded-2xl mb-6 flex items-center justify-center mx-auto\">\n                      <useCase.icon className=\"w-8 h-8 text-white\" />\n                    </div>\n                    <h3 className=\"text-xl font-bold mb-4\">{useCase.title}</h3>\n                    <p className=\"text-muted-foreground mb-6\">{useCase.description}</p>\n                    <Badge variant=\"secondary\" className=\"mb-4\">\n                      Recommended: {useCase.plan}\n                    </Badge>\n                    <Button\n                      onClick={() => handleSubscribe(useCase.plan.toLowerCase())}\n                      className=\"w-full btn-primary\"\n                    >\n                      Get Started\n                      <ArrowRight className=\"w-4 h-4 ml-2\" />\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          {/* FAQ Section */}\n          <div className=\"mb-16\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">\n              Frequently Asked <span className=\"gradient-text\">Questions</span>\n            </h2>\n            \n            <div className=\"max-w-3xl mx-auto\">\n              <div className=\"space-y-6\">\n                {faqs.map((faq, index) => (\n                  <Card key={index} className=\"glass-effect border-border\">\n                    <CardContent className=\"p-6\">\n                      <h3 className=\"font-semibold mb-3\">{faq.question}</h3>\n                      <p className=\"text-muted-foreground\">{faq.answer}</p>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* CTA Section */}\n          <div className=\"text-center\">\n            <Card className=\"glass-effect border-border max-w-4xl mx-auto\">\n              <CardContent className=\"p-12\">\n                <h2 className=\"text-3xl font-bold mb-4\">\n                  Ready to Get Started?\n                </h2>\n                <p className=\"text-xl text-muted-foreground mb-8\">\n                  Join thousands of creators and developers using LoveAIHub to build amazing AI-powered applications.\n                </p>\n                <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                  <Button\n                    onClick={() => handleSubscribe(\"free\")}\n                    variant=\"outline\"\n                    className=\"btn-secondary\"\n                    size=\"lg\"\n                  >\n                    Start Free Trial\n                  </Button>\n                  <Button\n                    onClick={() => handleSubscribe(\"premium\")}\n                    className=\"btn-primary\"\n                    size=\"lg\"\n                  >\n                    Go Premium Now\n                  </Button>\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-4\">\n                  No credit card required • Cancel anytime • 30-day money-back guarantee\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":17051},"client/src/pages/video-generation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { \n  Video, \n  Play, \n  Download, \n  Clock, \n  Loader2,\n  Copy,\n  ExternalLink,\n  Film\n} from \"lucide-react\";\n\nconst videoModels = [\n  { id: \"provider-6/wan-2.1\", name: \"WAN-2.1\", provider: \"Provider 6\", description: \"High-quality video generation\" },\n];\n\nconst aspectRatios = [\n  { id: \"16:9\", name: \"16:9 (Landscape)\" },\n  { id: \"9:16\", name: \"9:16 (Portrait)\" },\n  { id: \"1:1\", name: \"1:1 (Square)\" },\n  { id: \"4:3\", name: \"4:3 (Standard)\" },\n];\n\nconst durations = [\n  { id: \"3\", name: \"3 seconds\" },\n  { id: \"5\", name: \"5 seconds\" },\n  { id: \"10\", name: \"10 seconds\" },\n  { id: \"15\", name: \"15 seconds\" },\n];\n\nexport default function VideoGeneration() {\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [prompt, setPrompt] = useState(\"\");\n  const [selectedModel, setSelectedModel] = useState(videoModels[0].id);\n  const [selectedAspectRatio, setSelectedAspectRatio] = useState(\"16:9\");\n  const [selectedDuration, setSelectedDuration] = useState(\"5\");\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const generateVideoMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/generate/video\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Video Generation Started\",\n        description: \"Your video is being generated. This may take a few minutes.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/generations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Generation Failed\",\n        description: error.message || \"Failed to generate video. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const { data: generations, isLoading: generationsLoading } = useQuery({\n    queryKey: [\"/api/generations\"],\n    enabled: isAuthenticated,\n  });\n\n  const handleGenerate = () => {\n    if (!prompt.trim()) {\n      toast({\n        title: \"Prompt Required\",\n        description: \"Please enter a prompt to generate a video.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (user?.subscriptionType === \"free\" && user?.generationsUsed >= user?.generationsLimit) {\n      toast({\n        title: \"Generation Limit Reached\",\n        description: \"You've reached your free tier limit. Please upgrade to premium for unlimited generations.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateVideoMutation.mutate({\n      model: selectedModel,\n      prompt,\n      duration: parseInt(selectedDuration),\n      aspect_ratio: selectedAspectRatio,\n    });\n  };\n\n  const copyPrompt = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied\",\n      description: \"Prompt copied to clipboard.\",\n    });\n  };\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 flex items-center justify-center\">\n        <div className=\"loading-shimmer w-32 h-32 rounded-xl\"></div>\n      </div>\n    );\n  }\n\n  const videoGenerations = generations?.filter((g: any) => g.type === \"video\") || [];\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 text-white\">\n      <Navigation />\n      \n      <div className=\"pt-20 pb-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold mb-4\">\n              <span className=\"gradient-text\">Video Generation Lab</span>\n            </h1>\n            <p className=\"text-muted-foreground text-lg\">\n              Transform text prompts into professional videos with AI\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Generation Form */}\n            <div className=\"lg:col-span-2\">\n              <Card className=\"glass-effect border-border\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Film className=\"w-6 h-6\" />\n                    <span>Generate Video</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {/* Prompt Input */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"prompt\">Video Description</Label>\n                    <Textarea\n                      id=\"prompt\"\n                      placeholder=\"Describe the video you want to generate... Be specific about actions, scenes, and style.\"\n                      value={prompt}\n                      onChange={(e) => setPrompt(e.target.value)}\n                      className=\"min-h-[120px] bg-slate-800/50 border-slate-700\"\n                    />\n                    <p className=\"text-xs text-muted-foreground\">\n                      Tip: Include details about camera movements, lighting, and specific actions for better results.\n                    </p>\n                  </div>\n\n                  {/* Model Selection */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"model\">AI Model</Label>\n                    <Select value={selectedModel} onValueChange={setSelectedModel}>\n                      <SelectTrigger className=\"bg-slate-800/50 border-slate-700\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {videoModels.map((model) => (\n                          <SelectItem key={model.id} value={model.id}>\n                            {model.name} - {model.description}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Video Options */}\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"duration\">Duration</Label>\n                      <Select value={selectedDuration} onValueChange={setSelectedDuration}>\n                        <SelectTrigger className=\"bg-slate-800/50 border-slate-700\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {durations.map((duration) => (\n                            <SelectItem key={duration.id} value={duration.id}>\n                              {duration.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"aspect\">Aspect Ratio</Label>\n                      <Select value={selectedAspectRatio} onValueChange={setSelectedAspectRatio}>\n                        <SelectTrigger className=\"bg-slate-800/50 border-slate-700\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {aspectRatios.map((ratio) => (\n                            <SelectItem key={ratio.id} value={ratio.id}>\n                              {ratio.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  {/* Generate Button */}\n                  <Button\n                    onClick={handleGenerate}\n                    disabled={generateVideoMutation.isPending || !prompt.trim()}\n                    className=\"btn-primary w-full\"\n                    size=\"lg\"\n                  >\n                    {generateVideoMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                        Generating Video...\n                      </>\n                    ) : (\n                      <>\n                        <Film className=\"w-5 h-5 mr-2\" />\n                        Generate Video\n                      </>\n                    )}\n                  </Button>\n\n                  {/* Note about video generation time */}\n                  <div className=\"p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg\">\n                    <div className=\"flex items-start space-x-3\">\n                      <Clock className=\"w-5 h-5 text-blue-400 mt-0.5\" />\n                      <div>\n                        <p className=\"text-sm font-medium text-blue-400\">Video Generation Time</p>\n                        <p className=\"text-xs text-blue-300\">\n                          Video generation typically takes 2-5 minutes depending on duration and complexity. \n                          You'll receive a notification when your video is ready.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Usage Indicator */}\n                  {user?.subscriptionType === \"free\" && (\n                    <div className=\"mt-4 p-4 bg-slate-800/50 rounded-lg\">\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <span className=\"text-sm text-muted-foreground\">Free Plan Usage</span>\n                        <span className=\"text-sm font-medium\">\n                          {user.generationsUsed} / {user.generationsLimit}\n                        </span>\n                      </div>\n                      <Progress value={(user.generationsUsed / user.generationsLimit) * 100} className=\"h-2\" />\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Generations */}\n            <div className=\"lg:col-span-1\">\n              <Card className=\"glass-effect border-border\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Video className=\"w-6 h-6\" />\n                    <span>Recent Videos</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {generationsLoading ? (\n                    <div className=\"space-y-4\">\n                      {[...Array(3)].map((_, i) => (\n                        <div key={i} className=\"loading-shimmer h-32 rounded-lg\"></div>\n                      ))}\n                    </div>\n                  ) : videoGenerations.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <Video className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground\">No videos generated yet</p>\n                      <p className=\"text-sm text-muted-foreground\">Your generated videos will appear here</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {videoGenerations.slice(0, 5).map((generation: any) => (\n                        <div key={generation.id} className=\"glass-effect rounded-lg p-4\">\n                          <div className=\"flex items-start space-x-3\">\n                            <div className=\"w-16 h-16 bg-slate-700 rounded-lg flex items-center justify-center\">\n                              {generation.result?.data?.[0]?.url ? (\n                                <video\n                                  className=\"w-full h-full object-cover rounded-lg\"\n                                  poster=\"/placeholder-video.jpg\"\n                                >\n                                  <source src={generation.result.data[0].url} type=\"video/mp4\" />\n                                </video>\n                              ) : (\n                                <Video className=\"w-8 h-8 text-muted-foreground\" />\n                              )}\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <p className=\"text-sm font-medium truncate\">\n                                {generation.model.split('/')[1] || generation.model}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground truncate\">\n                                {generation.prompt}\n                              </p>\n                              <div className=\"flex items-center space-x-1 mt-1\">\n                                <span className={`text-xs px-2 py-1 rounded-full ${\n                                  generation.status === \"completed\" \n                                    ? \"bg-green-500/20 text-green-400\" \n                                    : generation.status === \"failed\"\n                                    ? \"bg-red-500/20 text-red-400\"\n                                    : \"bg-yellow-500/20 text-yellow-400\"\n                                }`}>\n                                  {generation.status}\n                                </span>\n                              </div>\n                              <div className=\"flex items-center space-x-2 mt-2\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={() => copyPrompt(generation.prompt)}\n                                  className=\"h-6 px-2\"\n                                >\n                                  <Copy className=\"w-3 h-3\" />\n                                </Button>\n                                {generation.result?.data?.[0]?.url && (\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                    onClick={() => window.open(generation.result.data[0].url, '_blank')}\n                                    className=\"h-6 px-2\"\n                                  >\n                                    <Play className=\"w-3 h-3\" />\n                                  </Button>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":16136},"client/src/components/3d/floating-elements.tsx":{"content":"export default function FloatingElements() {\n  return (\n    <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n      {/* Floating Geometric Shapes */}\n      <div className=\"absolute top-20 left-10 w-20 h-20 bg-primary/20 rounded-full blur-xl animate-float\" />\n      <div \n        className=\"absolute top-40 right-20 w-32 h-32 bg-purple-500/20 rounded-full blur-xl animate-float\" \n        style={{ animationDelay: '-2s' }}\n      />\n      <div \n        className=\"absolute bottom-20 left-1/4 w-16 h-16 bg-cyan-500/20 rounded-full blur-xl animate-float\" \n        style={{ animationDelay: '-4s' }}\n      />\n      <div \n        className=\"absolute top-1/3 left-1/3 w-24 h-24 bg-emerald-500/10 rounded-full blur-2xl animate-float\" \n        style={{ animationDelay: '-1s' }}\n      />\n      <div \n        className=\"absolute bottom-1/3 right-1/3 w-28 h-28 bg-orange-500/10 rounded-full blur-2xl animate-float\" \n        style={{ animationDelay: '-3s' }}\n      />\n\n      {/* Neural Network Lines */}\n      <div className=\"neural-lines opacity-30\" />\n\n      {/* Matrix Rain Effect */}\n      <div className=\"matrix-rain opacity-20\" />\n\n      {/* Floating AI Particles */}\n      <div className=\"absolute top-1/4 right-1/4 w-2 h-2 bg-primary rounded-full animate-float opacity-60\" />\n      <div \n        className=\"absolute bottom-1/4 left-1/3 w-1 h-1 bg-purple-500 rounded-full animate-float opacity-40\" \n        style={{ animationDelay: '-1.5s' }}\n      />\n      <div \n        className=\"absolute top-3/4 right-1/2 w-3 h-3 bg-cyan-500 rounded-full animate-float opacity-50\" \n        style={{ animationDelay: '-2.5s' }}\n      />\n\n      {/* Gradient Orbs */}\n      <div className=\"absolute top-10 right-10 w-40 h-40 bg-gradient-to-r from-primary/10 to-purple-500/10 rounded-full blur-3xl animate-float\" />\n      <div \n        className=\"absolute bottom-10 left-10 w-36 h-36 bg-gradient-to-r from-cyan-500/10 to-emerald-500/10 rounded-full blur-3xl animate-float\" \n        style={{ animationDelay: '-3s' }}\n      />\n\n      {/* Holographic Grid Lines */}\n      <div className=\"absolute inset-0 holographic opacity-10\" />\n\n      {/* Particle Background */}\n      <div className=\"particles-bg opacity-40\" />\n    </div>\n  );\n}\n","size_bytes":2228},"client/src/components/ai/audio-tools.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Volume2, \n  FileAudio, \n  Mic,\n  Upload,\n  Download, \n  Play,\n  Pause,\n  Loader2,\n  Settings\n} from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface AudioToolsProps {\n  type: 'tts' | 'transcription';\n  selectedModel: string;\n  onModelChange: (model: string) => void;\n  models: Array<{\n    id: string;\n    name: string;\n    provider: string;\n    category: string;\n    description: string;\n    badge: string;\n    badgeColor: string;\n    voices?: string[];\n    languages?: string[];\n  }>;\n}\n\nexport default function AudioTools({ type, selectedModel, onModelChange, models }: AudioToolsProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  // TTS States\n  const [text, setText] = useState(\"\");\n  const [selectedVoice, setSelectedVoice] = useState(\"alloy\");\n  const [generatedAudio, setGeneratedAudio] = useState<string | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  // Transcription States\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [selectedLanguage, setSelectedLanguage] = useState(\"auto\");\n  const [transcriptionResult, setTranscriptionResult] = useState<string>(\"\");\n\n  const currentModel = models.find(m => m.id === selectedModel);\n\n  // TTS Mutation\n  const ttsMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/audio/generate\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.result?.url) {\n        setGeneratedAudio(data.result.url);\n      }\n      toast({\n        title: \"Audio generated successfully!\",\n        description: \"Your text has been converted to speech\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/generations\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Generation failed\",\n        description: error.message || \"Failed to generate audio\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Transcription Mutation\n  const transcriptionMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const formData = new FormData();\n      formData.append('file', data.file);\n      formData.append('model', data.model);\n      if (data.language) {\n        formData.append('language', data.language);\n      }\n\n      const response = await fetch('/api/ai/audio/transcribe', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`${response.status}: ${text}`);\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setTranscriptionResult(data.result?.text || data.text || \"No transcription available\");\n      toast({\n        title: \"Transcription completed!\",\n        description: \"Your audio has been transcribed successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/generations\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Transcription failed\",\n        description: error.message || \"Failed to transcribe audio\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTTSGenerate = () => {\n    if (!text.trim()) {\n      toast({\n        title: \"Text required\",\n        description: \"Please enter text to convert to speech\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (user?.subscriptionTier === 'free' && user.generationsUsed >= user.generationsLimit) {\n      toast({\n        title: \"Generation limit reached\",\n        description: \"Upgrade to Premium for unlimited generations\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    ttsMutation.mutate({\n      model: selectedModel,\n      input: text.trim(),\n      voice: selectedVoice,\n    });\n  };\n\n  const handleTranscribe = () => {\n    if (!selectedFile) {\n      toast({\n        title: \"File required\",\n        description: \"Please select an audio file to transcribe\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (user?.subscriptionTier === 'free' && user.generationsUsed >= user.generationsLimit) {\n      toast({\n        title: \"Generation limit reached\",\n        description: \"Upgrade to Premium for unlimited transcriptions\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    transcriptionMutation.mutate({\n      model: selectedModel,\n      file: selectedFile,\n      language: selectedLanguage !== 'auto' ? selectedLanguage : undefined,\n    });\n  };\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      // Check file size (max 25MB)\n      if (file.size > 25 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: \"Please select a file smaller than 25MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      // Check file type\n      const validTypes = ['audio/mpeg', 'audio/wav', 'audio/m4a', 'audio/flac', 'audio/ogg'];\n      if (!validTypes.includes(file.type)) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please select an MP3, WAV, M4A, FLAC, or OGG file\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      setSelectedFile(file);\n    }\n  };\n\n  const togglePlayback = () => {\n    if (!audioRef.current) return;\n    \n    if (isPlaying) {\n      audioRef.current.pause();\n    } else {\n      audioRef.current.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  const downloadAudio = (url: string, filename: string) => {\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const copyTranscription = () => {\n    navigator.clipboard.writeText(transcriptionResult);\n    toast({\n      title: \"Copied to clipboard\",\n      description: \"Transcription copied successfully\",\n    });\n  };\n\n  if (type === 'tts') {\n    return (\n      <div className=\"space-y-6\">\n        {/* TTS Form */}\n        <Card className=\"glass-effect\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Volume2 className=\"w-5 h-5\" />\n              Text-to-Speech\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Model Selection */}\n            <div className=\"space-y-2\">\n              <Label>TTS Model</Label>\n              <Select value={selectedModel} onValueChange={onModelChange}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {models.map((model) => (\n                    <SelectItem key={model.id} value={model.id}>\n                      <div className=\"flex items-center justify-between w-full\">\n                        <span>{model.name}</span>\n                        <Badge className={`ml-2 ${model.badgeColor}`}>\n                          {model.badge}\n                        </Badge>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Voice Selection */}\n            {currentModel?.voices && (\n              <div className=\"space-y-2\">\n                <Label>Voice</Label>\n                <Select value={selectedVoice} onValueChange={setSelectedVoice}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {currentModel.voices.map((voice) => (\n                      <SelectItem key={voice} value={voice}>\n                        {voice.charAt(0).toUpperCase() + voice.slice(1)}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            {/* Text Input */}\n            <div className=\"space-y-2\">\n              <Label>Text to Convert</Label>\n              <Textarea\n                placeholder=\"Enter the text you want to convert to speech...\"\n                value={text}\n                onChange={(e) => setText(e.target.value)}\n                rows={6}\n                className=\"resize-none\"\n              />\n              <p className=\"text-sm text-muted-foreground\">\n                Character count: {text.length} (max 4000)\n              </p>\n            </div>\n\n            {/* Generate Button */}\n            <Button\n              onClick={handleTTSGenerate}\n              disabled={ttsMutation.isPending || !text.trim()}\n              className=\"w-full btn-depth\"\n              size=\"lg\"\n            >\n              {ttsMutation.isPending ? (\n                <>\n                  <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                  Generating Audio...\n                </>\n              ) : (\n                <>\n                  <Volume2 className=\"w-5 h-5 mr-2\" />\n                  Generate Speech\n                </>\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Generated Audio */}\n        {generatedAudio && (\n          <Card className=\"glass-effect\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileAudio className=\"w-5 h-5\" />\n                Generated Audio\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-4\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={togglePlayback}\n                  >\n                    {isPlaying ? (\n                      <Pause className=\"w-4 h-4\" />\n                    ) : (\n                      <Play className=\"w-4 h-4\" />\n                    )}\n                  </Button>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => downloadAudio(generatedAudio, 'generated-speech.mp3')}\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Download\n                  </Button>\n                </div>\n\n                <audio\n                  ref={audioRef}\n                  src={generatedAudio}\n                  onEnded={() => setIsPlaying(false)}\n                  onPlay={() => setIsPlaying(true)}\n                  onPause={() => setIsPlaying(false)}\n                  controls\n                  className=\"w-full\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    );\n  }\n\n  // Transcription UI\n  return (\n    <div className=\"space-y-6\">\n      {/* Transcription Form */}\n      <Card className=\"glass-effect\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileAudio className=\"w-5 h-5\" />\n            Audio Transcription\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Model Selection */}\n          <div className=\"space-y-2\">\n            <Label>Transcription Model</Label>\n            <Select value={selectedModel} onValueChange={onModelChange}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {models.map((model) => (\n                  <SelectItem key={model.id} value={model.id}>\n                    <div className=\"flex items-center justify-between w-full\">\n                      <span>{model.name}</span>\n                      <Badge className={`ml-2 ${model.badgeColor}`}>\n                        {model.badge}\n                      </Badge>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Language Selection */}\n          {currentModel?.languages && (\n            <div className=\"space-y-2\">\n              <Label>Language</Label>\n              <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"auto\">Auto-detect</SelectItem>\n                  {currentModel.languages.filter(lang => lang !== 'auto').map((language) => (\n                    <SelectItem key={language} value={language}>\n                      {language.toUpperCase()}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n\n          {/* File Upload */}\n          <div className=\"space-y-2\">\n            <Label>Audio File</Label>\n            <div\n              className=\"border-2 border-dashed border-border rounded-lg p-8 text-center cursor-pointer hover:border-primary transition-colors\"\n              onClick={() => fileInputRef.current?.click()}\n            >\n              <Upload className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n              {selectedFile ? (\n                <div>\n                  <p className=\"font-medium\">{selectedFile.name}</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {(selectedFile.size / (1024 * 1024)).toFixed(2)} MB\n                  </p>\n                </div>\n              ) : (\n                <div>\n                  <p className=\"font-medium mb-2\">Click to upload audio file</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    MP3, WAV, M4A, FLAC, OGG (max 25MB)\n                  </p>\n                </div>\n              )}\n            </div>\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\"audio/*\"\n              onChange={handleFileSelect}\n              className=\"hidden\"\n            />\n          </div>\n\n          {/* Transcribe Button */}\n          <Button\n            onClick={handleTranscribe}\n            disabled={transcriptionMutation.isPending || !selectedFile}\n            className=\"w-full btn-depth\"\n            size=\"lg\"\n          >\n            {transcriptionMutation.isPending ? (\n              <>\n                <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                Transcribing...\n              </>\n            ) : (\n              <>\n                <Mic className=\"w-5 h-5 mr-2\" />\n                Transcribe Audio\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Transcription Result */}\n      {transcriptionResult && (\n        <Card className=\"glass-effect\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileAudio className=\"w-5 h-5\" />\n                Transcription Result\n              </CardTitle>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={copyTranscription}\n              >\n                Copy Text\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"bg-muted p-4 rounded-lg\">\n              <p className=\"whitespace-pre-wrap\">{transcriptionResult}</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":17043},"client/src/components/ai/chat-interface.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  MessageCircle, \n  Send, \n  Bot,\n  User,\n  Loader2,\n  Trash2,\n  Copy,\n  RotateCcw,\n  Settings\n} from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface Message {\n  id: string;\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n  model?: string;\n}\n\ninterface ChatInterfaceProps {\n  selectedModel: string;\n  onModelChange: (model: string) => void;\n  models: Array<{\n    id: string;\n    name: string;\n    provider: string;\n    category: string;\n    description: string;\n    badge: string;\n    badgeColor: string;\n    capabilities: string[];\n  }>;\n  tools: Array<{\n    id: string;\n    name: string;\n    description: string;\n    icon: React.ReactNode;\n    enabled: boolean;\n  }>;\n  websocket: WebSocket | null;\n}\n\nexport default function ChatInterface({ \n  selectedModel, \n  onModelChange, \n  models, \n  tools, \n  websocket \n}: ChatInterfaceProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      role: 'assistant',\n      content: 'Hello! I\\'m your AI assistant. I can help you with a wide range of tasks including answering questions, creative writing, analysis, and more. How can I assist you today?',\n      timestamp: new Date(),\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // WebSocket message handling\n  useEffect(() => {\n    if (websocket) {\n      websocket.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        if (data.type === 'chat_response') {\n          setMessages(prev => prev.map(msg => \n            msg.id === data.messageId \n              ? { ...msg, content: data.content }\n              : msg\n          ));\n          setIsTyping(false);\n        }\n      };\n    }\n  }, [websocket]);\n\n  const chatMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/chat\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      const assistantMessage: Message = {\n        id: Date.now().toString(),\n        role: 'assistant',\n        content: data.result.choices[0]?.message?.content || 'No response generated',\n        timestamp: new Date(),\n        model: selectedModel,\n      };\n      \n      setMessages(prev => [...prev, assistantMessage]);\n      setIsTyping(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/generations\"] });\n    },\n    onError: (error) => {\n      setIsTyping(false);\n      \n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Chat failed\",\n        description: error.message || \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim()) return;\n\n    if (user?.subscriptionTier === 'free' && user.generationsUsed >= user.generationsLimit) {\n      toast({\n        title: \"Generation limit reached\",\n        description: \"Upgrade to Premium for unlimited chat\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: inputMessage.trim(),\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage(\"\");\n    setIsTyping(true);\n\n    const chatMessages = [...messages, userMessage].map(msg => ({\n      role: msg.role,\n      content: msg.content\n    }));\n\n    chatMutation.mutate({\n      model: selectedModel,\n      messages: chatMessages,\n      temperature: 0.7,\n      max_tokens: 2000,\n    });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const copyMessage = (content: string) => {\n    navigator.clipboard.writeText(content);\n    toast({\n      title: \"Copied to clipboard\",\n      description: \"Message copied successfully\",\n    });\n  };\n\n  const clearChat = () => {\n    setMessages([{\n      id: '1',\n      role: 'assistant',\n      content: 'Hello! I\\'m your AI assistant. How can I help you today?',\n      timestamp: new Date(),\n    }]);\n  };\n\n  const currentModel = models.find(m => m.id === selectedModel);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Chat Header */}\n      <Card className=\"glass-effect\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <MessageCircle className=\"w-5 h-5\" />\n              AI Chat\n            </CardTitle>\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={clearChat}>\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Clear\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <Settings className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Model Selection */}\n          <div className=\"flex items-center gap-4 mb-4\">\n            <div className=\"flex-1\">\n              <Select value={selectedModel} onValueChange={onModelChange}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {models.map((model) => (\n                    <SelectItem key={model.id} value={model.id}>\n                      <div className=\"flex items-center justify-between w-full\">\n                        <span>{model.name}</span>\n                        <Badge className={`ml-2 ${model.badgeColor}`}>\n                          {model.badge}\n                        </Badge>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            {currentModel && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {currentModel.category}\n              </Badge>\n            )}\n          </div>\n\n          {/* Available Tools */}\n          <div className=\"flex flex-wrap gap-2\">\n            {tools.map((tool) => (\n              <Badge\n                key={tool.id}\n                variant={tool.enabled ? \"default\" : \"secondary\"}\n                className={`text-xs ${\n                  tool.enabled \n                    ? \"bg-green-500/20 text-green-400\" \n                    : \"bg-gray-500/20 text-gray-400\"\n                }`}\n              >\n                {tool.icon}\n                <span className=\"ml-1\">{tool.name}</span>\n              </Badge>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Chat Messages */}\n      <Card className=\"glass-effect\">\n        <CardContent className=\"p-0\">\n          <div className=\"h-96 overflow-y-auto p-4 space-y-4\">\n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex items-start gap-3 ${\n                  message.role === 'user' ? 'flex-row-reverse' : ''\n                }`}\n              >\n                <Avatar className=\"w-8 h-8 flex-shrink-0\">\n                  <AvatarFallback className={\n                    message.role === 'user' \n                      ? 'bg-primary text-primary-foreground' \n                      : 'bg-purple-500 text-white'\n                  }>\n                    {message.role === 'user' ? (\n                      <User className=\"w-4 h-4\" />\n                    ) : (\n                      <Bot className=\"w-4 h-4\" />\n                    )}\n                  </AvatarFallback>\n                </Avatar>\n                \n                <div className={`flex-1 max-w-[80%] ${\n                  message.role === 'user' ? 'text-right' : ''\n                }`}>\n                  <div className={`p-3 rounded-lg ${\n                    message.role === 'user'\n                      ? 'bg-primary text-primary-foreground ml-auto'\n                      : 'bg-muted'\n                  }`}>\n                    <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n                  </div>\n                  \n                  <div className={`flex items-center gap-2 mt-1 text-xs text-muted-foreground ${\n                    message.role === 'user' ? 'justify-end' : ''\n                  }`}>\n                    <span>{message.timestamp.toLocaleTimeString()}</span>\n                    {message.model && (\n                      <span>• {models.find(m => m.id === message.model)?.name}</span>\n                    )}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"h-auto p-1\"\n                      onClick={() => copyMessage(message.content)}\n                    >\n                      <Copy className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n            \n            {/* Typing Indicator */}\n            {isTyping && (\n              <div className=\"flex items-start gap-3\">\n                <Avatar className=\"w-8 h-8\">\n                  <AvatarFallback className=\"bg-purple-500 text-white\">\n                    <Bot className=\"w-4 h-4\" />\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"bg-muted p-3 rounded-lg\">\n                  <div className=\"flex items-center gap-1\">\n                    <div className=\"flex space-x-1\">\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\"></div>\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                    </div>\n                    <span className=\"text-xs text-muted-foreground ml-2\">AI is thinking...</span>\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            <div ref={messagesEndRef} />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Message Input */}\n      <Card className=\"glass-effect\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-end gap-2\">\n            <div className=\"flex-1\">\n              <Input\n                placeholder=\"Type your message... (Press Enter to send, Shift+Enter for new line)\"\n                value={inputMessage}\n                onChange={(e) => setInputMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                disabled={chatMutation.isPending}\n                className=\"min-h-[40px] resize-none\"\n              />\n            </div>\n            <Button\n              onClick={handleSendMessage}\n              disabled={chatMutation.isPending || !inputMessage.trim()}\n              className=\"btn-depth\"\n            >\n              {chatMutation.isPending ? (\n                <Loader2 className=\"w-4 h-4 animate-spin\" />\n              ) : (\n                <Send className=\"w-4 h-4\" />\n              )}\n            </Button>\n          </div>\n          \n          <div className=\"flex items-center justify-between mt-2 text-xs text-muted-foreground\">\n            <div className=\"flex items-center gap-4\">\n              <span>Model: {currentModel?.name}</span>\n              {websocket && (\n                <Badge variant=\"secondary\" className=\"bg-green-500/20 text-green-400\">\n                  Connected\n                </Badge>\n              )}\n            </div>\n            <span>\n              {user?.generationsUsed}/{user?.generationsLimit === -1 ? '∞' : user?.generationsLimit} used\n            </span>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13124},"client/src/components/ai/image-generator.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { \n  Sparkles, \n  Wand2, \n  Download, \n  Loader2,\n  Settings,\n  Image as ImageIcon,\n  Palette\n} from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface ImageGeneratorProps {\n  selectedModel: string;\n  onModelChange: (model: string) => void;\n  models: Array<{\n    id: string;\n    name: string;\n    provider: string;\n    category: string;\n    description: string;\n    badge: string;\n    badgeColor: string;\n  }>;\n}\n\nexport default function ImageGenerator({ selectedModel, onModelChange, models }: ImageGeneratorProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [prompt, setPrompt] = useState(\"\");\n  const [enhancePrompt, setEnhancePrompt] = useState(true);\n  const [size, setSize] = useState(\"1024x1024\");\n  const [quality, setQuality] = useState(\"standard\");\n  const [style, setStyle] = useState(\"vivid\");\n  const [numberOfImages, setNumberOfImages] = useState([1]);\n  const [generatedImages, setGeneratedImages] = useState<any[]>([]);\n\n  const generateImageMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/image/generate\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setGeneratedImages(prev => [data, ...prev]);\n      toast({\n        title: \"Image generated successfully!\",\n        description: data.enhancedPrompt \n          ? \"Prompt was enhanced for better results\" \n          : \"Image created with your prompt\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/generations\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Generation failed\",\n        description: error.message || \"Failed to generate image\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGenerate = () => {\n    if (!prompt.trim()) {\n      toast({\n        title: \"Prompt required\",\n        description: \"Please enter a description for your image\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (user?.subscriptionTier === 'free' && user.generationsUsed >= user.generationsLimit) {\n      toast({\n        title: \"Generation limit reached\",\n        description: \"Upgrade to Premium for unlimited generations\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateImageMutation.mutate({\n      model: selectedModel,\n      prompt: prompt.trim(),\n      enhance: enhancePrompt,\n      n: numberOfImages[0],\n      size,\n      quality,\n      style,\n    });\n  };\n\n  const downloadImage = (imageUrl: string, filename: string) => {\n    const link = document.createElement('a');\n    link.href = imageUrl;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const sizes = [\n    { value: \"1024x1024\", label: \"1024×1024 (Square)\" },\n    { value: \"1792x1024\", label: \"1792×1024 (Landscape)\" },\n    { value: \"1024x1792\", label: \"1024×1792 (Portrait)\" },\n  ];\n\n  const qualities = [\n    { value: \"standard\", label: \"Standard Quality\" },\n    { value: \"hd\", label: \"HD Quality\" },\n  ];\n\n  const styles = [\n    { value: \"vivid\", label: \"Vivid (Dramatic)\" },\n    { value: \"natural\", label: \"Natural (Realistic)\" },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Generation Form */}\n      <Card className=\"glass-effect\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Sparkles className=\"w-5 h-5\" />\n            Generate Image\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Model Selection */}\n          <div className=\"space-y-2\">\n            <Label>AI Model</Label>\n            <Select value={selectedModel} onValueChange={onModelChange}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {models.map((model) => (\n                  <SelectItem key={model.id} value={model.id}>\n                    <div className=\"flex items-center justify-between w-full\">\n                      <span>{model.name}</span>\n                      <Badge className={`ml-2 ${model.badgeColor}`}>\n                        {model.badge}\n                      </Badge>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Prompt Input */}\n          <div className=\"space-y-2\">\n            <Label>Prompt</Label>\n            <Textarea\n              placeholder=\"Describe the image you want to create...\"\n              value={prompt}\n              onChange={(e) => setPrompt(e.target.value)}\n              rows={4}\n              className=\"resize-none\"\n            />\n          </div>\n\n          {/* Prompt Enhancement */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label>AI Prompt Enhancement</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Automatically improve your prompt for better results\n              </p>\n            </div>\n            <Switch\n              checked={enhancePrompt}\n              onCheckedChange={setEnhancePrompt}\n            />\n          </div>\n\n          {/* Advanced Settings */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {/* Image Size */}\n            <div className=\"space-y-2\">\n              <Label>Image Size</Label>\n              <Select value={size} onValueChange={setSize}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {sizes.map((sizeOption) => (\n                    <SelectItem key={sizeOption.value} value={sizeOption.value}>\n                      {sizeOption.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Quality */}\n            <div className=\"space-y-2\">\n              <Label>Quality</Label>\n              <Select value={quality} onValueChange={setQuality}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {qualities.map((qualityOption) => (\n                    <SelectItem key={qualityOption.value} value={qualityOption.value}>\n                      {qualityOption.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Style */}\n            <div className=\"space-y-2\">\n              <Label>Style</Label>\n              <Select value={style} onValueChange={setStyle}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {styles.map((styleOption) => (\n                    <SelectItem key={styleOption.value} value={styleOption.value}>\n                      {styleOption.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Number of Images */}\n            <div className=\"space-y-2\">\n              <Label>Number of Images: {numberOfImages[0]}</Label>\n              <Slider\n                value={numberOfImages}\n                onValueChange={setNumberOfImages}\n                max={4}\n                min={1}\n                step={1}\n                className=\"w-full\"\n              />\n            </div>\n          </div>\n\n          {/* Generate Button */}\n          <Button\n            onClick={handleGenerate}\n            disabled={generateImageMutation.isPending || !prompt.trim()}\n            className=\"w-full btn-depth\"\n            size=\"lg\"\n          >\n            {generateImageMutation.isPending ? (\n              <>\n                <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                Generating...\n              </>\n            ) : (\n              <>\n                <Wand2 className=\"w-5 h-5 mr-2\" />\n                Generate Image\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Generated Images */}\n      {generatedImages.length > 0 && (\n        <Card className=\"glass-effect\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <ImageIcon className=\"w-5 h-5\" />\n              Generated Images\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {generatedImages.map((imageData, index) => (\n                <div key={index} className=\"space-y-4\">\n                  {imageData.result?.data?.map((image: any, imgIndex: number) => (\n                    <div key={imgIndex} className=\"relative group\">\n                      <div className=\"aspect-square bg-muted rounded-lg overflow-hidden\">\n                        {image.url ? (\n                          <img\n                            src={image.url}\n                            alt={`Generated image ${imgIndex + 1}`}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        ) : (\n                          <div className=\"w-full h-full flex items-center justify-center\">\n                            <ImageIcon className=\"w-12 h-12 text-muted-foreground\" />\n                          </div>\n                        )}\n                      </div>\n                      \n                      {/* Image Actions */}\n                      <div className=\"absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center gap-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          onClick={() => downloadImage(image.url, `generated-${Date.now()}.png`)}\n                        >\n                          <Download className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                      \n                      {/* Enhanced Prompt Display */}\n                      {imageData.enhancedPrompt && (\n                        <div className=\"mt-2 p-3 bg-muted rounded-lg\">\n                          <p className=\"text-sm font-medium mb-1\">Enhanced Prompt:</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {imageData.enhancedPrompt}\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Empty State */}\n      {generatedImages.length === 0 && (\n        <Card className=\"glass-effect\">\n          <CardContent className=\"py-12 text-center\">\n            <Palette className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Ready to Create</h3>\n            <p className=\"text-muted-foreground\">\n              Enter a prompt above and generate your first AI image\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":12483},"client/src/components/ai/video-generator.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Video, \n  Play, \n  Download, \n  Loader2,\n  Clock,\n  Film\n} from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface VideoGeneratorProps {\n  selectedModel: string;\n  onModelChange: (model: string) => void;\n  models: Array<{\n    id: string;\n    name: string;\n    provider: string;\n    category: string;\n    description: string;\n    badge: string;\n    badgeColor: string;\n    maxDuration: string;\n    resolution: string;\n  }>;\n}\n\nexport default function VideoGenerator({ selectedModel, onModelChange, models }: VideoGeneratorProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [prompt, setPrompt] = useState(\"\");\n  const [generatedVideos, setGeneratedVideos] = useState<any[]>([]);\n\n  const generateVideoMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/video/generate\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setGeneratedVideos(prev => [data, ...prev]);\n      toast({\n        title: \"Video generation started!\",\n        description: \"Your video is being processed. This may take a few minutes.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/generations\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Generation failed\",\n        description: error.message || \"Failed to generate video\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGenerate = () => {\n    if (!prompt.trim()) {\n      toast({\n        title: \"Prompt required\",\n        description: \"Please enter a description for your video\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (user?.subscriptionTier === 'free' && user.generationsUsed >= user.generationsLimit) {\n      toast({\n        title: \"Generation limit reached\",\n        description: \"Upgrade to Premium for unlimited generations\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateVideoMutation.mutate({\n      model: selectedModel,\n      prompt: prompt.trim(),\n    });\n  };\n\n  const downloadVideo = (videoUrl: string, filename: string) => {\n    const link = document.createElement('a');\n    link.href = videoUrl;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const currentModel = models.find(m => m.id === selectedModel);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Generation Form */}\n      <Card className=\"glass-effect\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Video className=\"w-5 h-5\" />\n            Generate Video\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Model Selection */}\n          <div className=\"space-y-2\">\n            <Label>Video Model</Label>\n            <Select value={selectedModel} onValueChange={onModelChange}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {models.map((model) => (\n                  <SelectItem key={model.id} value={model.id}>\n                    <div className=\"flex items-center justify-between w-full\">\n                      <span>{model.name}</span>\n                      <Badge className={`ml-2 ${model.badgeColor}`}>\n                        {model.badge}\n                      </Badge>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            {/* Model Info */}\n            {currentModel && (\n              <div className=\"p-3 bg-muted rounded-lg text-sm space-y-1\">\n                <p><strong>Resolution:</strong> {currentModel.resolution}</p>\n                <p><strong>Max Duration:</strong> {currentModel.maxDuration}</p>\n                <p className=\"text-muted-foreground\">{currentModel.description}</p>\n              </div>\n            )}\n          </div>\n\n          {/* Prompt Input */}\n          <div className=\"space-y-2\">\n            <Label>Video Description</Label>\n            <Textarea\n              placeholder=\"Describe the video you want to create. Include details about motion, scene, lighting, and style...\"\n              value={prompt}\n              onChange={(e) => setPrompt(e.target.value)}\n              rows={6}\n              className=\"resize-none\"\n            />\n            <p className=\"text-sm text-muted-foreground\">\n              💡 Tip: Describe movement and actions clearly. For example: \"A golden retriever running through a sunlit meadow, slow motion, cinematic lighting\"\n            </p>\n          </div>\n\n          {/* Generate Button */}\n          <Button\n            onClick={handleGenerate}\n            disabled={generateVideoMutation.isPending || !prompt.trim()}\n            className=\"w-full btn-depth\"\n            size=\"lg\"\n          >\n            {generateVideoMutation.isPending ? (\n              <>\n                <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                Generating Video...\n              </>\n            ) : (\n              <>\n                <Film className=\"w-5 h-5 mr-2\" />\n                Generate Video\n              </>\n            )}\n          </Button>\n\n          {/* Processing Info */}\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Clock className=\"w-4 h-4\" />\n            <span>Video generation typically takes 2-5 minutes</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Generated Videos */}\n      {generatedVideos.length > 0 && (\n        <Card className=\"glass-effect\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Video className=\"w-5 h-5\" />\n              Generated Videos\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {generatedVideos.map((videoData, index) => (\n                <div key={index} className=\"space-y-4\">\n                  <div className=\"relative group\">\n                    <div className=\"aspect-video bg-muted rounded-lg overflow-hidden\">\n                      {videoData.result?.url ? (\n                        <video\n                          controls\n                          className=\"w-full h-full object-cover\"\n                          poster={videoData.result?.thumbnail}\n                        >\n                          <source src={videoData.result.url} type=\"video/mp4\" />\n                          Your browser does not support the video tag.\n                        </video>\n                      ) : (\n                        <div className=\"w-full h-full flex items-center justify-center\">\n                          <div className=\"text-center\">\n                            {generateVideoMutation.isPending ? (\n                              <>\n                                <Loader2 className=\"w-12 h-12 mx-auto mb-2 animate-spin text-primary\" />\n                                <p className=\"text-sm text-muted-foreground\">Processing video...</p>\n                              </>\n                            ) : (\n                              <>\n                                <Video className=\"w-12 h-12 mx-auto mb-2 text-muted-foreground\" />\n                                <p className=\"text-sm text-muted-foreground\">Video will appear here</p>\n                              </>\n                            )}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                    \n                    {/* Video Actions */}\n                    {videoData.result?.url && (\n                      <div className=\"absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center gap-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          onClick={() => downloadVideo(videoData.result.url, `generated-video-${Date.now()}.mp4`)}\n                        >\n                          <Download className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* Video Info */}\n                  <div className=\"p-3 bg-muted rounded-lg\">\n                    <p className=\"text-sm font-medium mb-1\">Prompt:</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {videoData.prompt || prompt}\n                    </p>\n                    <div className=\"flex items-center gap-4 mt-2 text-xs text-muted-foreground\">\n                      <span>Model: {selectedModel.split('/')[1]}</span>\n                      <span>Status: {videoData.status || 'Processing'}</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Empty State */}\n      {generatedVideos.length === 0 && (\n        <Card className=\"glass-effect\">\n          <CardContent className=\"py-12 text-center\">\n            <Film className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Ready to Create Videos</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Enter a detailed description above and generate your first AI video\n            </p>\n            <div className=\"text-sm text-muted-foreground space-y-1\">\n              <p>• Describe movement and actions clearly</p>\n              <p>• Include lighting and scene details</p>\n              <p>• Specify camera angles if needed</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":10889},"client/src/components/layout/footer.tsx":{"content":"import { Sparkles } from \"lucide-react\";\n\nexport default function Footer() {\n  const footerSections = [\n    {\n      title: \"AI Services\",\n      links: [\n        { name: \"Image Generation\", href: \"/image-generation\" },\n        { name: \"Video Creation\", href: \"/video-generation\" },\n        { name: \"AI Chat\", href: \"/ai-chat\" },\n        { name: \"Audio & Speech\", href: \"/audio-speech\" },\n        { name: \"Image Editing\", href: \"/image-editing\" },\n        { name: \"API Access\", href: \"/docs\" },\n      ]\n    },\n    {\n      title: \"Resources\",\n      links: [\n        { name: \"Documentation\", href: \"/docs\" },\n        { name: \"API Reference\", href: \"/docs\" },\n        { name: \"Blog\", href: \"/blog\" },\n        { name: \"Tutorials\", href: \"/blog\" },\n        { name: \"Community\", href: \"#\" },\n        { name: \"Support\", href: \"#\" },\n      ]\n    },\n    {\n      title: \"Company\",\n      links: [\n        { name: \"About\", href: \"#\" },\n        { name: \"Careers\", href: \"#\" },\n        { name: \"Contact\", href: \"#\" },\n        { name: \"Privacy Policy\", href: \"#\" },\n        { name: \"Terms of Service\", href: \"#\" },\n        { name: \"Cookie Policy\", href: \"#\" },\n      ]\n    }\n  ];\n\n  return (\n    <footer className=\"bg-muted/50 border-t border-border\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Brand Section */}\n          <div className=\"col-span-1 md:col-span-1\">\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"w-10 h-10 rounded-xl bg-gradient-to-r from-primary to-purple-500 flex items-center justify-center\">\n                <Sparkles className=\"w-6 h-6 text-white\" />\n              </div>\n              <span className=\"text-xl font-bold gradient-text\">LoveAIHub</span>\n            </div>\n            <p className=\"text-muted-foreground mb-6 max-w-sm\">\n              Professional AI platform providing access to 20+ state-of-the-art AI models \n              for image generation, video creation, chat completion, and more.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a\n                href=\"#\"\n                className=\"w-10 h-10 glass-effect rounded-lg flex items-center justify-center hover:bg-muted transition-colors\"\n                aria-label=\"Twitter\"\n              >\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"/>\n                </svg>\n              </a>\n              <a\n                href=\"#\"\n                className=\"w-10 h-10 glass-effect rounded-lg flex items-center justify-center hover:bg-muted transition-colors\"\n                aria-label=\"GitHub\"\n              >\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"/>\n                </svg>\n              </a>\n              <a\n                href=\"#\"\n                className=\"w-10 h-10 glass-effect rounded-lg flex items-center justify-center hover:bg-muted transition-colors\"\n                aria-label=\"LinkedIn\"\n              >\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\"/>\n                </svg>\n              </a>\n            </div>\n          </div>\n          \n          {/* Footer Sections */}\n          {footerSections.map((section) => (\n            <div key={section.title}>\n              <h3 className=\"font-semibold mb-6\">{section.title}</h3>\n              <ul className=\"space-y-3 text-muted-foreground\">\n                {section.links.map((link) => (\n                  <li key={link.name}>\n                    <a\n                      href={link.href}\n                      className=\"hover:text-foreground transition-colors\"\n                    >\n                      {link.name}\n                    </a>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n        \n        {/* Footer Bottom */}\n        <div className=\"border-t border-border mt-12 pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-muted-foreground text-sm\">\n            © 2024 LoveAIHub. All rights reserved.\n          </p>\n          <div className=\"flex space-x-6 text-sm text-muted-foreground mt-4 md:mt-0\">\n            <a href=\"#\" className=\"hover:text-foreground transition-colors\">\n              Privacy Policy\n            </a>\n            <a href=\"#\" className=\"hover:text-foreground transition-colors\">\n              Terms of Service\n            </a>\n            <a href=\"#\" className=\"hover:text-foreground transition-colors\">\n              Cookie Policy\n            </a>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":6485},"client/src/components/layout/navbar.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\nimport { \n  Menu,\n  Sparkles,\n  User,\n  Settings,\n  LogOut,\n  Crown,\n  Shield,\n  ChevronDown\n} from \"lucide-react\";\n\nexport default function Navbar() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const navigationItems = [\n    { name: \"Features\", href: isAuthenticated ? \"/\" : \"/#features\" },\n    { name: \"AI Models\", href: isAuthenticated ? \"/\" : \"/#models\" },\n    { name: \"Pricing\", href: \"/pricing\" },\n    { name: \"Blog\", href: \"/blog\" },\n    { name: \"Docs\", href: \"/docs\" },\n  ];\n\n  const aiServices = [\n    { name: \"Image Generation\", href: \"/image-generation\" },\n    { name: \"Video Creation\", href: \"/video-generation\" },\n    { name: \"AI Chat\", href: \"/ai-chat\" },\n    { name: \"Audio & Speech\", href: \"/audio-speech\" },\n    { name: \"Image Editing\", href: \"/image-editing\" },\n  ];\n\n  return (\n    <nav className=\"fixed top-0 w-full z-50 glass-effect border-b border-border/50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 rounded-xl bg-gradient-to-r from-primary to-purple-500 flex items-center justify-center\">\n              <Sparkles className=\"w-6 h-6 text-white\" />\n            </div>\n            <a href=\"/\" className=\"text-xl font-bold gradient-text\">\n              LoveAIHub\n            </a>\n          </div>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            {navigationItems.map((item) => (\n              <a\n                key={item.name}\n                href={item.href}\n                className=\"text-foreground hover:text-primary transition-colors\"\n              >\n                {item.name}\n              </a>\n            ))}\n            \n            {/* AI Services Dropdown */}\n            {isAuthenticated && (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"flex items-center gap-1\">\n                    AI Services\n                    <ChevronDown className=\"w-4 h-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"glass-effect\">\n                  <DropdownMenuLabel>AI Services</DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  {aiServices.map((service) => (\n                    <DropdownMenuItem key={service.name} asChild>\n                      <a href={service.href} className=\"cursor-pointer\">\n                        {service.name}\n                      </a>\n                    </DropdownMenuItem>\n                  ))}\n                </DropdownMenuContent>\n              </DropdownMenu>\n            )}\n          </div>\n          \n          {/* Auth Section */}\n          <div className=\"flex items-center space-x-4\">\n            {isLoading ? (\n              <div className=\"w-8 h-8 rounded-full bg-muted animate-pulse\" />\n            ) : isAuthenticated && user ? (\n              <>\n                {/* Usage Badge */}\n                <Badge variant=\"secondary\" className=\"hidden sm:flex\">\n                  {user.generationsUsed}/{user.generationsLimit === -1 ? '∞' : user.generationsLimit}\n                </Badge>\n                \n                {/* User Menu */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"flex items-center space-x-2\">\n                      {user.profileImageUrl ? (\n                        <img \n                          src={user.profileImageUrl} \n                          alt=\"Profile\" \n                          className=\"w-8 h-8 rounded-full object-cover\"\n                        />\n                      ) : (\n                        <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-primary to-purple-500 flex items-center justify-center\">\n                          <User className=\"w-4 h-4 text-white\" />\n                        </div>\n                      )}\n                      <span className=\"hidden sm:block\">\n                        {user.firstName || 'Account'}\n                      </span>\n                      <ChevronDown className=\"w-4 h-4\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"glass-effect w-56\">\n                    <DropdownMenuLabel className=\"flex items-center gap-2\">\n                      <div className=\"flex flex-col\">\n                        <span>{user.firstName} {user.lastName}</span>\n                        <span className=\"text-xs text-muted-foreground\">{user.email}</span>\n                      </div>\n                      {user.subscriptionTier === 'premium' && (\n                        <Crown className=\"w-4 h-4 text-yellow-500\" />\n                      )}\n                    </DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    \n                    <DropdownMenuItem asChild>\n                      <a href=\"/\" className=\"cursor-pointer\">\n                        Dashboard\n                      </a>\n                    </DropdownMenuItem>\n                    \n                    <DropdownMenuItem asChild>\n                      <a href=\"/pricing\" className=\"cursor-pointer\">\n                        <Settings className=\"w-4 h-4 mr-2\" />\n                        Subscription\n                      </a>\n                    </DropdownMenuItem>\n                    \n                    {user.isAdmin && (\n                      <DropdownMenuItem asChild>\n                        <a href=\"/admin\" className=\"cursor-pointer\">\n                          <Shield className=\"w-4 h-4 mr-2\" />\n                          Admin Panel\n                        </a>\n                      </DropdownMenuItem>\n                    )}\n                    \n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem asChild>\n                      <a href=\"/api/logout\" className=\"cursor-pointer text-destructive\">\n                        <LogOut className=\"w-4 h-4 mr-2\" />\n                        Sign Out\n                      </a>\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </>\n            ) : (\n              <div className=\"flex items-center space-x-3\">\n                <Button variant=\"ghost\" asChild>\n                  <a href=\"/api/login\">Sign In</a>\n                </Button>\n                <Button className=\"btn-depth\" asChild>\n                  <a href=\"/api/login\">Start Free</a>\n                </Button>\n              </div>\n            )}\n\n            {/* Mobile Menu */}\n            <Sheet open={isOpen} onOpenChange={setIsOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" className=\"md:hidden\">\n                  <Menu className=\"w-5 h-5\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"glass-effect w-80\">\n                <div className=\"flex flex-col space-y-4 mt-8\">\n                  {/* Navigation Items */}\n                  {navigationItems.map((item) => (\n                    <a\n                      key={item.name}\n                      href={item.href}\n                      className=\"text-foreground hover:text-primary transition-colors p-2 rounded-lg hover:bg-muted\"\n                      onClick={() => setIsOpen(false)}\n                    >\n                      {item.name}\n                    </a>\n                  ))}\n                  \n                  {/* AI Services for Mobile */}\n                  {isAuthenticated && (\n                    <>\n                      <div className=\"border-t border-border pt-4 mt-4\">\n                        <p className=\"text-sm font-semibold text-muted-foreground mb-2\">AI Services</p>\n                        {aiServices.map((service) => (\n                          <a\n                            key={service.name}\n                            href={service.href}\n                            className=\"block text-foreground hover:text-primary transition-colors p-2 rounded-lg hover:bg-muted\"\n                            onClick={() => setIsOpen(false)}\n                          >\n                            {service.name}\n                          </a>\n                        ))}\n                      </div>\n                    </>\n                  )}\n                  \n                  {/* Auth Section for Mobile */}\n                  {!isAuthenticated && (\n                    <div className=\"border-t border-border pt-4 mt-4 space-y-2\">\n                      <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n                        <a href=\"/api/login\" onClick={() => setIsOpen(false)}>\n                          Sign In\n                        </a>\n                      </Button>\n                      <Button className=\"w-full btn-depth\" asChild>\n                        <a href=\"/api/login\" onClick={() => setIsOpen(false)}>\n                          Start Free\n                        </a>\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":9924},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"DEPLOYMENT_GUIDE.md":{"content":"# Deploying LoveAIHub to Vercel\n\nThis guide will help you deploy your LoveAIHub project to Vercel with the beautiful MagicPath authentication design.\n\n## Prerequisites\n\n1. A Vercel account (sign up at https://vercel.com)\n2. A Supabase project for authentication and database\n3. Your environment variables ready\n\n## Step 1: Setup Supabase Database\n\n1. Go to https://supabase.com and create a new project\n2. Go to Project Settings > Database\n3. Copy your connection string (replace [YOUR-PASSWORD] with your actual password)\n4. Run the database schema setup:\n   ```sql\n   -- Run this in your Supabase SQL editor\n   CREATE TABLE IF NOT EXISTS users (\n     id SERIAL PRIMARY KEY,\n     email VARCHAR(255) UNIQUE NOT NULL,\n     first_name VARCHAR(255),\n     last_name VARCHAR(255),\n     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n   );\n   ```\n\n## Step 2: Prepare Environment Variables\n\nSet up these environment variables in Vercel:\n- `DATABASE_URL` - Your Supabase PostgreSQL connection string\n- `SUPABASE_URL` - Your Supabase project URL\n- `SUPABASE_ANON_KEY` - Your Supabase anon key\n- `VITE_SUPABASE_URL` - Same as SUPABASE_URL (for frontend)\n- `VITE_SUPABASE_ANON_KEY` - Same as SUPABASE_ANON_KEY (for frontend)\n\n## Step 2: Install Vercel CLI (Optional)\n\n```bash\nnpm i -g vercel\n```\n\n## Step 3: Deploy to Vercel\n\n### Option A: Using Vercel CLI\n\n1. Run in your project directory:\n```bash\nvercel\n```\n\n2. Follow the prompts:\n   - Link to existing project? **No**\n   - Project name: **loveaihub** (or your preferred name)\n   - Directory: **./** (current directory)\n\n3. Set environment variables:\n```bash\nvercel env add DATABASE_URL\nvercel env add SUPABASE_URL\nvercel env add SUPABASE_ANON_KEY\nvercel env add VITE_SUPABASE_URL\nvercel env add VITE_SUPABASE_ANON_KEY\n```\n\n4. Deploy:\n```bash\nvercel --prod\n```\n\n### Option B: Using Vercel Dashboard\n\n1. Go to https://vercel.com/dashboard\n2. Click \"New Project\"\n3. Import your GitHub repository (you'll need to push this code to GitHub first)\n4. Configure the project:\n   - **Framework Preset**: Other\n   - **Root Directory**: ./\n   - **Build Command**: `npm run build`\n   - **Output Directory**: `dist/public`\n   - **Install Command**: `npm install`\n\n5. Add Environment Variables in the Vercel dashboard:\n   - `DATABASE_URL`\n   - `SUPABASE_URL` \n   - `SUPABASE_ANON_KEY`\n   - `VITE_SUPABASE_URL`\n   - `VITE_SUPABASE_ANON_KEY`\n   - `NODE_ENV` = `production`\n\n6. Click \"Deploy\"\n\n## Step 4: Update Your Database\n\nAfter deployment, make sure your database schema is up to date:\n\n```bash\n# If using the deployed site, run migrations\nnpm run db:push\n```\n\n## Step 5: Test Your Deployment\n\n1. Visit your Vercel URL\n2. Test the authentication flow\n3. Verify all API endpoints work\n4. Check that the database connections are working\n\n## Troubleshooting\n\n### Common Issues:\n\n1. **Build fails**: Check that all dependencies are in package.json\n2. **Environment variables**: Make sure all required env vars are set in Vercel dashboard\n3. **Database connection**: Verify your DATABASE_URL is accessible from Vercel\n4. **API routes not working**: Check that your server/index.ts is properly configured\n\n### Important Notes:\n\n- Vercel runs your app as serverless functions\n- Each API call starts a new function instance\n- Database connections should use connection pooling\n- File uploads need to use external storage (like Supabase Storage)\n\n## Production Considerations\n\n1. **Database**: Use a production PostgreSQL database (Supabase Pro, Neon, or AWS RDS)\n2. **File Storage**: Configure Supabase Storage for file uploads\n3. **Domain**: Set up a custom domain in Vercel dashboard\n4. **Analytics**: Enable Vercel Analytics\n5. **Monitoring**: Set up error tracking and performance monitoring\n\n## Support\n\nIf you encounter issues:\n1. Check Vercel deployment logs\n2. Verify environment variables are correctly set\n3. Test your database connection\n4. Check the Vercel documentation at https://vercel.com/docs","size_bytes":3932},"DEPLOY_NOW.md":{"content":"# 🚀 Deploy Your LoveAIHub to Vercel Right Now\n\nYour project is fully ready for deployment! Follow these simple steps:\n\n## Step 1: Go to Vercel (2 minutes)\n\n1. **Visit**: https://vercel.com/new\n2. **Sign in** with your GitHub account\n3. **Import** your LoveAIHub repository\n4. Vercel will auto-detect the configuration\n\n## Step 2: Configure Environment Variables (3 minutes)\n\nAdd these in the Vercel deployment screen:\n\n```\nDATABASE_URL=your_supabase_postgres_connection_string\nSUPABASE_URL=your_supabase_project_url  \nSUPABASE_ANON_KEY=your_supabase_anon_key\nVITE_SUPABASE_URL=your_supabase_project_url\nVITE_SUPABASE_ANON_KEY=your_supabase_anon_key\nNODE_ENV=production\n```\n\n## Step 3: Deploy (1 minute)\n\n1. **Click \"Deploy\"**\n2. Wait 2-3 minutes for build completion\n3. **Your app is live!** 🎉\n\n## What You'll Get\n\n- ✅ Live URL (like: `your-project.vercel.app`)\n- ✅ Beautiful MagicPath authentication with purple glows\n- ✅ Supabase authentication working\n- ✅ Automatic deployments on every GitHub push\n- ✅ HTTPS and global CDN\n- ✅ Professional production-ready app\n\n## If You Need Help\n\n1. **Supabase credentials**: Get them from your Supabase project dashboard\n2. **Build issues**: Check the Vercel build logs\n3. **Domain setup**: Add custom domain in Vercel dashboard after deployment\n\n## Total Time: ~6 minutes\n\nYour beautiful LoveAIHub with MagicPath authentication design will be live and ready for users!\n\n**Ready? Go to: https://vercel.com/new** 🚀","size_bytes":1475},"GET_SUPABASE_CREDENTIALS.md":{"content":"# 🔑 How to Get Your Supabase Credentials for Vercel\n\nFollow these steps to get all the credentials you need for deployment:\n\n## Step 1: Go to Your Supabase Dashboard\n\n1. Visit: https://supabase.com/dashboard\n2. Sign in to your account\n3. Select your project (or create a new one if you don't have one)\n\n## Step 2: Get SUPABASE_URL and SUPABASE_ANON_KEY\n\n1. In your Supabase project dashboard\n2. Click on **\"Settings\"** in the left sidebar\n3. Click on **\"API\"**\n4. You'll see:\n   - **Project URL** (this is your `SUPABASE_URL`)\n   - **Project API keys** section with **anon/public** key (this is your `SUPABASE_ANON_KEY`)\n\nCopy these values:\n```\nSUPABASE_URL=https://your-project-id.supabase.co\nSUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n## Step 3: Get DATABASE_URL\n\n1. Still in **Settings** → **Database**\n2. Scroll down to **\"Connection string\"**\n3. Select **\"Pooler\"** → **\"Transaction\"**\n4. Copy the connection string\n5. Replace `[YOUR-PASSWORD]` with your actual database password\n\nIt will look like:\n```\nDATABASE_URL=postgresql://postgres:[YOUR-PASSWORD]@db.your-project-id.supabase.co:5432/postgres\n```\n\n## Step 4: Complete Environment Variables for Vercel\n\nHere's what you'll paste in Vercel:\n\n```\nDATABASE_URL=postgresql://postgres:your-actual-password@db.your-project-id.supabase.co:5432/postgres\nSUPABASE_URL=https://your-project-id.supabase.co\nSUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\nVITE_SUPABASE_URL=https://your-project-id.supabase.co\nVITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\nNODE_ENV=production\n```\n\n## Don't Have a Supabase Project? Create One:\n\n1. Go to https://supabase.com\n2. Click **\"Start your project\"**\n3. Sign in with GitHub\n4. Click **\"New project\"**\n5. Choose organization and fill details:\n   - **Name**: LoveAIHub\n   - **Database Password**: Create a strong password (save this!)\n   - **Region**: Choose closest to your users\n   - **Pricing Plan**: Free tier is fine for testing\n6. Click **\"Create new project\"**\n7. Wait 2-3 minutes for setup\n8. Follow steps above to get credentials\n\n## Security Notes:\n\n- Never commit these values to your GitHub repository\n- Only add them in Vercel's environment variables section\n- The VITE_ prefixed variables are needed for the frontend\n- Keep your database password secure\n\n## Ready for Vercel:\n\nOnce you have all these values, go to:\n1. https://vercel.com/new\n2. Import your GitHub repository\n3. Add these environment variables\n4. Deploy!\n\nYour LoveAIHub with beautiful MagicPath authentication will be live!\n\n## 🔄 Adding More Environment Variables Later\n\n**Yes, you can add more credentials anytime after deployment!**\n\n### For Future Features (like Razorpay):\n\n1. Go to your Vercel project dashboard\n2. Click **\"Settings\"** tab\n3. Click **\"Environment Variables\"**\n4. Click **\"Add New\"**\n5. Add your new variables:\n   ```\n   RAZORPAY_KEY_ID=your_razorpay_key\n   RAZORPAY_KEY_SECRET=your_razorpay_secret\n   ```\n6. **Redeploy** (Vercel will automatically redeploy when you add new env vars)\n\n### Common Future Environment Variables:\n\n```\n# Payment Processing\nRAZORPAY_KEY_ID=rzp_live_xxxxx\nRAZORPAY_KEY_SECRET=xxxxx\n\n# Email Services  \nRESEND_API_KEY=re_xxxxx\nSMTP_HOST=smtp.gmail.com\n\n# AI Services\nOPENAI_API_KEY=sk-xxxxx\nANTHROPIC_API_KEY=sk-ant-xxxxx\n\n# Analytics\nGOOGLE_ANALYTICS_ID=G-xxxxx\nMIXPANEL_TOKEN=xxxxx\n```\n\n### Benefits of Adding Later:\n\n- ✅ Start simple and add complexity gradually\n- ✅ Test core functionality first\n- ✅ Add payment features when ready\n- ✅ No need to gather all credentials upfront\n- ✅ Vercel automatically redeploys with new variables\n\n### Best Practice:\n\n1. **Deploy now** with Supabase credentials\n2. **Test authentication** and core features\n3. **Add Razorpay** credentials when building subscription model\n4. **Add other services** as you integrate them\n\nThis approach is perfect for iterative development!","size_bytes":3893},"VERCEL_GITHUB_DEPLOYMENT.md":{"content":"# Deploy LoveAIHub from GitHub to Vercel\n\nSince your project is already on GitHub, deploying to Vercel is incredibly simple with automatic deployments!\n\n## 🚀 Quick Deployment Steps\n\n### 1. Connect GitHub to Vercel\n\n1. Go to [vercel.com](https://vercel.com) and sign in (or create account)\n2. Click **\"New Project\"**\n3. Choose **\"Import Git Repository\"**\n4. Connect your GitHub account if not already connected\n5. Find your LoveAIHub repository and click **\"Import\"**\n\n### 2. Configure the Project\n\nVercel will auto-detect your project. Configure these settings:\n\n- **Framework Preset**: `Other` or `Vite` \n- **Root Directory**: `./` (leave as root)\n- **Build Command**: `npm run build`\n- **Output Directory**: `dist/public`\n- **Install Command**: `npm install` (auto-detected)\n\n### 3. Add Environment Variables\n\nIn the Vercel project settings, add these environment variables:\n\n```\nDATABASE_URL=your_supabase_postgres_connection_string\nSUPABASE_URL=your_supabase_project_url\nSUPABASE_ANON_KEY=your_supabase_anon_key\nVITE_SUPABASE_URL=your_supabase_project_url\nVITE_SUPABASE_ANON_KEY=your_supabase_anon_key\nNODE_ENV=production\n```\n\n### 4. Deploy\n\n1. Click **\"Deploy\"**\n2. Vercel will build and deploy your project automatically\n3. You'll get a live URL like `your-project.vercel.app`\n\n## 🔄 Automatic Deployments\n\nOnce connected, Vercel will automatically:\n- Deploy every push to your main branch\n- Create preview deployments for pull requests\n- Show build logs and deployment status\n- Provide unique URLs for each deployment\n\n## 🎯 Benefits of GitHub Integration\n\n- **Zero Configuration**: Vercel detects your setup automatically\n- **Automatic Deployments**: Every git push deploys instantly\n- **Preview Deployments**: Test changes before merging\n- **Rollback Support**: Easily revert to previous deployments\n- **Branch Deployments**: Each branch gets its own URL\n\n## 🔧 Project Structure (Already Set Up)\n\nYour project already has:\n- ✅ `vercel.json` - Vercel configuration\n- ✅ `api/index.ts` - Serverless function entry\n- ✅ `.vercelignore` - Deployment exclusions\n- ✅ Beautiful MagicPath authentication UI\n- ✅ Supabase integration\n\n## 🌐 Custom Domain (Optional)\n\nAfter deployment:\n1. Go to your Vercel project dashboard\n2. Click **\"Domains\"** tab\n3. Add your custom domain\n4. Follow DNS configuration instructions\n\n## 🐛 Troubleshooting\n\n**Build fails?**\n- Check the build logs in Vercel dashboard\n- Ensure all dependencies are in package.json\n- Verify environment variables are set correctly\n\n**Authentication not working?**\n- Verify Supabase environment variables\n- Check your Supabase project is active\n- Ensure database schema is properly set up\n\n**API routes failing?**\n- Check that `api/index.ts` is properly configured\n- Verify your serverless functions are working\n- Check Vercel function logs\n\n## 📱 What You'll Get\n\nYour deployed LoveAIHub will have:\n- 🎨 Beautiful MagicPath authentication with purple glows\n- 🔐 Supabase authentication (sign up, sign in, password reset)\n- 📱 Responsive design for all devices\n- 🌙 Professional dark theme with gradient effects\n- ⚡ Fast global CDN delivery via Vercel\n- 🔄 Automatic HTTPS and security headers\n\n## 🎉 Ready to Deploy!\n\nJust go to [vercel.com/new](https://vercel.com/new), import your GitHub repo, add the environment variables, and click Deploy. Your beautiful LoveAIHub with MagicPath authentication will be live in minutes!","size_bytes":3427},"api/index.ts":{"content":"// Vercel serverless function entry point\nimport 'dotenv/config';\nimport express from \"express\";\nimport { createClient } from '@supabase/supabase-js';\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\n\nconst app = express();\n\n// Add CORS and JSON parsing\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: false }));\n\n// Add CORS headers for all requests\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\n  \n  if (req.method === 'OPTIONS') {\n    res.sendStatus(200);\n  } else {\n    next();\n  }\n});\n\n// Initialize Supabase client\nconst supabaseUrl = process.env.SUPABASE_URL!;\nconst supabaseServiceKey = process.env.SUPABASE_ANON_KEY!;\nconst supabase = createClient(supabaseUrl, supabaseServiceKey);\n\n// Initialize database connection\nconst sql = neon(process.env.DATABASE_URL!);\nconst db = drizzle(sql);\n\n// Authentication middleware\nconst isAuthenticated = async (req: any, res: any, next: any) => {\n  try {\n    const authHeader = req.headers.authorization;\n    if (!authHeader?.startsWith('Bearer ')) {\n      return res.status(401).json({ message: 'Unauthorized' });\n    }\n\n    const token = authHeader.substring(7);\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n\n    if (error || !user) {\n      return res.status(401).json({ message: 'Unauthorized' });\n    }\n\n    req.currentUser = user;\n    next();\n  } catch (error) {\n    console.error('Auth middleware error:', error);\n    res.status(401).json({ message: 'Unauthorized' });\n  }\n};\n\n// Health check endpoint\napp.get('/api/health', (req, res) => {\n  res.json({ \n    status: 'ok', \n    timestamp: new Date().toISOString(),\n    env: {\n      supabase_url: !!process.env.SUPABASE_URL,\n      supabase_anon_key: !!process.env.SUPABASE_ANON_KEY,\n      database_url: !!process.env.DATABASE_URL\n    }\n  });\n});\n\n// Auth endpoints\napp.post('/api/auth/signup', async (req, res) => {\n  try {\n    const { email, password, firstName, lastName } = req.body;\n    \n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          first_name: firstName,\n          last_name: lastName\n        }\n      }\n    });\n\n    if (error) {\n      return res.status(400).json({ message: error.message });\n    }\n\n    res.json({ user: data.user, session: data.session });\n  } catch (error) {\n    console.error('Signup error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\napp.post('/api/auth/signin', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    \n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n\n    if (error) {\n      return res.status(400).json({ message: error.message });\n    }\n\n    res.json({ user: data.user, session: data.session });\n  } catch (error) {\n    console.error('Signin error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\napp.post('/api/auth/signout', async (req, res) => {\n  try {\n    const { error } = await supabase.auth.signOut();\n    \n    if (error) {\n      return res.status(400).json({ message: error.message });\n    }\n\n    res.json({ message: 'Signed out successfully' });\n  } catch (error) {\n    console.error('Signout error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\napp.get('/api/auth/user', async (req, res) => {\n  try {\n    const authHeader = req.headers.authorization;\n    if (!authHeader?.startsWith('Bearer ')) {\n      return res.status(401).json({ message: 'Unauthorized' });\n    }\n\n    const token = authHeader.substring(7);\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n\n    if (error || !user) {\n      return res.status(401).json({ message: 'Unauthorized' });\n    }\n\n    res.json({ user });\n  } catch (error) {\n    console.error('Get user error:', error);\n    res.status(401).json({ message: 'Unauthorized' });\n  }\n});\n\napp.post('/api/auth/google', async (req, res) => {\n  try {\n    const { redirectUrl } = req.body;\n    const { data, error } = await supabase.auth.signInWithOAuth({\n      provider: 'google',\n      options: {\n        redirectTo: `${redirectUrl}/auth/callback`\n      }\n    });\n\n    if (error) {\n      return res.status(400).json({ message: error.message });\n    }\n\n    res.json({ url: data.url });\n  } catch (error) {\n    console.error('Google OAuth error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\napp.post('/api/auth/reset-password', async (req, res) => {\n  try {\n    const { email } = req.body;\n    \n    const { error } = await supabase.auth.resetPasswordForEmail(email);\n    \n    if (error) {\n      return res.status(400).json({ message: error.message });\n    }\n\n    res.json({ message: 'Password reset email sent' });\n  } catch (error) {\n    console.error('Reset password error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\napp.post('/api/auth/update-password', async (req, res) => {\n  try {\n    const { password } = req.body;\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader?.startsWith('Bearer ')) {\n      return res.status(401).json({ message: 'Unauthorized' });\n    }\n\n    const token = authHeader.substring(7);\n    const { data, error } = await supabase.auth.updateUser({ password });\n\n    if (error) {\n      return res.status(400).json({ message: error.message });\n    }\n\n    res.json({ user: data.user });\n  } catch (error) {\n    console.error('Update password error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// Add error handling middleware\napp.use((err: any, req: any, res: any, next: any) => {\n  console.error('Serverless function error:', err);\n  res.status(500).json({ \n    message: 'Internal server error',\n    error: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'\n  });\n});\n\n// Export for Vercel\nexport default app;","size_bytes":6208},"server/supabaseAuth.ts":{"content":"import { createClient } from '@supabase/supabase-js';\nimport type { Express, RequestHandler } from \"express\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\n// Supabase configuration with graceful fallbacks for serverless\nlet supabase: any = null;\n\nfunction initializeSupabase() {\n  if (!supabase && process.env.SUPABASE_URL && process.env.SUPABASE_ANON_KEY) {\n    try {\n      supabase = createClient(\n        process.env.SUPABASE_URL,\n        process.env.SUPABASE_ANON_KEY\n      );\n    } catch (error) {\n      console.error(\"Failed to initialize Supabase:\", error);\n    }\n  }\n  return supabase;\n}\n\nexport { supabase };\nexport { initializeSupabase };\n\nexport function getSession() {\n  try {\n    const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n    \n    // Only create PG store if DATABASE_URL is available\n    if (!process.env.DATABASE_URL) {\n      console.warn(\"DATABASE_URL not available, using memory store\");\n      const MemoryStore = session.MemoryStore;\n      return session({\n        secret: process.env.SESSION_SECRET || \"8788fdfd5215934707e38407bcb2920b2aa6716b60801fec6ab1ff6ed34cf6d7\",\n        store: new MemoryStore(),\n        resave: false,\n        saveUninitialized: false,\n        cookie: {\n          httpOnly: true,\n          secure: process.env.NODE_ENV === \"production\",\n          maxAge: sessionTtl,\n        },\n      });\n    }\n    \n    const pgStore = connectPg(session);\n    const sessionStore = new pgStore({\n      conString: process.env.DATABASE_URL,\n      createTableIfMissing: false,\n      ttl: sessionTtl,\n      tableName: \"sessions\",\n    });\n    \n    return session({\n      secret: process.env.SESSION_SECRET || \"8788fdfd5215934707e38407bcb2920b2aa6716b60801fec6ab1ff6ed34cf6d7\",\n      store: sessionStore,\n      resave: false,\n      saveUninitialized: false,\n      cookie: {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        maxAge: sessionTtl,\n      },\n    });\n  } catch (error) {\n    console.error(\"Error creating session:\", error);\n    // Fallback to memory store\n    return session({\n      secret: process.env.SESSION_SECRET || \"8788fdfd5215934707e38407bcb2920b2aa6716b60801fec6ab1ff6ed34cf6d7\",\n      resave: false,\n      saveUninitialized: false,\n      cookie: {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        maxAge: 7 * 24 * 60 * 60 * 1000,\n      },\n    });\n  }\n}\n\nexport async function setupAuth(app: Express) {\n  try {\n    app.set(\"trust proxy\", 1);\n    app.use(getSession());\n    \n    // Initialize Supabase\n    initializeSupabase();\n\n    // Sign up endpoint\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const { email, password, firstName, lastName } = req.body;\n\n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email and password are required\" });\n      }\n\n      const supabaseClient = initializeSupabase();\n      if (!supabaseClient) {\n        return res.status(500).json({ message: \"Authentication service unavailable\" });\n      }\n\n      const { data, error } = await supabaseClient.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            first_name: firstName,\n            last_name: lastName,\n          }\n        }\n      });\n\n      if (error) {\n        return res.status(400).json({ message: error.message });\n      }\n\n      if (data.user) {\n        // Create user in our database\n        await storage.upsertUser({\n          id: data.user.id,\n          email: data.user.email!,\n          firstName: firstName,\n          lastName: lastName,\n          profileImageUrl: data.user.user_metadata?.avatar_url,\n        });\n\n        // Store user session\n        (req.session as any).user = {\n          id: data.user.id,\n          email: data.user.email,\n          access_token: data.session?.access_token,\n          refresh_token: data.session?.refresh_token,\n        };\n      }\n\n      res.json({ \n        user: data.user, \n        session: data.session,\n        message: data.user?.email_confirmed_at ? \"User created successfully\" : \"Please check your email to confirm your account\"\n      });\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Sign in endpoint\n  app.post(\"/api/auth/signin\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n\n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email and password are required\" });\n      }\n\n      const supabaseClient = initializeSupabase();\n      if (!supabaseClient) {\n        return res.status(500).json({ message: \"Authentication service unavailable\" });\n      }\n\n      const { data, error } = await supabaseClient.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) {\n        return res.status(401).json({ message: error.message });\n      }\n\n      if (data.user) {\n        // Update user in our database\n        await storage.upsertUser({\n          id: data.user.id,\n          email: data.user.email!,\n          firstName: data.user.user_metadata?.first_name,\n          lastName: data.user.user_metadata?.last_name,\n          profileImageUrl: data.user.user_metadata?.avatar_url,\n        });\n\n        // Store user session\n        (req.session as any).user = {\n          id: data.user.id,\n          email: data.user.email,\n          access_token: data.session?.access_token,\n          refresh_token: data.session?.refresh_token,\n        };\n      }\n\n      res.json({ user: data.user, session: data.session });\n    } catch (error) {\n      console.error(\"Signin error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Sign out endpoint\n  app.post(\"/api/auth/signout\", async (req, res) => {\n    try {\n      const sessionUser = (req.session as any).user;\n      \n      if (sessionUser?.access_token) {\n        // Create a supabase client with the user's token\n        const userSupabase = createClient(\n          process.env.SUPABASE_URL!,\n          process.env.SUPABASE_ANON_KEY!,\n          {\n            global: {\n              headers: {\n                Authorization: `Bearer ${sessionUser.access_token}`\n              }\n            }\n          }\n        );\n        \n        await userSupabase.auth.signOut();\n      }\n\n      // Clear session\n      req.session.destroy((err) => {\n        if (err) {\n          console.error(\"Session destroy error:\", err);\n        }\n      });\n\n      res.json({ message: \"Signed out successfully\" });\n    } catch (error) {\n      console.error(\"Signout error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get current user endpoint\n  app.get(\"/api/auth/user\", async (req, res) => {\n    try {\n      const sessionUser = (req.session as any).user;\n\n      if (!sessionUser?.access_token) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      // Create a supabase client with the user's token\n      const userSupabase = createClient(\n        process.env.SUPABASE_URL!,\n        process.env.SUPABASE_ANON_KEY!,\n        {\n          global: {\n            headers: {\n              Authorization: `Bearer ${sessionUser.access_token}`\n            }\n          }\n        }\n      );\n\n      const { data: { user }, error } = await userSupabase.auth.getUser();\n\n      if (error || !user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      // Get user data from our database\n      const dbUser = await storage.getUser(user.id);\n\n      res.json({ \n        user: {\n          id: user.id,\n          email: user.email,\n          ...dbUser\n        }\n      });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(401).json({ message: \"Unauthorized\" });\n    }\n  });\n\n  // Password reset request endpoint\n  app.post(\"/api/auth/reset-password\", async (req, res) => {\n    try {\n      const { email } = req.body;\n\n      if (!email) {\n        return res.status(400).json({ message: \"Email is required\" });\n      }\n\n      const supabaseClient = initializeSupabase();\n      if (!supabaseClient) {\n        return res.status(500).json({ message: \"Authentication service unavailable\" });\n      }\n\n      const { error } = await supabaseClient.auth.resetPasswordForEmail(email, {\n        redirectTo: `${req.protocol}://${req.get('host')}/reset-password`,\n      });\n\n      if (error) {\n        return res.status(400).json({ message: error.message });\n      }\n\n      res.json({ message: \"Password reset email sent\" });\n    } catch (error) {\n      console.error(\"Password reset error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Update password endpoint\n  app.post(\"/api/auth/update-password\", async (req, res) => {\n    try {\n      const { password } = req.body;\n      const sessionUser = (req.session as any).user;\n\n      if (!sessionUser?.access_token) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      if (!password) {\n        return res.status(400).json({ message: \"Password is required\" });\n      }\n\n      // Create a supabase client with the user's token\n      const userSupabase = createClient(\n        process.env.SUPABASE_URL!,\n        process.env.SUPABASE_ANON_KEY!,\n        {\n          global: {\n            headers: {\n              Authorization: `Bearer ${sessionUser.access_token}`\n            }\n          }\n        }\n      );\n\n      const { error } = await userSupabase.auth.updateUser({ password });\n\n      if (error) {\n        return res.status(400).json({ message: error.message });\n      }\n\n      res.json({ message: \"Password updated successfully\" });\n    } catch (error) {\n      console.error(\"Update password error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Google OAuth login endpoint\n  app.post(\"/api/auth/google\", async (req, res) => {\n    try {\n      console.log(\"Google OAuth request received:\", req.body);\n      \n      // Set proper headers for JSON response\n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Access-Control-Allow-Origin', '*');\n      res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');\n      res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n      \n      const { redirectUrl } = req.body;\n      const baseUrl = redirectUrl || `${req.protocol}://${req.get('host')}`;\n      \n      console.log(\"Attempting OAuth with redirect to:\", `${baseUrl}/auth/callback`);\n      \n      // First check if Supabase credentials are properly configured\n      if (!process.env.SUPABASE_URL || !process.env.SUPABASE_ANON_KEY) {\n        console.error(\"Missing Supabase credentials\", {\n          hasUrl: !!process.env.SUPABASE_URL,\n          hasKey: !!process.env.SUPABASE_ANON_KEY\n        });\n        return res.status(500).json({ \n          message: \"Server configuration error: Missing Supabase credentials\" \n        });\n      }\n      \n      try {\n        // Check if Google OAuth is configured in Supabase\n        const supabaseClient = initializeSupabase();\n        if (!supabaseClient) {\n          return res.status(500).json({ message: \"Authentication service unavailable\" });\n        }\n\n        const { data, error } = await supabaseClient.auth.signInWithOAuth({\n          provider: 'google',\n          options: {\n            redirectTo: `${baseUrl}/auth/callback`,\n          }\n        });\n\n        if (error) {\n          console.error(\"Supabase OAuth error:\", error);\n          \n          // More specific error handling\n          if (error.message.toLowerCase().includes('provider') || \n              error.message.toLowerCase().includes('not configured') ||\n              error.message.toLowerCase().includes('disabled')) {\n            return res.status(400).json({ \n              message: \"Google OAuth is not configured in Supabase. Please enable Google OAuth provider in your Supabase dashboard under Authentication > Providers.\"\n            });\n          }\n          \n          if (error.message.toLowerCase().includes('invalid') ||\n              error.message.toLowerCase().includes('client')) {\n            return res.status(400).json({ \n              message: \"Google OAuth configuration is invalid. Please check your Google Client ID and Secret in Supabase dashboard.\"\n            });\n          }\n          \n          return res.status(400).json({ message: `OAuth error: ${error.message}` });\n        }\n\n        if (!data || !data.url) {\n          console.error(\"No OAuth URL generated, data:\", data);\n          return res.status(500).json({ message: \"Failed to generate OAuth URL - Google provider may not be enabled\" });\n        }\n\n        console.log(\"OAuth URL generated successfully:\", data.url);\n        return res.json({ url: data.url, success: true });\n        \n      } catch (supabaseError: any) {\n        console.error(\"Supabase API error:\", supabaseError);\n        return res.status(500).json({ \n          message: `Supabase API error: ${supabaseError.message || 'Unknown error'}` \n        });\n      }\n      \n    } catch (error: any) {\n      console.error(\"Google OAuth endpoint error:\", error);\n      return res.status(500).json({ \n        message: `Server error: ${error.message || 'Internal server error'}` \n      });\n    }\n  });\n\n  // OAuth callback endpoint\n  app.get(\"/auth/callback\", async (req, res) => {\n    try {\n      const { code, error: oauthError } = req.query;\n\n      if (oauthError) {\n        return res.redirect(`/?error=${encodeURIComponent(oauthError.toString())}`);\n      }\n\n      if (!code) {\n        return res.redirect(\"/?error=missing_code\");\n      }\n\n      const supabaseClient = initializeSupabase();\n      if (!supabaseClient) {\n        return res.redirect(\"/?error=authentication_unavailable\");\n      }\n\n      const { data, error } = await supabaseClient.auth.exchangeCodeForSession(code.toString());\n\n      if (error) {\n        console.error(\"OAuth callback error:\", error);\n        return res.redirect(`/?error=${encodeURIComponent(error.message)}`);\n      }\n\n      if (data.user && data.session) {\n        // Create/update user in our database\n        await storage.upsertUser({\n          id: data.user.id,\n          email: data.user.email!,\n          firstName: data.user.user_metadata?.full_name?.split(' ')[0] || data.user.user_metadata?.first_name,\n          lastName: data.user.user_metadata?.full_name?.split(' ').slice(1).join(' ') || data.user.user_metadata?.last_name,\n          profileImageUrl: data.user.user_metadata?.avatar_url,\n        });\n\n        // Store user session\n        (req.session as any).user = {\n          id: data.user.id,\n          email: data.user.email,\n          access_token: data.session.access_token,\n          refresh_token: data.session.refresh_token,\n        };\n\n        // Redirect to dashboard or homepage\n        res.redirect(\"/\");\n      } else {\n        res.redirect(\"/?error=oauth_failed\");\n      }\n    } catch (error) {\n      console.error(\"OAuth callback error:\", error);\n      res.redirect(\"/?error=server_error\");\n    }\n  });\n  \n  } catch (error) {\n    console.error('Error setting up authentication routes:', error);\n  }\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  try {\n    const sessionUser = (req.session as any).user;\n\n    if (!sessionUser?.access_token) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    // Create a supabase client with the user's token\n    const userSupabase = createClient(\n      process.env.SUPABASE_URL!,\n      process.env.SUPABASE_ANON_KEY!,\n      {\n        global: {\n          headers: {\n            Authorization: `Bearer ${sessionUser.access_token}`\n          }\n        }\n      }\n    );\n\n    const { data: { user }, error } = await userSupabase.auth.getUser();\n\n    if (error || !user) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    // Add user to request object for use in other routes\n    (req as any).currentUser = user;\n    \n    next();\n  } catch (error) {\n    console.error(\"Authentication error:\", error);\n    res.status(401).json({ message: \"Unauthorized\" });\n  }\n};","size_bytes":16225},"client/src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\n// These will be provided by the user as environment variables\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL || '';\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || '';\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Auth API helpers that communicate with our backend\nexport const authApi = {\n  async signUp(email: string, password: string, firstName?: string, lastName?: string) {\n    try {\n      const response = await fetch('/api/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password, firstName, lastName }),\n      });\n\n      const responseClone = response.clone();\n\n      if (!response.ok) {\n        let errorMessage = 'Sign up failed';\n        try {\n          const error = await response.json();\n          errorMessage = error.message || errorMessage;\n        } catch (jsonError) {\n          try {\n            const textError = await responseClone.text();\n            console.error('Non-JSON error response:', textError);\n            errorMessage = `Server error: ${response.status} ${response.statusText}`;\n          } catch (textError) {\n            errorMessage = `Server error: ${response.status} ${response.statusText}`;\n          }\n        }\n        throw new Error(errorMessage);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Sign up error:', error);\n      throw error;\n    }\n  },\n\n  async signIn(email: string, password: string) {\n    try {\n      const response = await fetch('/api/auth/signin', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const responseClone = response.clone();\n\n      if (!response.ok) {\n        let errorMessage = 'Sign in failed';\n        try {\n          const error = await response.json();\n          errorMessage = error.message || errorMessage;\n        } catch (jsonError) {\n          try {\n            const textError = await responseClone.text();\n            console.error('Non-JSON error response:', textError);\n            errorMessage = `Server error: ${response.status} ${response.statusText}`;\n          } catch (textError) {\n            errorMessage = `Server error: ${response.status} ${response.statusText}`;\n          }\n        }\n        throw new Error(errorMessage);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Sign in error:', error);\n      throw error;\n    }\n  },\n\n  async signOut() {\n    const response = await fetch('/api/auth/signout', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Sign out failed');\n    }\n\n    return response.json();\n  },\n\n  async getCurrentUser() {\n    const response = await fetch('/api/auth/user');\n    \n    if (!response.ok) {\n      if (response.status === 401) {\n        return null; // User not authenticated\n      }\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to get user');\n    }\n\n    return response.json();\n  },\n\n  async resetPassword(email: string) {\n    const response = await fetch('/api/auth/reset-password', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email }),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Password reset failed');\n    }\n\n    return response.json();\n  },\n\n  async updatePassword(password: string) {\n    const response = await fetch('/api/auth/update-password', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ password }),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Password update failed');\n    }\n\n    return response.json();\n  },\n\n  async signInWithGoogle() {\n    try {\n      const response = await fetch('/api/auth/google', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          redirectUrl: window.location.origin \n        }),\n      });\n\n      // Clone the response to avoid \"body stream already read\" error\n      const responseClone = response.clone();\n\n      if (!response.ok) {\n        let errorMessage = 'Google sign in failed';\n        try {\n          const error = await response.json();\n          errorMessage = error.message || errorMessage;\n        } catch (jsonError) {\n          try {\n            const textError = await responseClone.text();\n            console.error('Non-JSON error response:', textError);\n            errorMessage = `Server error: ${response.status} ${response.statusText}`;\n          } catch (textError) {\n            errorMessage = `Server error: ${response.status} ${response.statusText}`;\n          }\n        }\n        throw new Error(errorMessage);\n      }\n\n      const data = await response.json();\n      \n      // Redirect to Google OAuth URL\n      if (data.url) {\n        window.location.href = data.url;\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Google OAuth error:', error);\n      throw error;\n    }\n  },\n};","size_bytes":5516},"client/src/components/auth/AuthModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useSignIn, useSignUp, useResetPassword, useGoogleSignIn } from \"@/hooks/useAuth\";\nimport { Loader2, ArrowLeft, Mail, Lock, User, Eye, EyeOff } from \"lucide-react\";\n\ninterface AuthModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  defaultTab?: \"signin\" | \"signup\";\n}\n\nexport function AuthModal({ isOpen, onClose, defaultTab = \"signin\" }: AuthModalProps) {\n  const [activeView, setActiveView] = useState<\"signin\" | \"signup\" | \"forgot\">(defaultTab);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px] border-0 bg-transparent p-0 shadow-none\" aria-describedby=\"auth-description\">\n        <DialogTitle className=\"sr-only\">Authentication</DialogTitle>\n        <div id=\"auth-description\" className=\"sr-only\">Sign in or create an account for LoveAIHub</div>\n        \n        {/* Background glow effect */}\n        <div className=\"absolute inset-0 rounded-3xl bg-gradient-to-r from-purple-500/20 via-blue-500/20 to-purple-600/20 blur-xl scale-110\"></div>\n        \n        {/* Main container with purple gradient border */}\n        <div className=\"relative\">\n          {/* Gradient border */}\n          <div className=\"absolute inset-0 rounded-3xl bg-gradient-to-r from-purple-500 via-blue-500 to-purple-600 p-[2px]\">\n            <div className=\"h-full w-full rounded-3xl bg-slate-900\"></div>\n          </div>\n          \n          {/* Content */}\n          <div className=\"relative rounded-3xl bg-slate-900 p-8\">\n            {activeView === \"signin\" && (\n              <SignInForm \n                onForgotPassword={() => setActiveView(\"forgot\")} \n                onSignUpClick={() => setActiveView(\"signup\")}\n                onSuccess={onClose} \n              />\n            )}\n            \n            {activeView === \"signup\" && (\n              <SignUpForm \n                onSignInClick={() => setActiveView(\"signin\")}\n                onSuccess={onClose} \n              />\n            )}\n            \n            {activeView === \"forgot\" && (\n              <ForgotPasswordForm onBack={() => setActiveView(\"signin\")} />\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nfunction SignInForm({ onForgotPassword, onSignUpClick, onSuccess }: { \n  onForgotPassword: () => void; \n  onSignUpClick: () => void;\n  onSuccess: () => void; \n}) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const signIn = useSignIn();\n  const googleSignIn = useGoogleSignIn();\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    signIn.mutate({ email, password }, {\n      onSuccess: () => onSuccess(),\n    });\n  };\n\n  return (\n    <div className=\"w-full space-y-6\">\n      {/* Header */}\n      <div className=\"text-center space-y-3\">\n        <h1 className=\"text-3xl font-bold text-white\">Welcome Back</h1>\n        <p className=\"text-slate-400\">Sign in to your LoveAIHub account</p>\n      </div>\n\n      {/* Form */}\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"email\" className=\"text-sm font-medium text-white\">Email Address</Label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-4 top-1/2 h-5 w-5 -translate-y-1/2 text-slate-400\" />\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n              placeholder=\"Enter your email\"\n              className=\"h-14 pl-12 bg-slate-800 border-slate-700 text-white placeholder:text-slate-400 focus:border-purple-500 rounded-xl\"\n            />\n          </div>\n        </div>\n        \n        <div className=\"space-y-2\">\n          <Label htmlFor=\"password\" className=\"text-sm font-medium text-white\">Password</Label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-4 top-1/2 h-5 w-5 -translate-y-1/2 text-slate-400\" />\n            <Input\n              id=\"password\"\n              type={showPassword ? \"text\" : \"password\"}\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n              placeholder=\"Enter your password\"\n              className=\"h-14 pl-12 pr-12 bg-slate-800 border-slate-700 text-white placeholder:text-slate-400 focus:border-purple-500 rounded-xl\"\n            />\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8 p-0 text-slate-400 hover:text-white\"\n              onClick={() => setShowPassword(!showPassword)}\n            >\n              {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end\">\n          <Button\n            type=\"button\"\n            variant=\"link\"\n            className=\"px-0 text-sm text-purple-400 hover:text-purple-300\"\n            onClick={onForgotPassword}\n          >\n            Forgot your password?\n          </Button>\n        </div>\n\n        <Button \n          type=\"submit\" \n          className=\"w-full h-14 bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white font-semibold text-lg rounded-xl shadow-lg shadow-purple-500/25\" \n          disabled={signIn.isPending}\n        >\n          {signIn.isPending && <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />}\n          Sign In\n        </Button>\n      </form>\n\n      {/* Divider */}\n      <div className=\"relative\">\n        <div className=\"absolute inset-0 flex items-center\">\n          <span className=\"w-full border-t border-slate-700\" />\n        </div>\n        <div className=\"relative flex justify-center text-sm\">\n          <span className=\"bg-slate-900 px-4 text-slate-400\">or continue with</span>\n        </div>\n      </div>\n\n      {/* Social Login */}\n      <Button \n        variant=\"outline\" \n        className=\"w-full h-14 bg-slate-800 border-slate-700 text-white hover:bg-slate-700 rounded-xl text-lg font-medium\" \n        type=\"button\"\n        onClick={() => googleSignIn.mutate()}\n        disabled={googleSignIn.isPending}\n      >\n        {googleSignIn.isPending ? (\n          <Loader2 className=\"mr-3 h-5 w-5 animate-spin\" />\n        ) : (\n          <svg className=\"mr-3 h-5 w-5\" viewBox=\"0 0 24 24\">\n            <path fill=\"#4285f4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n            <path fill=\"#34a853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n            <path fill=\"#fbbc05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n            <path fill=\"#ea4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n          </svg>\n        )}\n        Continue with Google\n      </Button>\n\n      {/* Sign Up Link */}\n      <div className=\"text-center text-sm\">\n        <span className=\"text-slate-400\">Don't have an account? </span>\n        <Button\n          variant=\"link\"\n          className=\"px-0 text-purple-400 hover:text-purple-300 font-medium\"\n          onClick={onSignUpClick}\n        >\n          Sign up\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction SignUpForm({ onSignInClick, onSuccess }: { onSignInClick: () => void; onSuccess: () => void }) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [fullName, setFullName] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const signUp = useSignUp();\n  const googleSignIn = useGoogleSignIn();\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (password !== confirmPassword) {\n      alert(\"Passwords don't match\");\n      return;\n    }\n    const [firstName, ...lastNameParts] = fullName.split(\" \");\n    const lastName = lastNameParts.join(\" \");\n    signUp.mutate({ email, password, firstName, lastName }, {\n      onSuccess: () => onSuccess(),\n    });\n  };\n\n  return (\n    <div className=\"w-full space-y-6\">\n      {/* Header */}\n      <div className=\"text-center space-y-3\">\n        <h1 className=\"text-3xl font-bold text-white\">Create Account</h1>\n        <p className=\"text-slate-400\">Join LoveAIHub and start creating</p>\n      </div>\n\n      {/* Form */}\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"fullName\" className=\"text-sm font-medium text-white\">Full Name</Label>\n          <div className=\"relative\">\n            <User className=\"absolute left-4 top-1/2 h-5 w-5 -translate-y-1/2 text-slate-400\" />\n            <Input\n              id=\"fullName\"\n              value={fullName}\n              onChange={(e) => setFullName(e.target.value)}\n              required\n              placeholder=\"Enter your full name\"\n              className=\"h-14 pl-12 bg-slate-800 border-slate-700 text-white placeholder:text-slate-400 focus:border-purple-500 rounded-xl\"\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"signupEmail\" className=\"text-sm font-medium text-white\">Email Address</Label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-4 top-1/2 h-5 w-5 -translate-y-1/2 text-slate-400\" />\n            <Input\n              id=\"signupEmail\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n              placeholder=\"Enter your email\"\n              className=\"h-14 pl-12 bg-slate-800 border-slate-700 text-white placeholder:text-slate-400 focus:border-purple-500 rounded-xl\"\n            />\n          </div>\n        </div>\n        \n        <div className=\"space-y-2\">\n          <Label htmlFor=\"signupPassword\" className=\"text-sm font-medium text-white\">Password</Label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-4 top-1/2 h-5 w-5 -translate-y-1/2 text-slate-400\" />\n            <Input\n              id=\"signupPassword\"\n              type={showPassword ? \"text\" : \"password\"}\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n              placeholder=\"Create a password\"\n              minLength={6}\n              className=\"h-14 pl-12 pr-12 bg-slate-800 border-slate-700 text-white placeholder:text-slate-400 focus:border-purple-500 rounded-xl\"\n            />\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8 p-0 text-slate-400 hover:text-white\"\n              onClick={() => setShowPassword(!showPassword)}\n            >\n              {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"confirmPassword\" className=\"text-sm font-medium text-white\">Confirm Password</Label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-4 top-1/2 h-5 w-5 -translate-y-1/2 text-slate-400\" />\n            <Input\n              id=\"confirmPassword\"\n              type={showConfirmPassword ? \"text\" : \"password\"}\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              required\n              placeholder=\"Confirm your password\"\n              className=\"h-14 pl-12 pr-12 bg-slate-800 border-slate-700 text-white placeholder:text-slate-400 focus:border-purple-500 rounded-xl\"\n            />\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8 p-0 text-slate-400 hover:text-white\"\n              onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n            >\n              {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n            </Button>\n          </div>\n        </div>\n\n        <Button \n          type=\"submit\" \n          className=\"w-full h-14 bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white font-semibold text-lg rounded-xl shadow-lg shadow-purple-500/25\" \n          disabled={signUp.isPending}\n        >\n          {signUp.isPending && <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />}\n          Create Account\n        </Button>\n      </form>\n\n      {/* Divider */}\n      <div className=\"relative\">\n        <div className=\"absolute inset-0 flex items-center\">\n          <span className=\"w-full border-t border-slate-700\" />\n        </div>\n        <div className=\"relative flex justify-center text-sm\">\n          <span className=\"bg-slate-900 px-4 text-slate-400\">or continue with</span>\n        </div>\n      </div>\n\n      {/* Social Login */}\n      <Button \n        variant=\"outline\" \n        className=\"w-full h-14 bg-slate-800 border-slate-700 text-white hover:bg-slate-700 rounded-xl text-lg font-medium\" \n        type=\"button\"\n        onClick={() => googleSignIn.mutate()}\n        disabled={googleSignIn.isPending}\n      >\n        {googleSignIn.isPending ? (\n          <Loader2 className=\"mr-3 h-5 w-5 animate-spin\" />\n        ) : (\n          <svg className=\"mr-3 h-5 w-5\" viewBox=\"0 0 24 24\">\n            <path fill=\"#4285f4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n            <path fill=\"#34a853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n            <path fill=\"#fbbc05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n            <path fill=\"#ea4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n          </svg>\n        )}\n        Continue with Google\n      </Button>\n\n      {/* Sign In Link */}\n      <div className=\"text-center text-sm\">\n        <span className=\"text-slate-400\">Already have an account? </span>\n        <Button\n          variant=\"link\"\n          className=\"px-0 text-purple-400 hover:text-purple-300 font-medium\"\n          onClick={onSignInClick}\n        >\n          Log in\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction ForgotPasswordForm({ onBack }: { onBack: () => void }) {\n  const [email, setEmail] = useState(\"\");\n  const resetPassword = useResetPassword();\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    resetPassword.mutate(email, {\n      onSuccess: () => onBack(),\n    });\n  };\n\n  return (\n    <div className=\"w-full space-y-6\">\n      {/* Back Button */}\n      <Button \n        variant=\"ghost\" \n        onClick={onBack}\n        className=\"flex items-center gap-2 p-0 text-slate-400 hover:text-white\"\n      >\n        <ArrowLeft className=\"w-4 h-4\" />\n        Back to Sign In\n      </Button>\n\n      {/* Header */}\n      <div className=\"text-center space-y-3\">\n        <h1 className=\"text-3xl font-bold text-white\">Forgot Password?</h1>\n        <p className=\"text-slate-400\">No worries! Enter your email address and we'll send you a link to reset your password.</p>\n      </div>\n\n      {/* Form */}\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"resetEmail\" className=\"text-sm font-medium text-white\">Email Address</Label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-4 top-1/2 h-5 w-5 -translate-y-1/2 text-slate-400\" />\n            <Input\n              id=\"resetEmail\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n              placeholder=\"Enter your email address\"\n              className=\"h-14 pl-12 bg-slate-800 border-slate-700 text-white placeholder:text-slate-400 focus:border-purple-500 rounded-xl\"\n            />\n          </div>\n        </div>\n\n        <Button \n          type=\"submit\" \n          disabled={resetPassword.isPending} \n          className=\"w-full h-14 bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white font-semibold text-lg rounded-xl shadow-lg shadow-purple-500/25\"\n        >\n          {resetPassword.isPending && <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />}\n          Send Reset Link\n        </Button>\n      </form>\n\n      {/* Help Section */}\n      <div className=\"bg-slate-800 rounded-xl p-4 border border-slate-700\">\n        <div className=\"flex items-start gap-3\">\n          <div className=\"w-2 h-2 rounded-full bg-purple-500 mt-2 flex-shrink-0\"></div>\n          <div className=\"space-y-1\">\n            <h3 className=\"font-medium text-white\">Having trouble?</h3>\n            <p className=\"text-sm text-slate-400\">\n              If you don't receive an email within a few minutes, check your spam folder or contact our support team.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Sign Up Link */}\n      <div className=\"text-center text-sm\">\n        <span className=\"text-slate-400\">Don't have an account? </span>\n        <Button\n          variant=\"link\"\n          className=\"px-0 text-purple-400 hover:text-purple-300 font-medium\"\n          onClick={onBack}\n        >\n          Sign up\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":18303},"client/src/components/dashboard/dashboard-header.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { \n  Bell, \n  Search, \n  Settings, \n  HelpCircle,\n  User,\n  LogOut,\n  Crown\n} from \"lucide-react\";\n\ninterface DashboardHeaderProps {\n  title: string;\n  description?: string;\n  children?: React.ReactNode;\n}\n\nexport default function DashboardHeader({ title, description, children }: DashboardHeaderProps) {\n  const { user } = useAuth();\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <div className=\"sticky top-0 z-40 glass-effect border-b border-border/20\">\n      <div className=\"container mx-auto px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          {/* User Greeting */}\n          <div className=\"flex-shrink-0 min-w-0\">\n            <h1 className=\"text-lg sm:text-xl font-semibold text-foreground truncate\">\n              {title}\n            </h1>\n          </div>\n          \n          {/* Right Side - Search, Notification, Profile */}\n          <div className=\"flex items-center space-x-2 sm:space-x-4\">\n            {/* Search Bar */}\n            <div className=\"relative w-48 sm:w-64 lg:w-80 hidden sm:block\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              <Input\n                placeholder=\"Search tools, generations...\"\n                value={searchValue}\n                onChange={(e) => setSearchValue(e.target.value)}\n                className=\"pl-10 pr-4 h-10 bg-background/50 border-border/20 focus:border-primary/50 transition-all\"\n              />\n              {searchValue && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-6 w-6 p-0\"\n                  onClick={() => setSearchValue(\"\")}\n                >\n                  ×\n                </Button>\n              )}\n            </div>\n\n            {/* Mobile Search Button */}\n            <Button variant=\"ghost\" size=\"sm\" className=\"h-10 w-10 sm:hidden\">\n              <Search className=\"w-5 h-5\" />\n            </Button>\n\n            {/* Notification Icon */}\n            <Button variant=\"ghost\" size=\"sm\" className=\"relative h-10 w-10 flex-shrink-0\">\n              <Bell className=\"w-5 h-5\" />\n              <span className=\"absolute -top-1 -right-1 h-3 w-3 bg-primary rounded-full text-[10px] flex items-center justify-center text-white font-bold\">\n                3\n              </span>\n            </Button>\n\n            {/* Profile Icon */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"relative h-10 w-10 rounded-full flex-shrink-0\">\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarImage src={(user as any)?.profileImageUrl} alt=\"Profile\" />\n                    <AvatarFallback className=\"bg-gradient-to-r from-primary to-purple-600 text-white\">\n                      {((user as any)?.firstName?.[0] || 'U').toUpperCase()}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-64\" align=\"end\" forceMount>\n                <DropdownMenuLabel className=\"font-normal\">\n                  <div className=\"flex flex-col space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <p className=\"text-sm font-medium leading-none\">\n                        {(user as any)?.firstName} {(user as any)?.lastName}\n                      </p>\n                      {(user as any)?.subscriptionType === \"premium\" && (\n                        <Badge variant=\"default\" className=\"text-xs\">\n                          <Crown className=\"w-3 h-3 mr-1\" />\n                          Premium\n                        </Badge>\n                      )}\n                    </div>\n                    <p className=\"text-xs leading-none text-muted-foreground\">\n                      {(user as any)?.email}\n                    </p>\n                    {(user as any)?.subscriptionType === \"free\" && (\n                      <div className=\"text-xs text-muted-foreground\">\n                        {(user as any)?.generationsUsed || 0}/{(user as any)?.generationsLimit || 50} generations used\n                      </div>\n                    )}\n                  </div>\n                </DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem>\n                  <User className=\"mr-2 h-4 w-4\" />\n                  <span>Profile</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <Settings className=\"mr-2 h-4 w-4\" />\n                  <span>Settings</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <HelpCircle className=\"mr-2 h-4 w-4\" />\n                  <span>Help & Support</span>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={handleLogout} className=\"text-destructive\">\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Log out</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n\n        {/* Description and Actions Below Header */}\n        {(description || children) && (\n          <div className=\"flex flex-col sm:flex-row sm:items-center justify-between mt-4 space-y-3 sm:space-y-0\">\n            {description && (\n              <p className=\"text-muted-foreground\">\n                {description}\n              </p>\n            )}\n            {children && (\n              <div className=\"flex items-center space-x-2\">\n                {children}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":6402},"client/src/components/dashboard/quick-actions.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Image, \n  Video, \n  MessageSquare, \n  Mic, \n  Edit, \n  ArrowRight,\n  Sparkles,\n  Zap,\n  Wand2\n} from \"lucide-react\";\n\nexport default function QuickActions() {\n  const actions = [\n    {\n      title: \"Image Generation Studio\",\n      description: \"Create stunning images with 20+ AI models including FLUX, DALL-E, and Imagen\",\n      icon: Image,\n      href: \"/image-generation\",\n      gradient: \"from-blue-500 to-purple-600\",\n      features: [\"FLUX Pro\", \"DALL-E 3\", \"Imagen 3\"],\n      badge: \"Most Popular\"\n    },\n    {\n      title: \"Video Generation Lab\",\n      description: \"Transform text into professional videos with cutting-edge AI technology\",\n      icon: Video,\n      href: \"/video-generation\",\n      gradient: \"from-purple-500 to-pink-600\",\n      features: [\"WAN-2.1\", \"HD Quality\", \"Custom Duration\"],\n      badge: \"New\"\n    },\n    {\n      title: \"Advanced AI Chat\",\n      description: \"Chat with the most advanced AI models including GPT-4, Claude, and Gemini\",\n      icon: MessageSquare,\n      href: \"/ai-chat\",\n      gradient: \"from-green-500 to-teal-600\",\n      features: [\"GPT-4\", \"Claude 3.5\", \"Gemini Pro\"],\n      badge: \"Updated\"\n    },\n    {\n      title: \"Audio Generation\",\n      description: \"Generate high-quality speech and audio with advanced AI voice synthesis\",\n      icon: Mic,\n      href: \"/audio-speech\",\n      gradient: \"from-orange-500 to-red-600\",\n      features: [\"Natural Voices\", \"Multiple Languages\", \"Custom Tones\"]\n    },\n    {\n      title: \"Image Editor Pro\",\n      description: \"Edit and enhance images with AI-powered tools and advanced filters\",\n      icon: Edit,\n      href: \"/image-editing\",\n      gradient: \"from-cyan-500 to-blue-600\",\n      features: [\"AI Inpainting\", \"Style Transfer\", \"Background Removal\"]\n    },\n    {\n      title: \"Quick Generate\",\n      description: \"Instantly create content with our smart quick-generation tools\",\n      icon: Zap,\n      href: \"/image-generation?quick=true\",\n      gradient: \"from-yellow-500 to-orange-600\",\n      features: [\"One-Click\", \"Smart Prompts\", \"Fast Results\"],\n      badge: \"Beta\"\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-xl font-bold flex items-center space-x-2\">\n            <Wand2 className=\"w-5 h-5\" />\n            <span>Quick Actions</span>\n          </h2>\n          <p className=\"text-muted-foreground text-sm\">Jump into your favorite AI tools</p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {actions.map((action, index) => {\n          const Icon = action.icon;\n          return (\n            <Card key={index} className=\"group glass-card hover:scale-105 transition-all duration-300 overflow-hidden\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className={`w-12 h-12 rounded-xl bg-gradient-to-r ${action.gradient} flex items-center justify-center mb-3`}>\n                    <Icon className=\"w-6 h-6 text-white\" />\n                  </div>\n                  {action.badge && (\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      {action.badge}\n                    </Badge>\n                  )}\n                </div>\n                <CardTitle className=\"text-lg group-hover:text-primary transition-colors\">\n                  {action.title}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                  {action.description}\n                </p>\n                \n                {action.features && (\n                  <div className=\"flex flex-wrap gap-1\">\n                    {action.features.map((feature, idx) => (\n                      <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                        {feature}\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n\n                <Link href={action.href}>\n                  <Button className=\"w-full group/btn\">\n                    <span>Get Started</span>\n                    <ArrowRight className=\"w-4 h-4 ml-2 group-hover/btn:translate-x-1 transition-transform\" />\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","size_bytes":4716},"client/src/components/dashboard/stats-cards.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  TrendingUp, \n  Zap, \n  Clock, \n  Crown,\n  Image,\n  Video,\n  MessageSquare,\n  Mic\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function StatsCards() {\n  const { user } = useAuth();\n\n  const usagePercentage = user?.subscriptionType === \"free\" \n    ? ((user?.generationsUsed || 0) / (user?.generationsLimit || 50)) * 100 \n    : 0;\n\n  const stats = [\n    {\n      title: \"Usage This Month\",\n      value: user?.subscriptionType === \"premium\" ? \"Unlimited\" : `${user?.generationsUsed || 0}/${user?.generationsLimit || 50}`,\n      change: \"+12% from last month\",\n      icon: TrendingUp,\n      color: \"text-green-500\",\n      showProgress: user?.subscriptionType === \"free\"\n    },\n    {\n      title: \"AI Models Available\",\n      value: \"20+\",\n      change: \"Across all categories\",\n      icon: Zap,\n      color: \"text-blue-500\"\n    },\n    {\n      title: \"Avg. Generation Time\",\n      value: \"2.3s\",\n      change: \"40% faster than average\",\n      icon: Clock,\n      color: \"text-purple-500\"\n    },\n    {\n      title: \"Subscription Status\",\n      value: user?.subscriptionType === \"premium\" ? \"Premium\" : \"Free\",\n      change: user?.subscriptionType === \"premium\" ? \"All features unlocked\" : \"Upgrade for unlimited access\",\n      icon: Crown,\n      color: user?.subscriptionType === \"premium\" ? \"text-yellow-500\" : \"text-gray-500\"\n    }\n  ];\n\n  const quickStats = [\n    {\n      label: \"Images Generated\",\n      value: \"1,234\",\n      icon: Image,\n      color: \"bg-blue-500\"\n    },\n    {\n      label: \"Videos Created\",\n      value: \"56\",\n      icon: Video,\n      color: \"bg-purple-500\"\n    },\n    {\n      label: \"Chat Messages\",\n      value: \"789\",\n      icon: MessageSquare,\n      color: \"bg-green-500\"\n    },\n    {\n      label: \"Audio Files\",\n      value: \"23\",\n      icon: Mic,\n      color: \"bg-orange-500\"\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Main Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {stats.map((stat, index) => {\n          const Icon = stat.icon;\n          return (\n            <Card key={index} className=\"glass-card hover:scale-105 transition-transform\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                  {stat.title}\n                </CardTitle>\n                <Icon className={`w-4 h-4 ${stat.color}`} />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{stat.value}</div>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  {stat.change}\n                </p>\n                {stat.showProgress && (\n                  <div className=\"mt-3\">\n                    <Progress value={usagePercentage} className=\"h-2\" />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {user?.generationsUsed || 0} of {user?.generationsLimit || 50} generations used\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Quick Stats */}\n      <Card className=\"glass-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <TrendingUp className=\"w-5 h-5\" />\n            <span>Generation Statistics</span>\n            <Badge variant=\"secondary\">This Month</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n            {quickStats.map((stat, index) => {\n              const Icon = stat.icon;\n              return (\n                <div key={index} className=\"flex items-center space-x-3 p-3 rounded-lg bg-accent/20 hover:bg-accent/30 transition-colors\">\n                  <div className={`w-10 h-10 rounded-lg ${stat.color} flex items-center justify-center`}>\n                    <Icon className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium\">{stat.label}</p>\n                    <p className=\"text-lg font-bold\">{stat.value}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4587},"client/src/components/layout/dashboard-layout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Menu, \n  Sparkles, \n  Home,\n  Image, \n  Video, \n  MessageSquare, \n  Mic, \n  Edit, \n  Code,\n  BookOpen,\n  Settings,\n  Crown,\n  LogOut,\n  ChevronLeft,\n  ChevronRight,\n  User,\n  Star,\n  Clock,\n  BarChart3,\n  Zap,\n  TrendingUp\n} from \"lucide-react\";\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [hoveredItem, setHoveredItem] = useState<string | null>(null);\n  const { user } = useAuth();\n  const [location] = useLocation();\n\n  const navigationItems = [\n    {\n      title: \"Dashboard\",\n      href: \"/\",\n      icon: Home,\n      description: \"Overview and analytics\",\n      badge: null,\n      gradient: \"from-blue-500 to-cyan-500\"\n    },\n    {\n      title: \"Image Studio\",\n      href: \"/image-generation\",\n      icon: Image,\n      description: \"AI image generation\",\n      badge: \"Hot\",\n      gradient: \"from-purple-500 to-pink-500\"\n    },\n    {\n      title: \"Video Lab\",\n      href: \"/video-generation\",\n      icon: Video,\n      description: \"AI video creation\",\n      badge: \"New\",\n      gradient: \"from-green-500 to-emerald-500\"\n    },\n    {\n      title: \"AI Chat\",\n      href: \"/ai-chat\",\n      icon: MessageSquare,\n      description: \"Conversational AI\",\n      badge: null,\n      gradient: \"from-orange-500 to-red-500\"\n    },\n    {\n      title: \"Audio Tools\",\n      href: \"/audio-speech\",\n      icon: Mic,\n      description: \"Speech synthesis\",\n      badge: null,\n      gradient: \"from-indigo-500 to-purple-500\"\n    },\n    {\n      title: \"Image Editor\",\n      href: \"/image-editing\",\n      icon: Edit,\n      description: \"AI-powered editing\",\n      badge: null,\n      gradient: \"from-teal-500 to-cyan-500\"\n    },\n    {\n      title: \"API Docs\",\n      href: \"/api-docs\",\n      icon: Code,\n      description: \"Developer resources\",\n      badge: null,\n      gradient: \"from-slate-500 to-gray-500\"\n    },\n    {\n      title: \"Blog\",\n      href: \"/blog\",\n      icon: BookOpen,\n      description: \"Latest updates\",\n      badge: null,\n      gradient: \"from-amber-500 to-orange-500\"\n    }\n  ];\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const isActive = (href: string) => {\n    if (href === \"/\") return location === \"/\";\n    return location.startsWith(href);\n  };\n\n  const SidebarContent = ({ mobile = false }: { mobile?: boolean }) => (\n    <div className=\"flex flex-col h-full glass-card border-r border-border/20\">\n      {/* Header with enhanced styling */}\n      <div className=\"relative p-6 border-b border-border/20 bg-gradient-to-r from-primary/5 to-purple-500/5\">\n        <div className=\"flex items-center justify-between\">\n          <Link href=\"/\" className=\"flex items-center space-x-3 group\">\n            <div className=\"relative\">\n              <div className=\"w-10 h-10 rounded-xl bg-gradient-to-r from-primary to-purple-500 flex items-center justify-center shadow-lg transform group-hover:scale-105 transition-transform duration-200\">\n                <Sparkles className=\"w-6 h-6 text-white\" />\n              </div>\n              <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-background animate-pulse\"></div>\n            </div>\n            {(!sidebarCollapsed || mobile) && (\n              <div className=\"flex flex-col\">\n                <span className=\"text-xl font-bold gradient-text\">LoveAIHub</span>\n                <span className=\"text-xs text-muted-foreground\">AI Creative Suite</span>\n              </div>\n            )}\n          </Link>\n          {!mobile && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setSidebarCollapsed(!sidebarCollapsed)}\n              className=\"hidden lg:flex hover:bg-accent/50 transition-colors\"\n            >\n              {sidebarCollapsed ? <ChevronRight className=\"w-4 h-4\" /> : <ChevronLeft className=\"w-4 h-4\" />}\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Enhanced User Info */}\n      <div className=\"p-4 border-b border-border/20\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"relative\">\n            <Avatar className=\"w-12 h-12 border-2 border-primary/20\">\n              <AvatarImage src={(user as any)?.profileImageUrl} alt=\"Profile\" />\n              <AvatarFallback className=\"bg-gradient-to-r from-primary to-purple-600 text-white text-lg\">\n                {((user as any)?.firstName?.[0] || 'U').toUpperCase()}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-background\"></div>\n          </div>\n          {(!sidebarCollapsed || mobile) && (\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center space-x-2\">\n                <p className=\"text-sm font-semibold truncate\">{(user as any)?.firstName} {(user as any)?.lastName}</p>\n                {(user as any)?.subscriptionType === \"premium\" && (\n                  <Badge variant=\"default\" className=\"text-xs bg-gradient-to-r from-yellow-500 to-orange-500 border-0\">\n                    <Crown className=\"w-3 h-3 mr-1\" />\n                    Pro\n                  </Badge>\n                )}\n              </div>\n              <p className=\"text-xs text-muted-foreground truncate\">{(user as any)?.email}</p>\n              \n              {/* Usage Progress for Free Users */}\n              {(user as any)?.subscriptionType === \"free\" && (\n                <div className=\"mt-3 space-y-2\">\n                  <div className=\"flex justify-between text-xs\">\n                    <span className=\"text-muted-foreground\">Usage</span>\n                    <span className=\"text-muted-foreground\">\n                      {(user as any)?.generationsUsed || 0}/{(user as any)?.generationsLimit || 50}\n                    </span>\n                  </div>\n                  <Progress \n                    value={((user as any)?.generationsUsed || 0) / ((user as any)?.generationsLimit || 50) * 100} \n                    className=\"h-2\"\n                  />\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Enhanced Navigation */}\n      <div className=\"flex-1 overflow-y-auto p-2\">\n        <div className=\"space-y-1\">\n          {navigationItems.map((item, index) => {\n            const Icon = item.icon;\n            const active = isActive(item.href);\n            \n            return (\n              <Link key={item.href} href={item.href}>\n                <div\n                  className={`\n                    group relative flex items-center space-x-3 px-3 py-3 rounded-xl transition-all duration-200 cursor-pointer\n                    ${active \n                      ? 'bg-gradient-to-r from-primary/20 to-purple-500/10 border border-primary/30 shadow-md' \n                      : 'hover:bg-accent/50 hover:scale-[1.02]'\n                    }\n                  `}\n                  onMouseEnter={() => setHoveredItem(item.href)}\n                  onMouseLeave={() => setHoveredItem(null)}\n                  onClick={() => mobile && setSidebarOpen(false)}\n                >\n                  {/* Active indicator */}\n                  {active && (\n                    <div className=\"absolute left-0 top-1/2 transform -translate-y-1/2 w-1 h-8 bg-gradient-to-b from-primary to-purple-500 rounded-r-full\"></div>\n                  )}\n                  \n                  <div className={`\n                    relative p-2 rounded-lg transition-all duration-200\n                    ${active \n                      ? `bg-gradient-to-r ${item.gradient} text-white shadow-lg` \n                      : 'bg-accent/20 group-hover:bg-accent/40'\n                    }\n                  `}>\n                    <Icon className={`w-5 h-5 ${active ? 'text-white' : 'text-foreground'}`} />\n                    {item.badge && (\n                      <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-red-500 rounded-full animate-pulse\"></div>\n                    )}\n                  </div>\n                  \n                  {(!sidebarCollapsed || mobile) && (\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className={`text-sm font-medium ${active ? 'text-primary' : 'text-foreground'}`}>\n                            {item.title}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground truncate\">\n                            {item.description}\n                          </p>\n                        </div>\n                        {item.badge && (\n                          <Badge variant=\"secondary\" className=\"text-xs ml-2 bg-red-500/20 text-red-400 border-0\">\n                            {item.badge}\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* Hover effect */}\n                  {hoveredItem === item.href && !active && (\n                    <ChevronRight className=\"w-4 h-4 text-muted-foreground opacity-60\" />\n                  )}\n                </div>\n              </Link>\n            );\n          })}\n        </div>\n      </div>\n\n      <Separator className=\"bg-border/20\" />\n\n      {/* Enhanced Footer */}\n      <div className=\"p-4 space-y-3\">\n        {/* Quick Stats */}\n        {(!sidebarCollapsed || mobile) && (user as any)?.subscriptionType === \"premium\" && (\n          <div className=\"grid grid-cols-2 gap-2\">\n            <div className=\"bg-gradient-to-r from-green-500/10 to-emerald-500/10 p-2 rounded-lg border border-green-500/20\">\n              <div className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"w-4 h-4 text-green-500\" />\n                <div>\n                  <p className=\"text-xs font-medium\">Active</p>\n                  <p className=\"text-xs text-muted-foreground\">Premium</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"bg-gradient-to-r from-blue-500/10 to-cyan-500/10 p-2 rounded-lg border border-blue-500/20\">\n              <div className=\"flex items-center space-x-2\">\n                <Zap className=\"w-4 h-4 text-blue-500\" />\n                <div>\n                  <p className=\"text-xs font-medium\">Unlimited</p>\n                  <p className=\"text-xs text-muted-foreground\">Generations</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"space-y-2\">\n          <Button \n            variant=\"ghost\" \n            className=\"w-full justify-start hover:bg-accent/50 transition-colors\"\n            size=\"sm\"\n          >\n            <Settings className=\"w-4 h-4 mr-3\" />\n            {(!sidebarCollapsed || mobile) && \"Settings\"}\n          </Button>\n          \n          <Button \n            variant=\"ghost\" \n            className=\"w-full justify-start hover:bg-destructive/10 hover:text-destructive transition-colors\"\n            size=\"sm\"\n            onClick={handleLogout}\n          >\n            <LogOut className=\"w-4 h-4 mr-3\" />\n            {(!sidebarCollapsed || mobile) && \"Sign Out\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      {/* Desktop Sidebar */}\n      <div className={`\n        hidden lg:flex transition-all duration-300 ease-in-out\n        ${sidebarCollapsed ? 'w-20' : 'w-80'}\n      `}>\n        <SidebarContent />\n      </div>\n\n      {/* Mobile Sidebar */}\n      <Sheet open={sidebarOpen} onOpenChange={setSidebarOpen}>\n        <SheetTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"lg:hidden fixed top-4 left-4 z-50 glass-effect hover:bg-accent/20\"\n          >\n            <Menu className=\"w-5 h-5\" />\n          </Button>\n        </SheetTrigger>\n        <SheetContent side=\"left\" className=\"p-0 w-80 bg-background/95 backdrop-blur-xl border-r border-border/20\">\n          <SidebarContent mobile={true} />\n        </SheetContent>\n      </Sheet>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {children}\n      </div>\n    </div>\n  );\n}","size_bytes":13003}}}